// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CowLibCore.Schemas.AnimationController;
//
//    var animationControllerFile = AnimationControllerFile.FromJson(jsonString);

namespace CowLibCore.Schemas.AnimationController
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Schema for BP animation controllers
    /// </summary>
    public partial class AnimationControllerFile
    {
        /// <summary>
        /// The animation controllers schema for 1.10.0
        /// </summary>
        [JsonProperty("animation_controllers")]
        public Dictionary<string, Controller> AnimationControllers { get; set; }

        /// <summary>
        /// A version that tells minecraft what type of data format can be expected when reading this
        /// file.
        /// </summary>
        [JsonProperty("format_version")]
        public string FormatVersion { get; set; } = "1.10.0";
    }

    /// <summary>
    /// A single animation controller 1.10.0
    /// </summary>
    public partial class Controller
    {
        /// <summary>
        /// TODO description: initial state
        /// </summary>
        [JsonProperty("initial_state", NullValueHandling = NullValueHandling.Ignore)]
        public string InitialState { get; set; }

        /// <summary>
        /// The states of this animation controller
        /// </summary>
        [JsonProperty("states")]
        public Dictionary<string, AnimationState> States { get; set; }
    }

    /// <summary>
    /// Animation state
    /// </summary>
    public partial class AnimationState
    {
        /// <summary>
        /// The animations definition for 1.10.0
        /// </summary>
        [JsonProperty("animations", NullValueHandling = NullValueHandling.Ignore)]
        public List<Animationspec> Animations { get; set; }

        /// <summary>
        /// Events, commands or transitions to preform on entry of this state
        /// </summary>
        [JsonProperty("on_entry", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> OnEntry { get; set; }

        /// <summary>
        /// Events, commands or transitions to preform on exit of this state
        /// </summary>
        [JsonProperty("on_exit", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> OnExit { get; set; }

        /// <summary>
        /// The transition definition for 1.10.0
        /// </summary>
        [JsonProperty("transitions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, string>> Transitions { get; set; }
    }

    /// <summary>
    /// TODO description: animations
    /// </summary>
    public partial struct Animationspec
    {
        public string String;
        public Dictionary<string, string> StringMap;

        public static implicit operator Animationspec(string String) => new Animationspec { String = String };
        public static implicit operator Animationspec(Dictionary<string, string> StringMap) => new Animationspec { StringMap = StringMap };
    }

    public partial class AnimationControllerFile
    {
        public static AnimationControllerFile FromJson(string json) => JsonConvert.DeserializeObject<AnimationControllerFile>(json, CowLibCore.Schemas.AnimationController.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AnimationControllerFile self) => JsonConvert.SerializeObject(self, CowLibCore.Schemas.AnimationController.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AnimationspecConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AnimationspecConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Animationspec) || t == typeof(Animationspec?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Animationspec { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, string>>(reader);
                    return new Animationspec { StringMap = objectValue };
            }
            throw new Exception("Cannot unmarshal type Animationspec");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Animationspec)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringMap != null)
            {
                serializer.Serialize(writer, value.StringMap);
                return;
            }
            throw new Exception("Cannot marshal type Animationspec");
        }

        public static readonly AnimationspecConverter Singleton = new AnimationspecConverter();
    }
}
