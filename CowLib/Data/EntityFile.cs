// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var models = Models.FromJson(jsonString);

// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable CommentTypo
namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Behavior pack entity definition
    /// </summary>
    public partial class EntityFile
    {
        [JsonProperty("format_version", NullValueHandling = NullValueHandling.Ignore)]
        public string FormatVersion { get; set; } = "1.14.0";

        [JsonProperty("minecraft:entity")]
        public MinecraftEntity MinecraftEntity { get; set; } = new MinecraftEntity();
    }

    public partial class MinecraftEntity
    {
        public MinecraftEntity()
        {
            Components = new Components();    
        }
        
        [JsonProperty("component_groups", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Components> ComponentGroups = new Dictionary<string, Components>();

        [JsonProperty("components", NullValueHandling = NullValueHandling.Ignore)]
        public Components Components { get; set; } = new Components();

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [JsonProperty("events", NullValueHandling = NullValueHandling.Ignore)]
        public Events Events { get; set; }
    }


    public partial class Components
    {
        /// <summary>
        /// Allows this entity to avoid certain mob types.
        /// </summary>
        [JsonProperty("minecraft:behavior.avoid_mob_type", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorAvoidMobType MinecraftBehaviorAvoidMobType { get; set; }

        /// <summary>
        /// Allows this mob to look at and follow the player that holds food they like.
        /// </summary>
        [JsonProperty("minecraft:behavior.beg", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorBeg MinecraftBehaviorBeg { get; set; }

        /// <summary>
        /// Allows this mob to break doors.
        /// </summary>
        [JsonProperty("minecraft:behavior.break_door", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorBreakDoor MinecraftBehaviorBreakDoor { get; set; }

        /// <summary>
        /// Allows this mob to breed with other mobs.
        /// </summary>
        [JsonProperty("minecraft:behavior.breed", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorBreed MinecraftBehaviorBreed { get; set; }

        /// <summary>
        /// This allows the mob celebrate by jumping up and playing a sound periodically.
        /// </summary>
        [JsonProperty("minecraft:behavior.celebrate", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorCelebrate MinecraftBehaviorCelebrate { get; set; }

        /// <summary>
        /// Allows the mob to attack its target by running at it.
        /// </summary>
        [JsonProperty("minecraft:behavior.charge_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorChargeAttack MinecraftBehaviorChargeAttack { get; set; }

        /// <summary>
        /// Allows this mob to charge and use their held item.
        /// </summary>
        [JsonProperty("minecraft:behavior.charge_held_item", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorChargeHeldItem MinecraftBehaviorChargeHeldItem { get; set; }

        /// <summary>
        /// Allows the mob to move in a circle around a point or a target.
        /// </summary>
        [JsonProperty("minecraft:behavior.circle_around_anchor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorCircleAroundAnchor MinecraftBehaviorCircleAroundAnchor { get; set; }

        /// <summary>
        /// Allows the mob to be controlled by the player.
        /// </summary>
        [JsonProperty("minecraft:behavior.controlled_by_player", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorControlledByPlayer MinecraftBehaviorControlledByPlayer { get; set; }

        /// <summary>
        /// Allows the mob to target another mob that hurts an entity it trusts.
        /// </summary>
        [JsonProperty("minecraft:behavior.defend_trusted_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDefendTrustedTarget MinecraftBehaviorDefendTrustedTarget { get; set; }

        /// <summary>
        /// Allows the mob to stay in the village and fight mobs hostile to the villagers.
        /// </summary>
        [JsonProperty("minecraft:behavior.defend_village_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDefendVillageTarget MinecraftBehaviorDefendVillageTarget { get; set; }

        /// <summary>
        /// Allows the mob to an attack where the hit is delayed.
        /// </summary>
        [JsonProperty("minecraft:behavior.delayed_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDelayedAttack MinecraftBehaviorDelayedAttack { get; set; }

        /// <summary>
        /// Allows the mob to open and close doors.
        /// </summary>
        [JsonProperty("minecraft:behavior.door_interact", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDoorInteract MinecraftBehaviorDoorInteract { get; set; }

        /// <summary>
        /// Allows the dragon to attack a player by flying fast at them. The player is chosen by the
        /// dragonscanning goal. Can only be used by the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragonchargeplayer", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragonchargeplayer MinecraftBehaviorDragonchargeplayer { get; set; }

        /// <summary>
        /// Allows the dragon to go out with glory. This controls the Ender Dragon's death animation
        /// and can't be used by other mobs.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragondeath", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragondeath MinecraftBehaviorDragondeath { get; set; }

        /// <summary>
        /// Allows the dragon to use its flame breath attack. Can only be used by the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragonflaming", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragonflaming MinecraftBehaviorDragonflaming { get; set; }

        /// <summary>
        /// Allows the Dragon to fly around in a circle around the center podium. Can only be used by
        /// the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragonholdingpattern", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragonholdingpattern MinecraftBehaviorDragonholdingpattern { get; set; }

        /// <summary>
        /// Allows the Dragon to stop flying and transition into perching mode. Can only be used by
        /// the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragonlanding", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragonlanding MinecraftBehaviorDragonlanding { get; set; }

        /// <summary>
        /// Allows the dragon to look around for a player to attack while in perch mode. Can only be
        /// used by the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragonscanning", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragonscanning MinecraftBehaviorDragonscanning { get; set; }

        /// <summary>
        /// Allows the dragon to fly around looking for a player and shoot fireballs at them. Can
        /// only be used by the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragonstrafeplayer", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragonstrafeplayer MinecraftBehaviorDragonstrafeplayer { get; set; }

        /// <summary>
        /// Allows the dragon to leave perch mode and go back to flying around. Can only be used by
        /// the Ender Dragon.
        /// </summary>
        [JsonProperty("minecraft:behavior.dragontakeoff", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDragontakeoff MinecraftBehaviorDragontakeoff { get; set; }

        /// <summary>
        /// Allows the mob to drink potions based on specified environment conditions.
        /// </summary>
        [JsonProperty("minecraft:behavior.drink_potion", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDrinkPotion MinecraftBehaviorDrinkPotion { get; set; }

        /// <summary>
        /// Allows the mob to move near a target and drop an item.
        /// </summary>
        [JsonProperty("minecraft:behavior.drop_item_for", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorDropItemFor MinecraftBehaviorDropItemFor { get; set; }

        /// <summary>
        /// Allows the mob to eat a block (for example, sheep eating grass).
        /// </summary>
        [JsonProperty("minecraft:behavior.eat_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorEatBlock MinecraftBehaviorEatBlock { get; set; }

        /// <summary>
        /// If the mob is carrying a food item, the mob will eat it and the effects will be applied
        /// to the mob.
        /// </summary>
        [JsonProperty("minecraft:behavior.eat_carried_item", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorEatCarriedItem MinecraftBehaviorEatCarriedItem { get; set; }

        /// <summary>
        /// Allows the enderman to drop a block they are carrying. Can only be used by Endermen.
        /// </summary>
        [JsonProperty("minecraft:behavior.enderman_leave_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorEndermanLeaveBlock MinecraftBehaviorEndermanLeaveBlock { get; set; }

        /// <summary>
        /// Allows the enderman to take a block and carry it around. Can only be used by Endermen.
        /// </summary>
        [JsonProperty("minecraft:behavior.enderman_take_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorEndermanTakeBlock MinecraftBehaviorEndermanTakeBlock { get; set; }

        /// <summary>
        /// allows a mob to explore the outskirts of a village
        /// </summary>
        [JsonProperty("minecraft:behavior.explore_outskirts", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorExploreOutskirts MinecraftBehaviorExploreOutskirts { get; set; }

        /// <summary>
        /// Allows the mob to seek shade.
        /// </summary>
        [JsonProperty("minecraft:behavior.find_cover", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFindCover MinecraftBehaviorFindCover { get; set; }

        /// <summary>
        /// Allows the mob to look around for another mob to ride atop it.
        /// </summary>
        [JsonProperty("minecraft:behavior.find_mount", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFindMount MinecraftBehaviorFindMount { get; set; }

        /// <summary>
        /// Allows the mob to move towards the nearest underwater ruin or shipwreck.
        /// </summary>
        [JsonProperty("minecraft:behavior.find_underwater_treasure", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFindUnderwaterTreasure MinecraftBehaviorFindUnderwaterTreasure { get; set; }

        /// <summary>
        /// Allows the mob to run away from direct sunlight and seek shade.
        /// </summary>
        [JsonProperty("minecraft:behavior.flee_sun", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFleeSun MinecraftBehaviorFleeSun { get; set; }

        /// <summary>
        /// Allows the mob to stay afloat while swimming.
        /// </summary>
        [JsonProperty("minecraft:behavior.float", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFloat MinecraftBehaviorFloat { get; set; }

        /// <summary>
        /// Allows the mob to float around like the Ghast.
        /// </summary>
        [JsonProperty("minecraft:behavior.float_wander", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFloatWander MinecraftBehaviorFloatWander { get; set; }

        /// <summary>
        /// Allows the mob to follow mobs that are in a caravan.
        /// </summary>
        [JsonProperty("minecraft:behavior.follow_caravan", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFollowCaravan MinecraftBehaviorFollowCaravan { get; set; }

        /// <summary>
        /// Allows the mob to follow other mobs.
        /// </summary>
        [JsonProperty("minecraft:behavior.follow_mob", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFollowMob MinecraftBehaviorFollowMob { get; set; }

        /// <summary>
        /// Allows the mob to follow the player that owns them.
        /// </summary>
        [JsonProperty("minecraft:behavior.follow_owner", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFollowOwner MinecraftBehaviorFollowOwner { get; set; }

        /// <summary>
        /// Allows the mob to follow their parent around.
        /// </summary>
        [JsonProperty("minecraft:behavior.follow_parent", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFollowParent MinecraftBehaviorFollowParent { get; set; }

        /// <summary>
        /// Allows mob to move towards its current target captain.
        /// </summary>
        [JsonProperty("minecraft:behavior.follow_target_captain", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorFollowTargetCaptain MinecraftBehaviorFollowTargetCaptain { get; set; }

        /// <summary>
        /// Allows the mob to move back to the position they were spawned.
        /// </summary>
        [JsonProperty("minecraft:behavior.go_home", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorGoHome MinecraftBehaviorGoHome { get; set; }

        /// <summary>
        /// Allows the guardian to use its laser beam attack. Can only be used by Guardians and Elder
        /// Guardians.
        /// </summary>
        [JsonProperty("minecraft:behavior.guardian_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorGuardianAttack MinecraftBehaviorGuardianAttack { get; set; }

        /// <summary>
        /// Allows the villager to harvest nearby farms. Can only be used by Villagers.
        /// </summary>
        [JsonProperty("minecraft:behavior.harvest_farm_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorHarvestFarmBlock MinecraftBehaviorHarvestFarmBlock { get; set; }

        /// <summary>
        /// Allows a mob with the hide component to attempt to move to - and hide at - an owned or
        /// nearby POI.
        /// </summary>
        [JsonProperty("minecraft:behavior.hide", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorHide MinecraftBehaviorHide { get; set; }

        /// <summary>
        /// The mob freezes and looks at the mob they are targeting.
        /// </summary>
        [JsonProperty("minecraft:behavior.hold_ground", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorHoldGround MinecraftBehaviorHoldGround { get; set; }

        /// <summary>
        /// Allows the mob to hover at its current position.
        /// </summary>
        [JsonProperty("minecraft:behavior.hover", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorHover MinecraftBehaviorHover { get; set; }

        /// <summary>
        /// Allows the mob to target another mob that hurts them.
        /// </summary>
        [JsonProperty("minecraft:behavior.hurt_by_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorHurtByTarget MinecraftBehaviorHurtByTarget { get; set; }

        /// <summary>
        /// Allows the mob to inspect bookshelves.
        /// </summary>
        [JsonProperty("minecraft:behavior.inspect_bookshelf", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorInspectBookshelf MinecraftBehaviorInspectBookshelf { get; set; }

        /// <summary>
        /// Allows the mob to perform a damaging knockback that affects all nearby entities.
        /// </summary>
        [JsonProperty("minecraft:behavior.knockback_roar", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorKnockbackRoar MinecraftBehaviorKnockbackRoar { get; set; }

        /// <summary>
        /// Allows mobs to lay down at times
        /// </summary>
        [JsonProperty("minecraft:behavior.lay_down", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLayDown MinecraftBehaviorLayDown { get; set; }

        /// <summary>
        /// Allows the mob to lay an egg block on a sand block if the mob is pregnant.
        /// </summary>
        [JsonProperty("minecraft:behavior.lay_egg", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLayEgg MinecraftBehaviorLayEgg { get; set; }

        /// <summary>
        /// Allows monsters to jump at and attack their target. Can only be used by hostile mobs.
        /// </summary>
        [JsonProperty("minecraft:behavior.leap_at_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLeapAtTarget MinecraftBehaviorLeapAtTarget { get; set; }

        /// <summary>
        /// Allows the mob to look at nearby entities.
        /// </summary>
        [JsonProperty("minecraft:behavior.look_at_entity", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLookAtEntity MinecraftBehaviorLookAtEntity { get; set; }

        /// <summary>
        /// Allows the mob to look at the player when the player is nearby.
        /// </summary>
        [JsonProperty("minecraft:behavior.look_at_player", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLookAtPlayer MinecraftBehaviorLookAtPlayer { get; set; }

        /// <summary>
        /// Allows the mob to look at the entity they are targetting.
        /// </summary>
        [JsonProperty("minecraft:behavior.look_at_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLookAtTarget MinecraftBehaviorLookAtTarget { get; set; }

        /// <summary>
        /// Allows the mob to look at the player they are trading with.
        /// </summary>
        [JsonProperty("minecraft:behavior.look_at_trading_player", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorLookAtTradingPlayer MinecraftBehaviorLookAtTradingPlayer { get; set; }

        /// <summary>
        /// Allows the villager to look for a mate to spawn other villagers with. Can only be used by
        /// Villagers.
        /// </summary>
        [JsonProperty("minecraft:behavior.make_love", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMakeLove MinecraftBehaviorMakeLove { get; set; }

        /// <summary>
        /// Allows the mob to use close combat melee attacks.
        /// </summary>
        [JsonProperty("minecraft:behavior.melee_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMeleeAttack MinecraftBehaviorMeleeAttack { get; set; }

        /// <summary>
        /// Allows an entity to go to the village bell and mingle with other entities
        /// </summary>
        [JsonProperty("minecraft:behavior.mingle", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMingle MinecraftBehaviorMingle { get; set; }

        /// <summary>
        /// Allows the mob to move around on its own while mounted seeking a target to attack.
        /// </summary>
        [JsonProperty("minecraft:behavior.mount_pathing", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMountPathing MinecraftBehaviorMountPathing { get; set; }

        /// <summary>
        /// Can only be used by Villagers. Allows them to seek shelter indoors.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_indoors", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveIndoors MinecraftBehaviorMoveIndoors { get; set; }

        /// <summary>
        /// Can only be used by Villagers. Allows the villagers to create paths around the village.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_through_village", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveThroughVillage MinecraftBehaviorMoveThroughVillage { get; set; }

        /// <summary>
        /// target_blocks usage
        /// </summary>
        [JsonProperty("minecraft:behavior.move_to_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveToBlock MinecraftBehaviorMoveToBlock { get; set; }

        /// <summary>
        /// Allows the mob to move back onto land when in water.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_to_land", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveToLand MinecraftBehaviorMoveToLand { get; set; }

        /// <summary>
        /// Allows the mob to move to a POI if able to
        /// </summary>
        [JsonProperty("minecraft:behavior.move_to_poi", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveToPoi MinecraftBehaviorMoveToPoi { get; set; }

        /// <summary>
        /// Allows mob to move towards a random block.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_to_random_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveToRandomBlock MinecraftBehaviorMoveToRandomBlock { get; set; }

        /// <summary>
        /// Allows the mob to move into a random location within a village.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_to_village", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveToVillage MinecraftBehaviorMoveToVillage { get; set; }

        /// <summary>
        /// Allows the mob to move back into water when on land.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_to_water", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveToWater MinecraftBehaviorMoveToWater { get; set; }

        /// <summary>
        /// Allows Guardians, Iron Golems and Villagers to move within their pre-defined area that
        /// the mob should be restricted to. Other mobs don't have a restriction defined.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_towards_restriction", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveTowardsRestriction MinecraftBehaviorMoveTowardsRestriction { get; set; }

        /// <summary>
        /// Allows mob to move towards its current target.
        /// </summary>
        [JsonProperty("minecraft:behavior.move_towards_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorMoveTowardsTarget MinecraftBehaviorMoveTowardsTarget { get; set; }

        /// <summary>
        /// Allows mobs to occassionally stop and take a nap under certain conditions.
        /// </summary>
        [JsonProperty("minecraft:behavior.nap", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorNap MinecraftBehaviorNap { get; set; }

        /// <summary>
        /// Allows the mob to check for and pursue the nearest valid target.
        /// </summary>
        [JsonProperty("minecraft:behavior.nearest_attackable_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorNearestAttackableTarget MinecraftBehaviorNearestAttackableTarget { get; set; }

        /// <summary>
        /// Allows the mob to check for and pursue the nearest valid target.
        /// </summary>
        [JsonProperty("minecraft:behavior.nearest_prioritized_attackable_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorNearestPrioritizedAttackableTarget MinecraftBehaviorNearestPrioritizedAttackableTarget { get; set; }

        /// <summary>
        /// Allows to mob to be able to sit in place like the ocelot.
        /// </summary>
        [JsonProperty("minecraft:behavior.ocelot_sit_on_block", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorOcelotSitOnBlock MinecraftBehaviorOcelotSitOnBlock { get; set; }

        /// <summary>
        /// Can only be used by the Ocelot. Allows it to perform the sneak and pounce attack.
        /// </summary>
        [JsonProperty("minecraft:behavior.ocelotattack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorOcelotattack MinecraftBehaviorOcelotattack { get; set; }

        /// <summary>
        /// Allows the mob to offer the player a flower like the Iron Golem does.
        /// </summary>
        [JsonProperty("minecraft:behavior.offer_flower", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorOfferFlower MinecraftBehaviorOfferFlower { get; set; }

        /// <summary>
        /// Allows the mob to open doors. Requires the mob to be able to path through doors,
        /// otherwise the mob won't even want to try opening them.
        /// </summary>
        [JsonProperty("minecraft:behavior.open_door", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorOpenDoor MinecraftBehaviorOpenDoor { get; set; }

        /// <summary>
        /// Allows the mob to target another mob that hurts their owner.
        /// </summary>
        [JsonProperty("minecraft:behavior.owner_hurt_by_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorOwnerHurtByTarget MinecraftBehaviorOwnerHurtByTarget { get; set; }

        /// <summary>
        /// Allows the mob to target a mob that is hurt by their owner.
        /// </summary>
        [JsonProperty("minecraft:behavior.owner_hurt_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorOwnerHurtTarget MinecraftBehaviorOwnerHurtTarget { get; set; }

        /// <summary>
        /// Allows the mob to enter the panic state, which makes it run around and away from the
        /// damage source that made it enter this state.
        /// </summary>
        [JsonProperty("minecraft:behavior.panic", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorPanic MinecraftBehaviorPanic { get; set; }

        /// <summary>
        /// Allows the mob to peek out. This is what the shulker uses to look out of its shell.
        /// </summary>
        [JsonProperty("minecraft:behavior.peek", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorPeek MinecraftBehaviorPeek { get; set; }

        /// <summary>
        /// Allows the pet mob to move onto a bed with it's owner while sleeping.
        /// </summary>
        [JsonProperty("minecraft:behavior.pet_sleep_with_owner", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorPetSleepWithOwner MinecraftBehaviorPetSleepWithOwner { get; set; }

        /// <summary>
        /// Allows the mob to pick up items on the ground.
        /// </summary>
        [JsonProperty("minecraft:behavior.pickup_items", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorPickupItems MinecraftBehaviorPickupItems { get; set; }

        /// <summary>
        /// Allows the mob to play with other baby villagers. This can only be used by Villagers.
        /// </summary>
        [JsonProperty("minecraft:behavior.play", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorPlay MinecraftBehaviorPlay { get; set; }

        /// <summary>
        /// Allows the mob to be ridden by the player after being tamed.
        /// </summary>
        [JsonProperty("minecraft:behavior.player_ride_tamed", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorPlayerRideTamed MinecraftBehaviorPlayerRideTamed { get; set; }

        /// <summary>
        /// Allows the mob to eat/raid crops out of farms until they are full.
        /// </summary>
        [JsonProperty("minecraft:behavior.raid_garden", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRaidGarden MinecraftBehaviorRaidGarden { get; set; }

        /// <summary>
        /// Allows the mob to randomly break surface of the water.
        /// </summary>
        [JsonProperty("minecraft:behavior.random_breach", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomBreach MinecraftBehaviorRandomBreach { get; set; }

        /// <summary>
        /// Allows a mob to randomly fly around.
        /// </summary>
        [JsonProperty("minecraft:behavior.random_fly", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomFly MinecraftBehaviorRandomFly { get; set; }

        /// <summary>
        /// Allows the mob to hover around randomly, close to the surface
        /// </summary>
        [JsonProperty("minecraft:behavior.random_hover", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomHover MinecraftBehaviorRandomHover { get; set; }

        /// <summary>
        /// Allows the mob to randomly look around.
        /// </summary>
        [JsonProperty("minecraft:behavior.random_look_around", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomLookAround MinecraftBehaviorRandomLookAround { get; set; }

        /// <summary>
        /// Allows the mob to randomly sit and look around for a duration. Note: Must have a sitting
        /// animation set up to use this.
        /// </summary>
        [JsonProperty("minecraft:behavior.random_look_around_and_sit", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomLookAroundAndSit MinecraftBehaviorRandomLookAroundAndSit { get; set; }

        /// <summary>
        /// Allows the mob to randomly sit for a duration.
        /// </summary>
        [JsonProperty("minecraft:behavior.random_sitting", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomSitting MinecraftBehaviorRandomSitting { get; set; }

        /// <summary>
        /// Allows a mob to randomly stroll around.
        /// </summary>
        [JsonProperty("minecraft:behavior.random_stroll", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomStroll MinecraftBehaviorRandomStroll { get; set; }

        /// <summary>
        /// Allows an entity to randomly move through water
        /// </summary>
        [JsonProperty("minecraft:behavior.random_swim", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRandomSwim MinecraftBehaviorRandomSwim { get; set; }

        /// <summary>
        /// Allows the mob to use ranged attacks like shooting arrows.
        /// </summary>
        [JsonProperty("minecraft:behavior.ranged_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRangedAttack MinecraftBehaviorRangedAttack { get; set; }

        /// <summary>
        /// Allows the villager to stop so another villager can breed with it. Can only be used by a
        /// Villager.
        /// </summary>
        [JsonProperty("minecraft:behavior.receive_love", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorReceiveLove MinecraftBehaviorReceiveLove { get; set; }

        /// <summary>
        /// Allows the mob to stay indoors during night time.
        /// </summary>
        [JsonProperty("minecraft:behavior.restrict_open_door", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRestrictOpenDoor MinecraftBehaviorRestrictOpenDoor { get; set; }

        /// <summary>
        /// Allows the mob to automatically start avoiding the sun when its a clear day out.
        /// </summary>
        [JsonProperty("minecraft:behavior.restrict_sun", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRestrictSun MinecraftBehaviorRestrictSun { get; set; }

        /// <summary>
        /// This allows the mob to roll forward.
        /// </summary>
        [JsonProperty("minecraft:behavior.roll", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRoll MinecraftBehaviorRoll { get; set; }

        /// <summary>
        /// Allows the mob to run around aimlessly.
        /// </summary>
        [JsonProperty("minecraft:behavior.run_around_like_crazy", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorRunAroundLikeCrazy MinecraftBehaviorRunAroundLikeCrazy { get; set; }

        /// <summary>
        /// Allows the a mob to become scared when the weather outside is thundering
        /// </summary>
        [JsonProperty("minecraft:behavior.scared", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorScared MinecraftBehaviorScared { get; set; }

        /// <summary>
        /// Allows the mob to send an event to another mob.
        /// </summary>
        [JsonProperty("minecraft:behavior.send_event", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSendEvent MinecraftBehaviorSendEvent { get; set; }

        /// <summary>
        /// Allows the mob to give items it has to others.
        /// </summary>
        [JsonProperty("minecraft:behavior.share_items", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorShareItems MinecraftBehaviorShareItems { get; set; }

        /// <summary>
        /// Allows the mob to go into stone blocks like Silverfish do. Currently it can only be used
        /// by Silverfish.
        /// </summary>
        [JsonProperty("minecraft:behavior.silverfish_merge_with_stone", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSilverfishMergeWithStone MinecraftBehaviorSilverfishMergeWithStone { get; set; }

        /// <summary>
        /// Allows the mob to alert mobs in nearby blocks to come out. Currently it can only be used
        /// by Silverfish.
        /// </summary>
        [JsonProperty("minecraft:behavior.silverfish_wake_up_friends", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSilverfishWakeUpFriends MinecraftBehaviorSilverfishWakeUpFriends { get; set; }

        /// <summary>
        /// Allows Equine mobs to be Horse Traps and be triggered like them, spawning a lightning
        /// bolt and a bunch of horses when a player is nearby. Can only be used by Horses, Mules,
        /// Donkeys and Skeleton Horses.
        /// </summary>
        [JsonProperty("minecraft:behavior.skeleton_horse_trap", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSkeletonHorseTrap MinecraftBehaviorSkeletonHorseTrap { get; set; }

        /// <summary>
        /// Allows mobs that own a bed to in a village to move to and sleep in it.
        /// </summary>
        [JsonProperty("minecraft:behavior.sleep", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSleep MinecraftBehaviorSleep { get; set; }

        /// <summary>
        /// Can only be used by Slimes and Magma Cubes. Allows the mob to use a melee attack like the
        /// slime's.
        /// </summary>
        [JsonProperty("minecraft:behavior.slime_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSlimeAttack MinecraftBehaviorSlimeAttack { get; set; }

        /// <summary>
        /// Can only be used by Slimes and Magma Cubes. Controls their ability to float in water /
        /// lava.
        /// </summary>
        [JsonProperty("minecraft:behavior.slime_float", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSlimeFloat MinecraftBehaviorSlimeFloat { get; set; }

        /// <summary>
        /// Can only be used by Slimes and Magma Cubes. Allows the mob to continuously jump around
        /// like a slime.
        /// </summary>
        [JsonProperty("minecraft:behavior.slime_keep_on_jumping", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSlimeKeepOnJumping MinecraftBehaviorSlimeKeepOnJumping { get; set; }

        /// <summary>
        /// Can only be used by Slimes and Magma Cubes. Allows the mob to move in random directions
        /// like a slime.
        /// </summary>
        [JsonProperty("minecraft:behavior.slime_random_direction", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSlimeRandomDirection MinecraftBehaviorSlimeRandomDirection { get; set; }

        /// <summary>
        /// Allows the mob to take a load off and snack on food that it found nearby.
        /// </summary>
        [JsonProperty("minecraft:behavior.snacking", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSnacking MinecraftBehaviorSnacking { get; set; }

        /// <summary>
        /// Allows the mob to stop and sneeze possibly startling nearby mobs and dropping an item.
        /// </summary>
        [JsonProperty("minecraft:behavior.sneeze", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSneeze MinecraftBehaviorSneeze { get; set; }

        /// <summary>
        /// Allows the squid to dive down in water. Can only be used by the Squid.
        /// </summary>
        [JsonProperty("minecraft:behavior.squid_dive", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSquidDive MinecraftBehaviorSquidDive { get; set; }

        /// <summary>
        /// Allows the squid to swim away. Can only be used by the Squid.
        /// </summary>
        [JsonProperty("minecraft:behavior.squid_flee", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSquidFlee MinecraftBehaviorSquidFlee { get; set; }

        /// <summary>
        /// Allows the squid to swim in place idly. Can only be used by the Squid.
        /// </summary>
        [JsonProperty("minecraft:behavior.squid_idle", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSquidIdle MinecraftBehaviorSquidIdle { get; set; }

        /// <summary>
        /// Allows the squid to move away from ground blocks and back to water. Can only be used by
        /// the Squid.
        /// </summary>
        [JsonProperty("minecraft:behavior.squid_move_away_from_ground", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSquidMoveAwayFromGround MinecraftBehaviorSquidMoveAwayFromGround { get; set; }

        /// <summary>
        /// Allows the squid to stick to the ground when outside water. Can only be used by the Squid.
        /// </summary>
        [JsonProperty("minecraft:behavior.squid_out_of_water", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSquidOutOfWater MinecraftBehaviorSquidOutOfWater { get; set; }

        /// <summary>
        /// Allows a mob to stalk a target, then once within range pounce onto a target, on success
        /// the target will be attacked dealing damage defined by the attack component. On failure,
        /// the mob will risk getting stuck
        /// </summary>
        [JsonProperty("minecraft:behavior.stalk_and_pounce_on_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorStalkAndPounceOnTarget MinecraftBehaviorStalkAndPounceOnTarget { get; set; }

        /// <summary>
        /// Allows the mob to stay put while it is in a sitting state instead of doing something else.
        /// </summary>
        [JsonProperty("minecraft:behavior.stay_while_sitting", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorStayWhileSitting MinecraftBehaviorStayWhileSitting { get; set; }

        /// <summary>
        /// Allows the mob to use the polar bear's melee attack.
        /// </summary>
        [JsonProperty("minecraft:behavior.stomp_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorStompAttack MinecraftBehaviorStompAttack { get; set; }

        /// <summary>
        /// Allows this mob to stomp turtle eggs
        /// </summary>
        [JsonProperty("minecraft:behavior.stomp_turtle_egg", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorStompTurtleEgg MinecraftBehaviorStompTurtleEgg { get; set; }

        /// <summary>
        /// Allows the mob to move into a random location within a village within the search range.
        /// </summary>
        [JsonProperty("minecraft:behavior.stroll_towards_village", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorStrollTowardsVillage MinecraftBehaviorStrollTowardsVillage { get; set; }

        /// <summary>
        /// Allows the mob to attack the player by summoning other entities.
        /// </summary>
        [JsonProperty("minecraft:behavior.summon_entity", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSummonEntity MinecraftBehaviorSummonEntity { get; set; }

        /// <summary>
        /// Allows the creeper to swell up when a player is nearby. It can only be used by Creepers.
        /// </summary>
        [JsonProperty("minecraft:behavior.swell", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSwell MinecraftBehaviorSwell { get; set; }

        /// <summary>
        /// Has the fish swim around when they can't pathfind
        /// </summary>
        [JsonProperty("minecraft:behavior.swim_wander", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSwimWander MinecraftBehaviorSwimWander { get; set; }

        /// <summary>
        /// Allows the mob to move to attack a target. The goal ends if it has a horizontal collision
        /// or gets hit. Built to be used with flying mobs.
        /// </summary>
        [JsonProperty("minecraft:behavior.swoop_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorSwoopAttack MinecraftBehaviorSwoopAttack { get; set; }

        /// <summary>
        /// Can only be used by Villagers. Allows the mob to accept flowers from Iron Golems.
        /// </summary>
        [JsonProperty("minecraft:behavior.take_flower", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorTakeFlower MinecraftBehaviorTakeFlower { get; set; }

        /// <summary>
        /// Allows the mob to be tempted by food they like.
        /// </summary>
        [JsonProperty("minecraft:behavior.tempt", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorTempt MinecraftBehaviorTempt { get; set; }

        /// <summary>
        /// Allows the mob to look at a player that is holding a tradable item.
        /// </summary>
        [JsonProperty("minecraft:behavior.trade_interest", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorTradeInterest MinecraftBehaviorTradeInterest { get; set; }

        /// <summary>
        /// Allows the player to trade with this mob.
        /// </summary>
        [JsonProperty("minecraft:behavior.trade_with_player", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorTradeWithPlayer MinecraftBehaviorTradeWithPlayer { get; set; }

        /// <summary>
        /// Allows the mob to target the same entity its owner is targeting.
        /// </summary>
        [JsonProperty("minecraft:behavior.vex_copy_owner_target", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorVexCopyOwnerTarget MinecraftBehaviorVexCopyOwnerTarget { get; set; }

        /// <summary>
        /// Allows the mob to move around randomly like the Vex.
        /// </summary>
        [JsonProperty("minecraft:behavior.vex_random_move", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorVexRandomMove MinecraftBehaviorVexRandomMove { get; set; }

        /// <summary>
        /// Allows the wither to launch random attacks. Can only be used by the Wither Boss.
        /// </summary>
        [JsonProperty("minecraft:behavior.wither_random_attack_pos_goal", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorWitherRandomAttackPosGoal MinecraftBehaviorWitherRandomAttackPosGoal { get; set; }

        /// <summary>
        /// Allows the wither to focus its attacks on whichever mob has dealt the most damage to it.
        /// </summary>
        [JsonProperty("minecraft:behavior.wither_target_highest_damage", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorWitherTargetHighestDamage MinecraftBehaviorWitherTargetHighestDamage { get; set; }

        /// <summary>
        /// allows the NPC to use their jobsite POI
        /// </summary>
        [JsonProperty("minecraft:behavior.work", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBehaviorWork MinecraftBehaviorWork { get; set; }

        /// <summary>
        /// Defines an entity's melee attack and any additional effects on it.
        /// </summary>
        [JsonProperty("minecraft:attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAttack MinecraftAttack { get; set; }

        /// <summary>
        /// Defines what mob effects to add and remove to the entity when adding this component.
        /// </summary>
        [JsonProperty("minecraft:spell_effects", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftSpellEffects MinecraftSpellEffects { get; set; }

        /// <summary>
        /// Defines the entity's strength to carry items.
        /// </summary>
        [JsonProperty("minecraft:strength", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftStrength MinecraftStrength { get; set; }

        /// <summary>
        /// Adds a rider to the entity. Requires minecraft:rideable.
        /// </summary>
        [JsonProperty("minecraft:addrider", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAddrider MinecraftAddrider { get; set; }

        /// <summary>
        /// Adds a timer for the entity to grow up. It can be accelerated by giving the entity the
        /// items it likes as defined by feedItems.
        /// </summary>
        [JsonProperty("minecraft:ageable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAgeable MinecraftAgeable { get; set; }

        /// <summary>
        /// Defines the entity's 'angry' state using a timer.
        /// </summary>
        [JsonProperty("minecraft:angry", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAngry MinecraftAngry { get; set; }

        /// <summary>
        /// Allows the actor to break doors assuming that that flags set up for the component to use
        /// in navigation
        /// </summary>
        [JsonProperty("minecraft:annotation.break_door", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAnnotationBreakDoor MinecraftAnnotationBreakDoor { get; set; }

        /// <summary>
        /// Allows the actor to open doors assuming that that flags set up for the component to use
        /// in navigation.
        /// </summary>
        [JsonProperty("minecraft:annotation.open_door", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftAnnotationOpenDoor { get; set; }

        /// <summary>
        /// A component that does damage to entities that get within range.
        /// </summary>
        [JsonProperty("minecraft:area_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAreaAttack MinecraftAreaAttack { get; set; }

        /// <summary>
        /// Fires off a specified event when a block in the block list is broken within the sensor
        /// range.
        /// </summary>
        [JsonProperty("minecraft:block_sensor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBlockSensor MinecraftBlockSensor { get; set; }

        /// <summary>
        /// Defines the conditions and behavior of a rideable entity's boost.
        /// </summary>
        [JsonProperty("minecraft:boostable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBoostable MinecraftBoostable { get; set; }

        /// <summary>
        /// The current state of the boss for updating the boss HUD.
        /// </summary>
        [JsonProperty("minecraft:boss", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBoss MinecraftBoss { get; set; }

        /// <summary>
        /// Specifies the blocks that this entity can break as it moves around.
        /// </summary>
        [JsonProperty("minecraft:break_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBreakBlocks MinecraftBreakBlocks { get; set; }

        /// <summary>
        /// Defines what blocks this entity can breathe in and gives them the ability to suffocate.
        /// </summary>
        [JsonProperty("minecraft:breathable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBreathable MinecraftBreathable { get; set; }

        /// <summary>
        /// Defines the way an entity can get into the 'love' state.
        /// </summary>
        [JsonProperty("minecraft:breedable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBreedable MinecraftBreedable { get; set; }

        /// <summary>
        /// Defines the way an entity can get into the 'bribed' state.
        /// </summary>
        [JsonProperty("minecraft:bribeable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBribeable MinecraftBribeable { get; set; }

        /// <summary>
        /// Specifies if/how a mob burns in daylight.
        /// </summary>
        [JsonProperty("minecraft:burns_in_daylight", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftBurnsInDaylight? MinecraftBurnsInDaylight { get; set; }

        /// <summary>
        /// Applies defined amount of damage to the entity at specified intervals.
        /// </summary>
        [JsonProperty("minecraft:damage_over_time", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftDamageOverTime MinecraftDamageOverTime { get; set; }

        /// <summary>
        /// Defines what events to call when this entity is damaged by specific entities or items.
        /// </summary>
        [JsonProperty("minecraft:damage_sensor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftDamageSensor MinecraftDamageSensor { get; set; }

        /// <summary>
        /// Despawns the associated Actor immediately or when the optional filter evaluates to true.
        /// </summary>
        [JsonProperty("minecraft:despawn", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftDespawn MinecraftDespawn { get; set; }

        /// <summary>
        /// Defines this entity's ability to trade with players.
        /// </summary>
        [JsonProperty("minecraft:economy_trade_table", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftEconomyTradeTable MinecraftEconomyTradeTable { get; set; }

        /// <summary>
        /// A component that fires an event when a set of conditions are met by other entities within
        /// the defined range.
        /// </summary>
        [JsonProperty("minecraft:entity_sensor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftEntitySensor MinecraftEntitySensor { get; set; }

        /// <summary>
        /// Creates a trigger based on environment conditions.
        /// </summary>
        [JsonProperty("minecraft:environment_sensor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftEnvironmentSensor MinecraftEnvironmentSensor { get; set; }

        /// <summary>
        /// Defines an entity's behavior for having items equipped to it.
        /// </summary>
        [JsonProperty("minecraft:equippable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftEquippable MinecraftEquippable { get; set; }

        /// <summary>
        /// .
        /// </summary>
        [JsonProperty("minecraft:experience_reward", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftExperienceReward MinecraftExperienceReward { get; set; }

        /// <summary>
        /// Defines how the entity explodes.
        /// </summary>
        [JsonProperty("minecraft:explode", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftExplode MinecraftExplode { get; set; }

        /// <summary>
        /// Allows entities to flock in groups in water or not.
        /// </summary>
        [JsonProperty("minecraft:flocking", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftFlocking MinecraftFlocking { get; set; }

        /// <summary>
        /// Sets follow range
        /// </summary>
        [JsonProperty("minecraft:follow_range", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftFollowRange MinecraftFollowRange { get; set; }

        /// <summary>
        /// Defines the way a mob's genes and alleles are passed on to it's offspring, and how those
        /// traits manifest in the child. Compatible parent genes are crossed together, the alleles
        /// are handed down from the parents to the child, and any matching genetic variants fire off
        /// JSON events to modify the child and express the traits.
        /// </summary>
        [JsonProperty("minecraft:genetics", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftGenetics MinecraftGenetics { get; set; }

        /// <summary>
        /// Defines sets of items that can be used to trigger events when used on this entity. The
        /// item will also be taken and placed in the entity's inventory.
        /// </summary>
        [JsonProperty("minecraft:giveable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftGiveable MinecraftGiveable { get; set; }

        /// <summary>
        /// Could increase crop growth when entity walks over crop
        /// </summary>
        [JsonProperty("minecraft:grows_crop", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftGrowsCrop MinecraftGrowsCrop { get; set; }

        /// <summary>
        /// Defines the interactions with this entity for healing it.
        /// </summary>
        [JsonProperty("minecraft:healable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftHealable MinecraftHealable { get; set; }

        /// <summary>
        /// Sets health value/range
        /// </summary>
        [JsonProperty("minecraft:health", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftHealth MinecraftHealth { get; set; }

        /// <summary>
        /// Saves a home pos for when the the entity is spawned.
        /// </summary>
        [JsonProperty("minecraft:home", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftHome { get; set; }

        [JsonProperty("minecraft:hurt_on_condition", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftHurtOnCondition MinecraftHurtOnCondition { get; set; }

        /// <summary>
        /// Adds a timer since last rested to see if phantoms should spawn.
        /// </summary>
        [JsonProperty("minecraft:insomnia", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftInsomnia MinecraftInsomnia { get; set; }

        /// <summary>
        /// Defines interactions with this entity.
        /// </summary>
        [JsonProperty("minecraft:interact", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftInteract MinecraftInteract { get; set; }

        /// <summary>
        /// Defines this entity's inventory properties.
        /// </summary>
        [JsonProperty("minecraft:inventory", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftInventory MinecraftInventory { get; set; }

        /// <summary>
        /// Sets that this entity is an illager captain.
        /// </summary>
        [JsonProperty("minecraft:is_illager_captain", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsIllagerCaptain { get; set; }

        /// <summary>
        /// Determines that this entity is an item hopper.
        /// </summary>
        [JsonProperty("minecraft:item_hopper", NullValueHandling = NullValueHandling.Ignore)]
        public object MinecraftItemHopper { get; set; }

        /// <summary>
        /// Defines a dynamic type jump control that will change jump properties based on the speed
        /// modifier of the mob.
        /// </summary>
        [JsonProperty("minecraft:jump.dynamic", NullValueHandling = NullValueHandling.Ignore)]
        public object MinecraftJumpDynamic { get; set; }

        /// <summary>
        /// Gives the entity the ability to jump.
        /// </summary>
        [JsonProperty("minecraft:jump.static", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftJumpStatic MinecraftJumpStatic { get; set; }

        /// <summary>
        /// Sets resistance for knockback (100 for no knockback)
        /// </summary>
        [JsonProperty("minecraft:knockback_resistance", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftKnockbackResistance MinecraftKnockbackResistance { get; set; }

        /// <summary>
        /// Allows this entity to be leashed and defines the conditions and events for this entity
        /// when is leashed.
        /// </summary>
        [JsonProperty("minecraft:leashable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftLeashable MinecraftLeashable { get; set; }

        /// <summary>
        /// Defines the behavior when another entity looks at this entity.
        /// </summary>
        [JsonProperty("minecraft:lookat", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftLookat MinecraftLookat { get; set; }

        /// <summary>
        /// This component is used to implement part of the Wandering Trader behavior
        /// </summary>
        [JsonProperty("minecraft:managed_wandering_trader", NullValueHandling = NullValueHandling.Ignore)]
        public object MinecraftManagedWanderingTrader { get; set; }

        /// <summary>
        /// A component that applies a mob effect to entities that get within range.
        /// </summary>
        [JsonProperty("minecraft:mob_effect", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMobEffect MinecraftMobEffect { get; set; }

        /// <summary>
        /// This move control allows the mob to swim in water and walk on land.
        /// </summary>
        [JsonProperty("minecraft:movement.amphibious", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementAmphibious MinecraftMovementAmphibious { get; set; }

        /// <summary>
        /// This component accents the movement of an entity.
        /// </summary>
        [JsonProperty("minecraft:movement.basic", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementBasic MinecraftMovementBasic { get; set; }

        /// <summary>
        /// This move control causes the mob to fly.
        /// </summary>
        [JsonProperty("minecraft:movement.fly", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementFly MinecraftMovementFly { get; set; }

        /// <summary>
        /// This move control allows a mob to fly, swim, climb, etc.
        /// </summary>
        [JsonProperty("minecraft:movement.generic", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementGeneric MinecraftMovementGeneric { get; set; }

        /// <summary>
        /// This move control causes the mob to hover.
        /// </summary>
        [JsonProperty("minecraft:movement.hover", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementHover MinecraftMovementHover { get; set; }

        /// <summary>
        /// Move control that causes the mob to jump as it moves with a specified delay between jumps.
        /// </summary>
        [JsonProperty("minecraft:movement.jump", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementJump MinecraftMovementJump { get; set; }

        /// <summary>
        /// This move control causes the mob to hop as it moves.
        /// </summary>
        [JsonProperty("minecraft:movement.skip", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementSkip MinecraftMovementSkip { get; set; }

        /// <summary>
        /// This move control causes the mob to sway side to side giving the impression it is
        /// swimming.
        /// </summary>
        [JsonProperty("minecraft:movement.sway", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMovementSway MinecraftMovementSway { get; set; }

        /// <summary>
        /// Allows this entity to be named (e.g. using a name tag)
        /// </summary>
        [JsonProperty("minecraft:nameable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNameable MinecraftNameable { get; set; }

        /// <summary>
        /// Allows this entity to generate paths that include vertical walls like the vanilla Spiders
        /// do.
        /// </summary>
        [JsonProperty("minecraft:navigation.climb", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationClimb MinecraftNavigationClimb { get; set; }

        /// <summary>
        /// Allows this entity to generate paths by flying around the air like the regular Ghast.
        /// </summary>
        [JsonProperty("minecraft:navigation.float", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationFloat MinecraftNavigationFloat { get; set; }

        /// <summary>
        /// Allows this entity to generate paths in the air like the vanilla Parrots do.
        /// </summary>
        [JsonProperty("minecraft:navigation.fly", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationFly MinecraftNavigationFly { get; set; }

        /// <summary>
        /// Allows this entity to generate paths by walking, swimming, flying and/or climbing around
        /// and jumping up and down a block.
        /// </summary>
        [JsonProperty("minecraft:navigation.generic", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationGeneric MinecraftNavigationGeneric { get; set; }

        /// <summary>
        /// Allows this entity to generate paths in the air like the vanilla Bees do. Keeps them from
        /// falling out of the skies and doing predictive movement.
        /// </summary>
        [JsonProperty("minecraft:navigation.hover", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationHover MinecraftNavigationHover { get; set; }

        /// <summary>
        /// Allows this entity to generate paths that include water.
        /// </summary>
        [JsonProperty("minecraft:navigation.swim", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationSwim MinecraftNavigationSwim { get; set; }

        /// <summary>
        /// Allows this entity to generate paths by walking around and jumping up and down a block
        /// like regular mobs.
        /// </summary>
        [JsonProperty("minecraft:navigation.walk", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftNavigationWalk MinecraftNavigationWalk { get; set; }

        /// <summary>
        /// On death event
        /// </summary>
        [JsonProperty("minecraft:on_death", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnDeath { get; set; }

        /// <summary>
        /// On anger event
        /// </summary>
        [JsonProperty("minecraft:on_friendly_anger", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnFriendlyAnger { get; set; }

        /// <summary>
        /// On hurt event
        /// </summary>
        [JsonProperty("minecraft:on_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnHurt { get; set; }

        /// <summary>
        /// On hurt by player event
        /// </summary>
        [JsonProperty("minecraft:on_hurt_by_player", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnHurtByPlayer { get; set; }

        /// <summary>
        /// On ignite event
        /// </summary>
        [JsonProperty("minecraft:on_ignite", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnIgnite { get; set; }

        /// <summary>
        /// On landing event
        /// </summary>
        [JsonProperty("minecraft:on_start_landing", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnStartLanding { get; set; }

        /// <summary>
        /// On takeoff event
        /// </summary>
        [JsonProperty("minecraft:on_start_takeoff", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnStartTakeoff { get; set; }

        /// <summary>
        /// On target acquired event
        /// </summary>
        [JsonProperty("minecraft:on_target_acquired", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnTargetAcquired { get; set; }

        /// <summary>
        /// On target escape event
        /// </summary>
        [JsonProperty("minecraft:on_target_escape", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnTargetEscape { get; set; }

        /// <summary>
        /// On wake event
        /// </summary>
        [JsonProperty("minecraft:on_wake_with_owner", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent MinecraftOnWakeWithOwner { get; set; }

        /// <summary>
        /// Defines the entity's 'peek' behavior, defining the events that should be called during it.
        /// </summary>
        [JsonProperty("minecraft:peek", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftPeek MinecraftPeek { get; set; }

        /// <summary>
        /// Defines whether an entity should be persistent in the game world.
        /// </summary>
        [JsonProperty("minecraft:persistent", NullValueHandling = NullValueHandling.Ignore)]
        public object MinecraftPersistent { get; set; }

        /// <summary>
        /// Defines a dynamic type jump control that will change jump properties based on the speed
        /// modifier of the mob.
        /// </summary>
        [JsonProperty("minecraft:physics", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftPhysics MinecraftPhysics { get; set; }

        /// <summary>
        /// Specifies costing information for mobs that prefer to walk on preferred paths.
        /// </summary>
        [JsonProperty("minecraft:preferred_path", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftPreferredPath MinecraftPreferredPath { get; set; }

        /// <summary>
        /// Allows the entity to be a thrown entity.
        /// </summary>
        [JsonProperty("minecraft:projectile", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftProjectile MinecraftProjectile { get; set; }

        /// <summary>
        /// Defines what can push an entity between other entities and pistons.
        /// </summary>
        [JsonProperty("minecraft:pushable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftPushable MinecraftPushable { get; set; }

        /// <summary>
        /// Attempts to trigger a raid at the entity's location.
        /// </summary>
        [JsonProperty("minecraft:raid_trigger", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftRaidTrigger MinecraftRaidTrigger { get; set; }

        /// <summary>
        /// Defines the entity's movement on the rails. An entity with this component is only allowed
        /// to move on the rail.
        /// </summary>
        [JsonProperty("minecraft:rail_movement", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftRailMovement MinecraftRailMovement { get; set; }

        /// <summary>
        /// Defines the behavior of the entity when the rail gets activated or deactivated.
        /// </summary>
        [JsonProperty("minecraft:rail_sensor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftRailSensor MinecraftRailSensor { get; set; }

        /// <summary>
        /// Defines the ravager's response to their melee attack being blocked.
        /// </summary>
        [JsonProperty("minecraft:ravager_blocked", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftRavagerBlocked MinecraftRavagerBlocked { get; set; }

        /// <summary>
        /// Determines whether this entity can be ridden. Allows specifying the different seat
        /// positions and quantity.
        /// </summary>
        [JsonProperty("minecraft:rideable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftRideable MinecraftRideable { get; set; }

        /// <summary>
        /// Allows the player to detect and manuever on the scaffolding block.
        /// </summary>
        [JsonProperty("minecraft:scaffolding_climber", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftScaffoldingClimber { get; set; }

        /// <summary>
        /// Defines the entity's size interpolation based on the entity's age.
        /// </summary>
        [JsonProperty("minecraft:scale_by_age", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftScaleByAge MinecraftScaleByAge { get; set; }

        /// <summary>
        /// Fires off scheduled mob events at time of day events.
        /// </summary>
        [JsonProperty("minecraft:scheduler", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftScheduler MinecraftScheduler { get; set; }

        /// <summary>
        /// Defines a list of items the mob wants to share or pick up. Each item must have the
        /// following parameters:
        /// </summary>
        [JsonProperty("minecraft:shareables", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftShareables MinecraftShareables { get; set; }

        /// <summary>
        /// Defines the entity's ranged attack behavior.
        /// </summary>
        [JsonProperty("minecraft:shooter", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftShooter MinecraftShooter { get; set; }

        /// <summary>
        /// Defines the entity's 'sit' state.
        /// </summary>
        [JsonProperty("minecraft:sittable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftSittable MinecraftSittable { get; set; }

        /// <summary>
        /// Adds a timer after which this entity will spawn another entity or item (similar to
        /// vanilla's chicken's egg-laying behavior).
        /// </summary>
        [JsonProperty("minecraft:spawn_entity", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftSpawnEntity? MinecraftSpawnEntity { get; set; }

        /// <summary>
        /// Defines the rules for a mob to be tamed by the player.
        /// </summary>
        [JsonProperty("minecraft:tameable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTameable MinecraftTameable { get; set; }

        /// <summary>
        /// Allows the Entity to be tamed by mounting it.
        /// </summary>
        [JsonProperty("minecraft:tamemount", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTamemount MinecraftTamemount { get; set; }

        /// <summary>
        /// Defines the entity's range within which it can see or sense other entities to target them.
        /// </summary>
        [JsonProperty("minecraft:target_nearby_sensor", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTargetNearbySensor MinecraftTargetNearbySensor { get; set; }

        /// <summary>
        /// Defines an entity's teleporting behavior.
        /// </summary>
        [JsonProperty("minecraft:teleport", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTeleport MinecraftTeleport { get; set; }

        /// <summary>
        /// Defines if the entity ticks the world and the radius around it to tick.
        /// </summary>
        [JsonProperty("minecraft:tick_world", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTickWorld MinecraftTickWorld { get; set; }

        /// <summary>
        /// Adds a timer after which an event will fire.
        /// </summary>
        [JsonProperty("minecraft:timer", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTimer MinecraftTimer { get; set; }

        /// <summary>
        /// Defines this entity's ability to trade with players.
        /// </summary>
        [JsonProperty("minecraft:trade_table", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTradeTable MinecraftTradeTable { get; set; }

        /// <summary>
        /// Causes an entity to leave a trail of blocks as it moves about the world.
        /// </summary>
        [JsonProperty("minecraft:trail", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTrail MinecraftTrail { get; set; }

        /// <summary>
        /// Defines an entity's transformation from the current definition into another
        /// </summary>
        [JsonProperty("minecraft:transformation", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTransformation MinecraftTransformation { get; set; }

        /// <summary>
        /// Defines the rules for a mob to trust players.
        /// </summary>
        [JsonProperty("minecraft:trusting", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTrusting MinecraftTrusting { get; set; }

        /// <summary>
        /// Defines the rules for a mob to trust players.
        /// </summary>
        [JsonProperty("minecraft:water_movement", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftWaterMovement MinecraftWaterMovement { get; set; }

        /// <summary>
        /// Sets the entity's delay between playing its ambient sound.
        /// </summary>
        [JsonProperty("minecraft:ambient_sound_interval", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftAmbientSoundInterval MinecraftAmbientSoundInterval { get; set; }

        /// <summary>
        /// Allows this entity to climb up ladders.
        /// </summary>
        [JsonProperty("minecraft:can_climb", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftCanClimb { get; set; }

        /// <summary>
        /// Marks the entity as being able to fly, the pathfinder won't be restricted to paths where
        /// a solid block is required underneath it.
        /// </summary>
        [JsonProperty("minecraft:can_fly", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftCanFly { get; set; }

        /// <summary>
        /// Allows the entity to power jump like the horse does in vanilla.
        /// </summary>
        [JsonProperty("minecraft:can_power_jump", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftCanPowerJump { get; set; }

        /// <summary>
        /// Sets the width and height of the Entity's collision box.
        /// </summary>
        [JsonProperty("minecraft:collision_box", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftCollisionBox MinecraftCollisionBox { get; set; }

        /// <summary>
        /// Defines the entity's color. Only works on vanilla entities that have predefined color
        /// values (sheep, llama, shulker).
        /// </summary>
        [JsonProperty("minecraft:color", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftColor MinecraftColor { get; set; }

        /// <summary>
        /// Defines the entity's second texture color. Only works on vanilla entities that have a
        /// second predefined color values (tropical fish).
        /// </summary>
        [JsonProperty("minecraft:color2", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftColor2 MinecraftColor2 { get; set; }

        /// <summary>
        /// Sets this entity's default head rotation angle.
        /// </summary>
        [JsonProperty("minecraft:default_look_angle", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftDefaultLookAngle MinecraftDefaultLookAngle { get; set; }

        /// <summary>
        /// Sets the Equipment table to use for this Entity.
        /// </summary>
        [JsonProperty("minecraft:equipment", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftEquipment MinecraftEquipment { get; set; }

        /// <summary>
        /// Sets that this entity doesn't take damage from fire.
        /// </summary>
        [JsonProperty("minecraft:fire_immune", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftFireImmuneUnion? MinecraftFireImmune { get; set; }

        /// <summary>
        /// Sets that this entity can float in liquid blocks.
        /// </summary>
        [JsonProperty("minecraft:floats_in_liquid", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MinecraftFloatsInLiquid { get; set; }

        /// <summary>
        /// Speed in Blocks that this entity flies at.
        /// </summary>
        [JsonProperty("minecraft:flying_speed", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftFlyingSpeed MinecraftFlyingSpeed { get; set; }

        /// <summary>
        /// Sets the number of blocks the entity can step without jumping.
        /// </summary>
        [JsonProperty("minecraft:foot_size", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftFootSize MinecraftFootSize { get; set; }

        /// <summary>
        /// Defines how much does friction affect this entity.
        /// </summary>
        [JsonProperty("minecraft:friction_modifier", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftFrictionModifier MinecraftFrictionModifier { get; set; }

        /// <summary>
        /// Sets the offset from the ground that the entity is actually at.
        /// </summary>
        [JsonProperty("minecraft:ground_offset", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftGroundOffset MinecraftGroundOffset { get; set; }

        /// <summary>
        /// When configured as a rideable entity, the entity will be controlled using WASD controls.
        /// </summary>
        [JsonProperty("minecraft:input_ground_controlled", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftInputGroundControlled { get; set; }

        /// <summary>
        /// Sets that this entity is a baby.
        /// </summary>
        [JsonProperty("minecraft:is_baby", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsBaby { get; set; }

        /// <summary>
        /// Sets that this entity is charged.
        /// </summary>
        [JsonProperty("minecraft:is_charged", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsCharged { get; set; }

        /// <summary>
        /// Sets that this entity is currently carrying a chest.
        /// </summary>
        [JsonProperty("minecraft:is_chested", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsChested { get; set; }

        /// <summary>
        /// Allows dyes to be used on this entity to change its color.
        /// </summary>
        [JsonProperty("minecraft:is_dyeable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftIsDyeable MinecraftIsDyeable { get; set; }

        /// <summary>
        /// Sets that this entity can hide from hostile mobs while invisible.
        /// </summary>
        [JsonProperty("minecraft:is_hidden_when_invisible", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsHiddenWhenInvisible { get; set; }

        /// <summary>
        /// Sets that this entity is currently on fire.
        /// </summary>
        [JsonProperty("minecraft:is_ignited", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsIgnited { get; set; }

        /// <summary>
        /// Sets that this entity is currently saddled.
        /// </summary>
        [JsonProperty("minecraft:is_saddled", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsSaddled { get; set; }

        /// <summary>
        /// Sets that this entity is currently shaking.
        /// </summary>
        [JsonProperty("minecraft:is_shaking", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsShaking { get; set; }

        /// <summary>
        /// Sets that this entity is currently sheared.
        /// </summary>
        [JsonProperty("minecraft:is_sheared", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsSheared { get; set; }

        /// <summary>
        /// Sets that this entity can be stacked.
        /// </summary>
        [JsonProperty("minecraft:is_stackable", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsStackable { get; set; }

        /// <summary>
        /// Sets that this entity is currently stunned.
        /// </summary>
        [JsonProperty("minecraft:is_stunned", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsStunned { get; set; }

        /// <summary>
        /// Sets that this entity is currently tamed.
        /// </summary>
        [JsonProperty("minecraft:is_tamed", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftIsTamed { get; set; }

        /// <summary>
        /// Defines what items can be used to control this entity while ridden
        /// </summary>
        [JsonProperty("minecraft:item_controllable", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftItemControllable MinecraftItemControllable { get; set; }

        /// <summary>
        /// Sets the loot table for what items this entity drops upon death.
        /// </summary>
        [JsonProperty("minecraft:loot", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftLoot MinecraftLoot { get; set; }

        /// <summary>
        /// Additional variant value. Can be used to further differentiate variants.
        /// </summary>
        [JsonProperty("minecraft:mark_variant", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftMarkVariant MinecraftMarkVariant { get; set; }

        /// <summary>
        /// Sets the distance through which the entity can push through.
        /// </summary>
        [JsonProperty("minecraft:push_through", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftPushThrough MinecraftPushThrough { get; set; }

        /// <summary>
        /// Sets the entity's visual size.
        /// </summary>
        [JsonProperty("minecraft:scale", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftScale MinecraftScale { get; set; }

        /// <summary>
        /// Skin ID value. Can be used to differentiate skins, such as base skins for villagers.
        /// </summary>
        [JsonProperty("minecraft:skin_id", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftSkinId MinecraftSkinId { get; set; }

        /// <summary>
        /// Sets the entity's base volume for sound effects.
        /// </summary>
        [JsonProperty("minecraft:sound_volume", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftSoundVolume MinecraftSoundVolume { get; set; }

        /// <summary>
        /// Defines the families this entity belongs to.
        /// </summary>
        [JsonProperty("minecraft:type_family", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTypeFamily MinecraftTypeFamily { get; set; }

        /// <summary>
        /// Used to differentiate the component group of a variant of an entity from others (e.g.
        /// ocelot, villager)
        /// </summary>
        [JsonProperty("minecraft:variant", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftVariant MinecraftVariant { get; set; }

        /// <summary>
        /// Sets the speed multiplier for this entity's walk animation speed.
        /// </summary>
        [JsonProperty("minecraft:walk_animation_speed", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftWalkAnimationSpeed MinecraftWalkAnimationSpeed { get; set; }

        /// <summary>
        /// Sets that this entity wants to become a jockey.
        /// </summary>
        [JsonProperty("minecraft:wants_jockey", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> MinecraftWantsJockey { get; set; }
    }

    /// <summary>
    /// Adds a rider to the entity. Requires minecraft:rideable.
    /// </summary>
    public partial class MinecraftAddrider
    {
        /// <summary>
        /// The entity type that will be riding this entity.
        /// </summary>
        [JsonProperty("entity_type", NullValueHandling = NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The spawn event that will be used when the riding entity is created.
        /// </summary>
        [JsonProperty("spawn_event", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnEvent { get; set; }
    }

    /// <summary>
    /// Adds a timer for the entity to grow up. It can be accelerated by giving the entity the
    /// items it likes as defined by feedItems.
    /// </summary>
    public partial class MinecraftAgeable
    {
        /// <summary>
        /// List of items that the entity drops when it grows up.
        /// </summary>
        [JsonProperty("drop_items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] DropItems { get; set; }

        /// <summary>
        /// Amount of time before the entity grows up, -1 for always a baby.
        /// Default: 1200.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// List of items that can be fed to the entity. Includes 'item' for the item name and
        /// 'growth' to define how much time it grows up by
        /// </summary>
        [JsonProperty("feed_items", NullValueHandling = NullValueHandling.Ignore)]
        public FeedItems? FeedItems { get; set; }

        /// <summary>
        /// Event to run when this entity grows up.
        /// </summary>
        [JsonProperty("grow_up", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent GrowUp { get; set; }
    }

    public partial class FeedItemFeedItem
    {
        [JsonProperty("growth", NullValueHandling = NullValueHandling.Ignore)]
        public double? Growth { get; set; }

        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }
    }

    /// <summary>
    /// The event to trigger when the goal's duration expires.
    ///
    /// Event to run when this mob attempts to drop an item.
    ///
    /// Trigger to fire when the mob eats a block of grass
    ///
    /// Event to run when the mob is unable to get home due to the home position being too far
    /// away or if the mob is in a different dimension.
    ///
    /// Event to run when target hurts the mob. This event is broadcasted if broadcast is true.
    ///
    /// Event to run when target is within the radius. This event is broadcasted if broadcast is
    /// true.
    ///
    /// Event to run when this mob lays the egg.
    ///
    /// Event to run when the mob reaches their jobsite and finishes working.
    ///
    /// Event to run when this entity grows up.
    ///
    /// Event to run after the number of seconds specified in duration expires (when the entity
    /// stops being 'angry')
    ///
    /// Event to run when this entity breeds.
    ///
    /// Event to trigger when this entity is equipped with this item.
    ///
    /// Event to trigger when this item is removed from this entity.
    ///
    /// Event to run when this mob is created and matches the above allele conditions.
    ///
    /// Event to call when this entity is leashed.
    ///
    /// Event to call when this entity is unleashed.
    ///
    /// Trigger to run when the entity gets named
    ///
    /// Event to be called when this entity acquires the name specified in 'name_filter'
    ///
    /// On death event
    ///
    /// On anger event
    ///
    /// On hurt event
    ///
    /// On hurt by player event
    ///
    /// On ignite event
    ///
    /// On landing event
    ///
    /// On takeoff event
    ///
    /// On target acquired event
    ///
    /// On target escape event
    ///
    /// On wake event
    ///
    /// Event to run we attempt to trigger a raid on the village.
    ///
    /// Event to call when the rail is activated
    ///
    /// Event to call when the rail is deactivated
    ///
    /// Event to run when this entity becomes tamed
    ///
    /// Event that triggers when the entity becomes tamed.
    ///
    /// Event to call when an entity gets in the inside range. Can specify 'event' for the name
    /// of the event and 'target' for the target of the event
    ///
    /// Event to call when an entity gets in the outside range. Can specify 'event' for the name
    /// of the event and 'target' for the target of the event
    ///
    /// Event to call when an entity exits visual range. Can specify 'event' for the name of the
    /// event and 'target' for the target of the event
    ///
    /// Event to fire when the time on the timer runs out
    ///
    /// Event to run when this entity becomes trusting
    /// </summary>
    public partial class OnCelebrationEndEvent
    {
        /// <summary>
        /// The event to run when the conditions for this trigger are met
        /// </summary>
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        /// <summary>
        /// The list of conditions for this trigger
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// The target of the event
        /// </summary>
        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public Target? Target { get; set; }
    }

    public partial class BroadcastFilterElement
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public Test? Test { get; set; }
    }

    public partial class Filter
    {
    }

    /// <summary>
    /// Sets the entity's delay between playing its ambient sound.
    /// </summary>
    public partial class MinecraftAmbientSoundInterval
    {
        /// <summary>
        /// Level sound event to be played as the ambient sound.
        /// Default: ambient
        /// </summary>
        [JsonProperty("event_name", NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        /// <summary>
        /// Maximum time in seconds to randomly add to the ambient sound delay time.
        /// Default: 16.000000
        /// </summary>
        [JsonProperty("range", NullValueHandling = NullValueHandling.Ignore)]
        public double? Range { get; set; }

        /// <summary>
        /// Minimum time in seconds before the entity plays its ambient sound again
        /// Default: 8.000000
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines the entity's 'angry' state using a timer.
    /// </summary>
    public partial class MinecraftAngry
    {
        /// <summary>
        /// If true, other entities of the same entity definition within the broadcastRange will also
        /// become angry
        /// Default: false
        /// </summary>
        [JsonProperty("broadcast_anger", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BroadcastAnger { get; set; }

        /// <summary>
        /// Conditions that make this entry in the list valid
        /// </summary>
        [JsonProperty("broadcast_filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? BroadcastFilters { get; set; }

        /// <summary>
        /// Distance in blocks within which other entities of the same entity definition will become
        /// angry
        /// Default: 20
        /// </summary>
        [JsonProperty("broadcast_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? BroadcastRange { get; set; }

        /// <summary>
        /// A list of entity families to broadcast anger to
        /// </summary>
        [JsonProperty("broadcast_targets", NullValueHandling = NullValueHandling.Ignore)]
        public object[] BroadcastTargets { get; set; }

        /// <summary>
        /// Event to run after the number of seconds specified in duration expires (when the entity
        /// stops being 'angry')
        /// </summary>
        [JsonProperty("calm_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent CalmEvent { get; set; }

        /// <summary>
        /// The amount of time in seconds that the entity will be angry
        /// Default: 25
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? Duration { get; set; }

        /// <summary>
        /// Variance in seconds added to the duration [-delta, delta]
        /// Default: 0
        /// </summary>
        [JsonProperty("duration_delta", NullValueHandling = NullValueHandling.Ignore)]
        public long? DurationDelta { get; set; }
    }

    /// <summary>
    /// Allows the actor to break doors assuming that that flags set up for the component to use
    /// in navigation
    /// </summary>
    public partial class MinecraftAnnotationBreakDoor
    {
        /// <summary>
        /// The time in seconds required to break through doors.
        /// Default: 12.0
        /// </summary>
        [JsonProperty("break_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? BreakTime { get; set; }

        /// <summary>
        /// The minimum difficulty that the world must be on for this entity to break doors.
        /// Default: hard
        /// </summary>
        [JsonProperty("min_difficulty", NullValueHandling = NullValueHandling.Ignore)]
        public MinDifficulty? MinDifficulty { get; set; }
    }

    /// <summary>
    /// A component that does damage to entities that get within range.
    /// </summary>
    public partial class MinecraftAreaAttack
    {
        [JsonProperty("cause", NullValueHandling = NullValueHandling.Ignore)]
        public string Cause { get; set; }

        /// <summary>
        /// How much damage per tick is applied to entities that enter the damage range.
        /// </summary>
        [JsonProperty("damage_per_tick", NullValueHandling = NullValueHandling.Ignore)]
        public long? DamagePerTick { get; set; }

        /// <summary>
        /// How close a hostile entity must be to have the damage applied.
        /// Default: 0.2
        /// </summary>
        [JsonProperty("damage_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? DamageRange { get; set; }

        [JsonProperty("entity_filter", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? EntityFilter { get; set; }
    }

    /// <summary>
    /// Defines an entity's melee attack and any additional effects on it.
    /// </summary>
    public partial class MinecraftAttack
    {
        /// <summary>
        /// Range of the random amount of damage the melee attack deals. A negative value can heal
        /// the entity instead of hurting it
        /// </summary>
        [JsonProperty("damage", NullValueHandling = NullValueHandling.Ignore)]
        public Damage? Damage { get; set; }

        /// <summary>
        /// Duration in seconds of the status ailment applied to the damaged entity
        /// Default: 0.0
        /// </summary>
        [JsonProperty("effect_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? EffectDuration { get; set; }

        /// <summary>
        /// Identifier of the status ailment to apply to an entity attacked by this entity's melee
        /// attack
        /// </summary>
        [JsonProperty("effect_name")]
        public object EffectName { get; set; }
    }

    public partial class RangeSchema
    {
        [JsonProperty("range_max", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMax { get; set; }

        [JsonProperty("range_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMin { get; set; }
    }

    /// <summary>
    /// Allows this entity to avoid certain mob types.
    /// </summary>
    public partial class MinecraftBehaviorAvoidMobType
    {
        /// <summary>
        /// List of entity types this mob avoids.
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// If true, visbility between this entity and the mob type will not be checked.
        /// Default: false
        /// </summary>
        [JsonProperty("ignore_visibility", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IgnoreVisibility { get; set; }

        /// <summary>
        /// Maximum distance to look for an entity
        /// Default: 0.0
        /// </summary>
        [JsonProperty("max_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDist { get; set; }

        /// <summary>
        /// Distance in blocks within the mob considers it should stop fleeing.
        /// Default: 0.5
        /// </summary>
        [JsonProperty("max_flee", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxFlee { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Determines how likely it is that this entity will stop avoiding another entity based on
        /// that entity's strength
        /// Default: 1.0
        /// </summary>
        [JsonProperty("probability_per_strength", NullValueHandling = NullValueHandling.Ignore)]
        public double? ProbabilityPerStrength { get; set; }

        /// <summary>
        /// Multiplier for running speed. 1.0 means keep the regular speed, while higher numbers make
        /// the running speed faster
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sprint_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SprintSpeedMultiplier { get; set; }

        /// <summary>
        /// Multiplier for walking speed. 1.0 means keep the regular speed, while higher numbers make
        /// the walking speed faster
        /// Default: 1.0
        /// </summary>
        [JsonProperty("walk_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? WalkSpeedMultiplier { get; set; }
    }

    public partial class EntityTypes
    {
        /// <summary>
        /// Conditions that make this entry in the list valid
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// Maximum distance this mob can be away to be a valid choice
        /// Default: 16
        /// </summary>
        [JsonProperty("max_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDist { get; set; }

        /// <summary>
        /// If true, the mob has to be visible to be a valid choice
        /// Default: false
        /// </summary>
        [JsonProperty("must_see", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustSee { get; set; }

        /// <summary>
        /// Determines the amount of time in seconds that this mob will look for a target before
        /// forgetting about it and looking for a new one when the target isn't visible any more
        /// Default: 3.0
        /// </summary>
        [JsonProperty("must_see_forget_duration", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustSeeForgetDuration { get; set; }

        /// <summary>
        /// Multiplier for the running speed. A value of 1.0 means the speed is unchanged
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sprint_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SprintSpeedMultiplier { get; set; }

        /// <summary>
        /// Multiplier for the walking speed. A value of 1.0 means the speed is unchanged
        /// Default: 1.0
        /// </summary>
        [JsonProperty("walk_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? WalkSpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows this mob to look at and follow the player that holds food they like.
    /// </summary>
    public partial class MinecraftBehaviorBeg
    {
        /// <summary>
        /// List of items that this mob likes
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Items { get; set; }

        /// <summary>
        /// Distance in blocks the mob will beg from
        /// Default: 8.0
        /// </summary>
        [JsonProperty("look_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LookDistance { get; set; }

        /// <summary>
        /// The range of time in seconds this mob will stare at the player holding a food they like,
        /// begging for it
        /// Default: [2, 4]
        /// </summary>
        [JsonProperty("look_time", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? LookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows this mob to break doors.
    /// </summary>
    public partial class MinecraftBehaviorBreakDoor
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows this mob to breed with other mobs.
    /// </summary>
    public partial class MinecraftBehaviorBreed
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// This allows the mob celebrate by jumping up and playing a sound periodically.
    /// </summary>
    public partial class MinecraftBehaviorCelebrate
    {
        /// <summary>
        /// The sound to occasionally play.
        /// </summary>
        [JsonProperty("celebration_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string CelebrationSound { get; set; }

        /// <summary>
        /// The duration of the celebration (in seconds).
        /// Default: 1.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// The range of time in seconds to randomly wait before jumping again.
        /// Default: 0
        /// </summary>
        [JsonProperty("jump_interval", NullValueHandling = NullValueHandling.Ignore)]
        public JumpInterval JumpInterval { get; set; }

        /// <summary>
        /// The event to trigger when the goal's duration expires.
        /// </summary>
        [JsonProperty("on_celebration_end_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnCelebrationEndEvent { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The range of time in seconds to randomly wait before playing the sound again.
        /// Default: 0
        /// </summary>
        [JsonProperty("sound_interval", NullValueHandling = NullValueHandling.Ignore)]
        public SoundInterval SoundInterval { get; set; }
    }

    /// <summary>
    /// The range of time in seconds to randomly wait before jumping again.
    /// Default: 0
    /// </summary>
    public partial class JumpInterval
    {
        [JsonProperty("range_max", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMax { get; set; }

        [JsonProperty("range_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMin { get; set; }
    }

    /// <summary>
    /// The range of time in seconds to randomly wait before playing the sound again.
    /// Default: 0
    /// </summary>
    public partial class SoundInterval
    {
        [JsonProperty("range_max", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMax { get; set; }

        [JsonProperty("range_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMin { get; set; }
    }

    /// <summary>
    /// Allows the mob to attack its target by running at it.
    /// </summary>
    public partial class MinecraftBehaviorChargeAttack
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows this mob to charge and use their held item.
    /// </summary>
    public partial class MinecraftBehaviorChargeHeldItem
    {
        /// <summary>
        /// The list of items that can be used to charge the held item.
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Items { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to move in a circle around a point or a target.
    /// </summary>
    public partial class MinecraftBehaviorCircleAroundAnchor
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// When the mob finds a target, the range of height in blocks above the target to start the
        /// anchor point.
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("height_above_target_range", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? HeightAboveTargetRange { get; set; }

        /// <summary>
        /// A random value to determine when to change the height of the mob from the anchor point.
        /// This has a 1/value chance every tick to do so.
        /// Default: 350
        /// </summary>
        [JsonProperty("height_change_chance", NullValueHandling = NullValueHandling.Ignore)]
        public long? HeightChangeChance { get; set; }

        /// <summary>
        /// The range of height in blocks offset the mob can have from it's anchor point.
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("height_offset_range", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? HeightOffsetRange { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// A random value to determine when to increase the size of the radius up to the maximum.
        /// This has a 1/value chance every tick to do so.
        /// Default: 250
        /// </summary>
        [JsonProperty("radius_change_chance", NullValueHandling = NullValueHandling.Ignore)]
        public long? RadiusChangeChance { get; set; }

        /// <summary>
        /// Range of radius in blocks of the circle to move around.
        /// Default: [5.0, 15.0]
        /// </summary>
        [JsonProperty("radius_range", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? RadiusRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to be controlled by the player.
    /// </summary>
    public partial class MinecraftBehaviorControlledByPlayer
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to target another mob that hurts an entity it trusts.
    /// </summary>
    public partial class MinecraftBehaviorDefendTrustedTarget
    {
        /// <summary>
        /// Sound to occasionally play while defending.
        /// </summary>
        [JsonProperty("aggro_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string AggroSound { get; set; }

        /// <summary>
        /// Time in seconds between attacks
        /// Default: 0
        /// </summary>
        [JsonProperty("attack_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackInterval { get; set; }

        /// <summary>
        /// List of entity types that this mob considers valid targets
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// If true, only entities in this mob's viewing range can be selected as targets
        /// Default: false
        /// </summary>
        [JsonProperty("must_see", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustSee { get; set; }

        /// <summary>
        /// Determines the amount of time in seconds that this mob will look for a target before
        /// forgetting about it and looking for a new one when the target isn't visible any more
        /// Default: 3.0
        /// </summary>
        [JsonProperty("must_see_forget_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? MustSeeForgetDuration { get; set; }

        [JsonProperty("on_defend_start", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnDefendStart { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        [JsonProperty("sound_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? SoundChance { get; set; }

        /// <summary>
        /// Distance in blocks that the target can be within to launch an attack
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the mob to stay in the village and fight mobs hostile to the villagers.
    /// </summary>
    public partial class MinecraftBehaviorDefendVillageTarget
    {
        /// <summary>
        /// List of entity types this mob considers a threat to the village
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to an attack where the hit is delayed.
    /// </summary>
    public partial class MinecraftBehaviorDelayedAttack
    {
        /// <summary>
        /// The duration of the attack animation in seconds
        /// Default: 1.0
        /// </summary>
        [JsonProperty("attack_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? AttackDuration { get; set; }

        /// <summary>
        /// If true, this mob will attack only one time.
        /// Default: false
        /// </summary>
        [JsonProperty("attack_once", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AttackOnce { get; set; }

        /// <summary>
        /// Defines the entity types this mob will attack
        /// </summary>
        [JsonProperty("attack_types", NullValueHandling = NullValueHandling.Ignore)]
        public string AttackTypes { get; set; }

        /// <summary>
        /// The percentage of the attack_duration that must pass before the hit is made
        /// Default: 1.0
        /// </summary>
        [JsonProperty("hit_delay_pct", NullValueHandling = NullValueHandling.Ignore)]
        public double? HitDelayPct { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Defines the probability the mob will stop fighting. A value of 0 disables randomly
        /// stopping, while a value of 1 defines a 50% chance
        /// Default: 0
        /// </summary>
        [JsonProperty("random_stop_interval", NullValueHandling = NullValueHandling.Ignore)]
        public double? RandomStopInterval { get; set; }

        /// <summary>
        /// Multiplier for how far outside its box the mob can reach its target (this can be used to
        /// simulate a mob with longer arms by making this bigger)
        /// Default: 2.0
        /// </summary>
        [JsonProperty("reach_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? ReachMultiplier { get; set; }

        /// <summary>
        /// The sound event to play when the attack starts
        /// </summary>
        [JsonProperty("sound_event", NullValueHandling = NullValueHandling.Ignore)]
        public string SoundEvent { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// If true, this mob will chase after the target as long as it's a valid target
        /// Default: false
        /// </summary>
        [JsonProperty("track_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TrackTarget { get; set; }
    }

    /// <summary>
    /// Allows the mob to open and close doors.
    /// </summary>
    public partial class MinecraftBehaviorDoorInteract
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the dragon to attack a player by flying fast at them. The player is chosen by the
    /// dragonscanning goal. Can only be used by the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragonchargeplayer
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the dragon to go out with glory. This controls the Ender Dragon's death animation
    /// and can't be used by other mobs.
    /// </summary>
    public partial class MinecraftBehaviorDragondeath
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the dragon to use its flame breath attack. Can only be used by the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragonflaming
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the Dragon to fly around in a circle around the center podium. Can only be used by
    /// the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragonholdingpattern
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the Dragon to stop flying and transition into perching mode. Can only be used by
    /// the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragonlanding
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the dragon to look around for a player to attack while in perch mode. Can only be
    /// used by the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragonscanning
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the dragon to fly around looking for a player and shoot fireballs at them. Can
    /// only be used by the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragonstrafeplayer
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the dragon to leave perch mode and go back to flying around. Can only be used by
    /// the Ender Dragon.
    /// </summary>
    public partial class MinecraftBehaviorDragontakeoff
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to drink potions based on specified environment conditions.
    /// </summary>
    public partial class MinecraftBehaviorDrinkPotion
    {
        /// <summary>
        /// A list of potions that this entity can drink. Each potion entry has the following
        /// parameters:
        /// </summary>
        [JsonProperty("potions", NullValueHandling = NullValueHandling.Ignore)]
        public Potion[] Potions { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        [JsonProperty("speed_modifier")]
        public object SpeedModifier { get; set; }
    }

    public partial class Potion
    {
        /// <summary>
        /// The percent chance (from 0.0 to 1.0) of this potion being selected when searching for a
        /// potion to use.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? Chance { get; set; }

        /// <summary>
        /// The filters to use when determining if this potion can be selected.
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// The registry ID of the potion to use
        /// Default: -1
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }
    }

    /// <summary>
    /// Allows the mob to move near a target and drop an item.
    /// </summary>
    public partial class MinecraftBehaviorDropItemFor
    {
        /// <summary>
        /// The probability that the mob will drop an item.
        /// Default: [1.0]
        /// </summary>
        [JsonProperty("drop_item_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? DropItemChance { get; set; }

        /// <summary>
        /// List of entity types this mob will drop items for.
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Loot table to select items from.
        /// </summary>
        [JsonProperty("loot_table", NullValueHandling = NullValueHandling.Ignore)]
        public string LootTable { get; set; }

        /// <summary>
        /// Maximum distance in blocks this mob will look for entities to drop an item for.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("max_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDist { get; set; }

        /// <summary>
        /// The distance in blocks the mob will try to be away from the entity when it drops the
        /// item.
        /// Default: [1.0]
        /// </summary>
        [JsonProperty("offering_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? OfferingDistance { get; set; }

        /// <summary>
        /// Event to run when this mob attempts to drop an item.
        /// </summary>
        [JsonProperty("on_drop_attempt", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnDropAttempt { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Height in blocks from the target the mob can be.
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The distance in blocks from the target the mob can be.
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The valid times of day that this goal can be used.  For reference: noon is 0.0, sunset is
        /// 0.25, midnight is 0.5, and sunrise is 0.75, and back to noon for 1.0.
        /// Default: [0.0, 1.0]
        /// </summary>
        [JsonProperty("time_of_day_range", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? TimeOfDayRange { get; set; }
    }

    /// <summary>
    /// Allows the mob to eat a block (for example, sheep eating grass).
    /// </summary>
    public partial class MinecraftBehaviorEatBlock
    {
        /// <summary>
        /// Trigger to fire when the mob eats a block of grass
        /// </summary>
        [JsonProperty("on_eat", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnEat { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// If the mob is carrying a food item, the mob will eat it and the effects will be applied
    /// to the mob.
    /// </summary>
    public partial class MinecraftBehaviorEatCarriedItem
    {
        /// <summary>
        /// Time in seconds the mob should wait before eating the item.
        /// </summary>
        [JsonProperty("delay_before_eating", NullValueHandling = NullValueHandling.Ignore)]
        public double? DelayBeforeEating { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the enderman to drop a block they are carrying. Can only be used by Endermen.
    /// </summary>
    public partial class MinecraftBehaviorEndermanLeaveBlock
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the enderman to take a block and carry it around. Can only be used by Endermen.
    /// </summary>
    public partial class MinecraftBehaviorEndermanTakeBlock
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// allows a mob to explore the outskirts of a village
    /// </summary>
    public partial class MinecraftBehaviorExploreOutskirts
    {
        /// <summary>
        /// The distance in which the mob will proceed past the village bounds
        /// Default: 5.0
        /// </summary>
        [JsonProperty("explore_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? ExploreDist { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The time the mob will stand around 'searching' for POIs
        /// Default: 0
        /// </summary>
        [JsonProperty("wait_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? WaitTime { get; set; }
    }

    /// <summary>
    /// Allows the mob to seek shade.
    /// </summary>
    public partial class MinecraftBehaviorFindCover
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to look around for another mob to ride atop it.
    /// </summary>
    public partial class MinecraftBehaviorFindMount
    {
        /// <summary>
        /// If true, the mob will not go into water blocks when going towards a mount
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// This is the distance the mob needs to be, in blocks, from the desired mount to mount it.
        /// If the value is below 0, the mob will use its default attack distance
        /// Default: -1.0
        /// </summary>
        [JsonProperty("mount_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? MountDistance { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Time the mob will wait before starting to move towards the mount
        /// Default: 0
        /// </summary>
        [JsonProperty("start_delay", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartDelay { get; set; }

        /// <summary>
        /// If true, the mob will only look for a mount if it has a target
        /// Default: false
        /// </summary>
        [JsonProperty("target_needed", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TargetNeeded { get; set; }

        /// <summary>
        /// Distance in blocks within which the mob will look for a mount
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the mob to move towards the nearest underwater ruin or shipwreck.
    /// </summary>
    public partial class MinecraftBehaviorFindUnderwaterTreasure
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The range that the mob will search for a treasure chest within a ruin or shipwreck to
        /// move towards.
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The distance the mob will move before stopping.
        /// Default: 2.0
        /// </summary>
        [JsonProperty("stop_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StopDistance { get; set; }
    }

    /// <summary>
    /// Allows the mob to run away from direct sunlight and seek shade.
    /// </summary>
    public partial class MinecraftBehaviorFleeSun
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to stay afloat while swimming.
    /// </summary>
    public partial class MinecraftBehaviorFloat
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to float around like the Ghast.
    /// </summary>
    public partial class MinecraftBehaviorFloatWander
    {
        /// <summary>
        /// Range of time in seconds the mob will float around before landing and choosing to do
        /// something else
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("float_duration", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? FloatDuration { get; set; }

        /// <summary>
        /// If true, the point has to be reachable to be a valid target
        /// Default: false
        /// </summary>
        [JsonProperty("must_reach", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustReach { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// If true, the mob will randomly pick a new point while moving to the previously selected
        /// one
        /// Default: false
        /// </summary>
        [JsonProperty("random_reselect", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RandomReselect { get; set; }

        /// <summary>
        /// Distance in blocks on ground that the mob will look for a new spot to move to. Must be at
        /// least 1
        /// Default: 10
        /// </summary>
        [JsonProperty("xz_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? XzDist { get; set; }

        /// <summary>
        /// Distance in blocks that the mob will look up or down for a new spot to move to. Must be
        /// at least 1
        /// Default: 7
        /// </summary>
        [JsonProperty("y_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? YDist { get; set; }

        /// <summary>
        /// Height in blocks to add to the selected target position
        /// Default: 0.0
        /// </summary>
        [JsonProperty("y_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double? YOffset { get; set; }
    }

    /// <summary>
    /// Allows the mob to follow mobs that are in a caravan.
    /// </summary>
    public partial class MinecraftBehaviorFollowCaravan
    {
        /// <summary>
        /// Number of entities that can be in the caravan
        /// Default: 1
        /// </summary>
        [JsonProperty("entity_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? EntityCount { get; set; }

        /// <summary>
        /// List of entity types that this mob can follow in a caravan
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to follow other mobs.
    /// </summary>
    public partial class MinecraftBehaviorFollowMob
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The distance in blocks it will look for a mob to follow
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The distance in blocks this mob stops from the mob it is following
        /// Default: 2.0
        /// </summary>
        [JsonProperty("stop_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StopDistance { get; set; }
    }

    /// <summary>
    /// Allows the mob to follow the player that owns them.
    /// </summary>
    public partial class MinecraftBehaviorFollowOwner
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The distance in blocks that the owner can be away from this mob before it starts
        /// following it
        /// Default: 10.0
        /// </summary>
        [JsonProperty("start_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartDistance { get; set; }

        /// <summary>
        /// The distance in blocks this mob will stop from its owner while following it
        /// Default: 2.0
        /// </summary>
        [JsonProperty("stop_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StopDistance { get; set; }
    }

    /// <summary>
    /// Allows the mob to follow their parent around.
    /// </summary>
    public partial class MinecraftBehaviorFollowParent
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows mob to move towards its current target captain.
    /// </summary>
    public partial class MinecraftBehaviorFollowTargetCaptain
    {
        /// <summary>
        /// Defines the distance in blocks the mob will stay from its target while following.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("follow_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? FollowDistance { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Defines the maximum distance in blocks a mob can get from its target captain before
        /// giving up trying to follow it.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the mob to move back to the position they were spawned.
    /// </summary>
    public partial class MinecraftBehaviorGoHome
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// A random value to determine when to randomly move somewhere. This has a 1/interval chance
        /// to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Event to run when the mob is unable to get home due to the home position being too far
        /// away or if the mob is in a different dimension.
        /// </summary>
        [JsonProperty("on_failed", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnFailed { get; set; }

        /// <summary>
        /// Event to run when this mob arrives at home.
        /// </summary>
        [JsonProperty("on_home", NullValueHandling = NullValueHandling.Ignore)]
        public On? OnHome { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the guardian to use its laser beam attack. Can only be used by Guardians and Elder
    /// Guardians.
    /// </summary>
    public partial class MinecraftBehaviorGuardianAttack
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the villager to harvest nearby farms. Can only be used by Villagers.
    /// </summary>
    public partial class MinecraftBehaviorHarvestFarmBlock
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows a mob with the hide component to attempt to move to - and hide at - an owned or
    /// nearby POI.
    /// </summary>
    public partial class MinecraftBehaviorHide
    {
        /// <summary>
        /// Amount of time in seconds that the mob reacts.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// Defines what POI type to hide at.
        /// </summary>
        [JsonProperty("poi_type", NullValueHandling = NullValueHandling.Ignore)]
        public string PoiType { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The cooldown time in seconds before the goal can be reused after a internal failure or
        /// timeout condition.
        /// Default: 8.0
        /// </summary>
        [JsonProperty("timeout_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? TimeoutCooldown { get; set; }
    }

    /// <summary>
    /// The mob freezes and looks at the mob they are targeting.
    /// </summary>
    public partial class MinecraftBehaviorHoldGround
    {
        /// <summary>
        /// Whether to broadcast out the mob's target to other mobs of the same type.
        /// Default: false
        /// </summary>
        [JsonProperty("broadcast", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Broadcast { get; set; }

        /// <summary>
        /// Range in blocks for how far to broadcast.
        /// Default: 0.0f
        /// </summary>
        [JsonProperty("broadcast_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? BroadcastRange { get; set; }

        /// <summary>
        /// Event to run when target hurts the mob. This event is broadcasted if broadcast is true.
        /// </summary>
        [JsonProperty("hurt_by_target_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent HurtByTargetEvent { get; set; }

        /// <summary>
        /// Minimum distance the target must be for the mob to run this goal.
        /// Default: 10.0f
        /// </summary>
        [JsonProperty("min_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Event to run when target is within the radius. This event is broadcasted if broadcast is
        /// true.
        /// </summary>
        [JsonProperty("within_radius_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent WithinRadiusEvent { get; set; }
    }

    /// <summary>
    /// Allows the mob to hover at its current position.
    /// </summary>
    public partial class MinecraftBehaviorHover
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to target another mob that hurts them.
    /// </summary>
    public partial class MinecraftBehaviorHurtByTarget
    {
        /// <summary>
        /// If true, nearby mobs of the same type will be alerted about the damage
        /// Default: false
        /// </summary>
        [JsonProperty("alert_same_type", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AlertSameType { get; set; }

        /// <summary>
        /// List of entity types that this mob can target when hurt by them
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// If true, the mob will hurt its owner and other mobs with the same owner as itself
        /// Default: false
        /// </summary>
        [JsonProperty("hurt_owner", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HurtOwner { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to inspect bookshelves.
    /// </summary>
    public partial class MinecraftBehaviorInspectBookshelf
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The number of blocks each tick that the mob will check within it's search range and
        /// height for a valid block to move to. A value of 0 will have the mob check every block
        /// within range in one tick
        /// Default: 10
        /// </summary>
        [JsonProperty("search_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchCount { get; set; }

        /// <summary>
        /// The height that the mob will search for bookshelves
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// Distance in blocks the mob will look for books to inspect
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to perform a damaging knockback that affects all nearby entities.
    /// </summary>
    public partial class MinecraftBehaviorKnockbackRoar
    {
        /// <summary>
        /// The delay after which the knockback occurs (in seconds).
        /// Default: 0.5
        /// </summary>
        [JsonProperty("attack_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? AttackTime { get; set; }

        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// The duration of the roar (in seconds).
        /// Default: 1.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// The damage dealt by the knockback roar.
        /// Default: 6
        /// </summary>
        [JsonProperty("knockback_damage", NullValueHandling = NullValueHandling.Ignore)]
        public long? KnockbackDamage { get; set; }

        /// <summary>
        /// The radius (in blocks) of the knockback effect.
        /// Default: 4
        /// </summary>
        [JsonProperty("knockback_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? KnockbackRange { get; set; }

        /// <summary>
        /// The strength of the knockback.
        /// Default: 4
        /// </summary>
        [JsonProperty("knockback_strength", NullValueHandling = NullValueHandling.Ignore)]
        public long? KnockbackStrength { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// on_roar_end
        /// </summary>
        [JsonProperty("Trigger")]
        public object Trigger { get; set; }
    }

    /// <summary>
    /// Allows mobs to lay down at times
    /// </summary>
    public partial class MinecraftBehaviorLayDown
    {
        /// <summary>
        /// A random value to determine at what intervals something can occur. This has a 1/interval
        /// chance to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// a random value in which the goal can use to pull out of the behavior. This is a
        /// 1/interval chance to play the sound
        /// Default: 120
        /// </summary>
        [JsonProperty("random_stop_interval", NullValueHandling = NullValueHandling.Ignore)]
        public double? RandomStopInterval { get; set; }
    }

    /// <summary>
    /// Allows the mob to lay an egg block on a sand block if the mob is pregnant.
    /// </summary>
    public partial class MinecraftBehaviorLayEgg
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Event to run when this mob lays the egg.
        /// </summary>
        [JsonProperty("on_lay", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnLay { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The number of blocks each tick that the mob will check within it's search range and
        /// height for a valid block to move to. A value of 0 will have the mob check every block
        /// within range in one tick
        /// Default: 10
        /// </summary>
        [JsonProperty("search_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchCount { get; set; }

        /// <summary>
        /// Height in blocks the mob will look for sand block to move towards
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The distance in blocks it will look for a sand block to move towards
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows monsters to jump at and attack their target. Can only be used by hostile mobs.
    /// </summary>
    public partial class MinecraftBehaviorLeapAtTarget
    {
        /// <summary>
        /// If true, the mob will only jump at its target if its on the ground. Setting it to false
        /// will allow it to jump even if its already in the air
        /// Default: true
        /// </summary>
        [JsonProperty("must_be_on_ground", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustBeOnGround { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The height in blocks the mob jumps when leaping at its target
        /// Default: 0.0
        /// </summary>
        [JsonProperty("yd", NullValueHandling = NullValueHandling.Ignore)]
        public double? Yd { get; set; }
    }

    /// <summary>
    /// Allows the mob to look at nearby entities.
    /// </summary>
    public partial class MinecraftBehaviorLookAtEntity
    {
        /// <summary>
        /// The angle in degrees that the mob can see in the Y-axis (up-down)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_horizontal", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewHorizontal { get; set; }

        /// <summary>
        /// The angle in degrees that the mob can see in the X-axis (left-right)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_vertical", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewVertical { get; set; }

        /// <summary>
        /// Filter to determine the conditions for this mob to look at the entity
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// The distance in blocks from which the entity will look at
        /// Default: 8.0
        /// </summary>
        [JsonProperty("look_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LookDistance { get; set; }

        /// <summary>
        /// Time range to look at the entity
        /// Default: [2, 4]
        /// </summary>
        [JsonProperty("look_time", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? LookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability of looking at the target. A value of 1.00 is 100%
        /// Default: 0.02
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }
    }

    /// <summary>
    /// Allows the mob to look at the player when the player is nearby.
    /// </summary>
    public partial class MinecraftBehaviorLookAtPlayer
    {
        /// <summary>
        /// The angle in degrees that the mob can see in the Y-axis (up-down)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_horizontal", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewHorizontal { get; set; }

        /// <summary>
        /// The angle in degrees that the mob can see in the X-axis (left-right)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_vertical", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewVertical { get; set; }

        /// <summary>
        /// The distance in blocks from which the entity will look at
        /// Default: 8.0
        /// </summary>
        [JsonProperty("look_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LookDistance { get; set; }

        /// <summary>
        /// Time range to look at the entity
        /// Default: [2, 4]
        /// </summary>
        [JsonProperty("look_time", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? LookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability of looking at the target. A value of 1.00 is 100%
        /// Default: 0.02
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }
    }

    /// <summary>
    /// Allows the mob to look at the entity they are targetting.
    /// </summary>
    public partial class MinecraftBehaviorLookAtTarget
    {
        /// <summary>
        /// The angle in degrees that the mob can see in the Y-axis (up-down)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_horizontal", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewHorizontal { get; set; }

        /// <summary>
        /// The angle in degrees that the mob can see in the X-axis (left-right)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_vertical", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewVertical { get; set; }

        /// <summary>
        /// The distance in blocks from which the entity will look at
        /// Default: 8.0
        /// </summary>
        [JsonProperty("look_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LookDistance { get; set; }

        /// <summary>
        /// Time range to look at the entity
        /// Default: [2, 4]
        /// </summary>
        [JsonProperty("look_time", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? LookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability of looking at the target. A value of 1.00 is 100%
        /// Default: 0.02
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }
    }

    /// <summary>
    /// Allows the mob to look at the player they are trading with.
    /// </summary>
    public partial class MinecraftBehaviorLookAtTradingPlayer
    {
        /// <summary>
        /// The angle in degrees that the mob can see in the Y-axis (up-down)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_horizontal", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewHorizontal { get; set; }

        /// <summary>
        /// The angle in degrees that the mob can see in the X-axis (left-right)
        /// Default: 360
        /// </summary>
        [JsonProperty("angle_of_view_vertical", NullValueHandling = NullValueHandling.Ignore)]
        public long? AngleOfViewVertical { get; set; }

        /// <summary>
        /// The distance in blocks from which the entity will look at
        /// Default: 8.0
        /// </summary>
        [JsonProperty("look_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LookDistance { get; set; }

        /// <summary>
        /// Time range to look at the entity
        /// Default: [2, 4]
        /// </summary>
        [JsonProperty("look_time", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? LookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability of looking at the target. A value of 1.00 is 100%
        /// Default: 0.02
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }
    }

    /// <summary>
    /// Allows the villager to look for a mate to spawn other villagers with. Can only be used by
    /// Villagers.
    /// </summary>
    public partial class MinecraftBehaviorMakeLove
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to use close combat melee attacks.
    /// </summary>
    public partial class MinecraftBehaviorMeleeAttack
    {
        /// <summary>
        /// If true, this mob will attack only one time.
        /// Default: false
        /// </summary>
        [JsonProperty("attack_once", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AttackOnce { get; set; }

        /// <summary>
        /// Defines the entity types this mob will attack
        /// </summary>
        [JsonProperty("attack_types", NullValueHandling = NullValueHandling.Ignore)]
        public string AttackTypes { get; set; }

        /// <summary>
        /// The allowable FOV the actor will use to determine if it can make a valid melee attack
        /// Default: 90.0
        /// </summary>
        [JsonProperty("melee_fov", NullValueHandling = NullValueHandling.Ignore)]
        public double? MeleeFov { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Defines the probability the mob will stop fighting. A value of 0 disables randomly
        /// stopping, while a value of 1 defines a 50% chance
        /// Default: 0
        /// </summary>
        [JsonProperty("random_stop_interval", NullValueHandling = NullValueHandling.Ignore)]
        public double? RandomStopInterval { get; set; }

        /// <summary>
        /// Multiplier for how far outside its box the mob can reach its target (this can be used to
        /// simulate a mob with longer arms by making this bigger)
        /// Default: 2.0
        /// </summary>
        [JsonProperty("reach_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? ReachMultiplier { get; set; }

        /// <summary>
        /// If true, this goal will only trigger if the mob can reach its target.
        /// Default: false
        /// </summary>
        [JsonProperty("require_complete_path", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequireCompletePath { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// If true, this mob will chase after the target as long as it's a valid target
        /// Default: false
        /// </summary>
        [JsonProperty("track_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TrackTarget { get; set; }
    }

    /// <summary>
    /// Allows an entity to go to the village bell and mingle with other entities
    /// </summary>
    public partial class MinecraftBehaviorMingle
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// Amount of time in seconds that the entity will chat with another entity
        /// Default: 1.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// The distance from its partner that this entity will mingle. If the entity type is not the
        /// same as the entity, this value needs to be identical on both entities.
        /// Default: 2.0f
        /// </summary>
        [JsonProperty("mingle_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? MingleDistance { get; set; }

        /// <summary>
        /// The entity type that this entity is allowed to mingle with
        /// Default: empty
        /// </summary>
        [JsonProperty("mingle_partner_type", NullValueHandling = NullValueHandling.Ignore)]
        public MinglePartnerType? MinglePartnerType { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to move around on its own while mounted seeking a target to attack.
    /// </summary>
    public partial class MinecraftBehaviorMountPathing
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The distance at which this mob wants to be away from its target
        /// Default: 0.0
        /// </summary>
        [JsonProperty("target_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? TargetDist { get; set; }

        /// <summary>
        /// If true, this mob will chase after the target as long as it's a valid target
        /// Default: false
        /// </summary>
        [JsonProperty("track_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TrackTarget { get; set; }
    }

    /// <summary>
    /// Can only be used by Villagers. Allows them to seek shelter indoors.
    /// </summary>
    public partial class MinecraftBehaviorMoveIndoors
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The cooldown time in seconds before the goal can be reused after a internal failure or
        /// timeout condition
        /// Default: 8.0
        /// </summary>
        [JsonProperty("timeout_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? TimeoutCooldown { get; set; }
    }

    /// <summary>
    /// Can only be used by Villagers. Allows the villagers to create paths around the village.
    /// </summary>
    public partial class MinecraftBehaviorMoveThroughVillage
    {
        /// <summary>
        /// If true, the mob will only move through the village during night time
        /// Default: false
        /// </summary>
        [JsonProperty("only_at_night", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OnlyAtNight { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// target_blocks usage
    /// </summary>
    public partial class MinecraftBehaviorMoveToBlock
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Trigger or list of triggers to trigger when the Mob comes within the 'goal_radius' of the
        /// target block.
        /// </summary>
        [JsonProperty("on_reach", NullValueHandling = NullValueHandling.Ignore)]
        public On? OnReach { get; set; }

        /// <summary>
        /// Trigger or list of triggers to trigger when the Mob has stayed at the target block for
        /// 'stay_duration' time.
        /// </summary>
        [JsonProperty("on_stay_completed", NullValueHandling = NullValueHandling.Ignore)]
        public On? OnStayCompleted { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The maximum height the Mob will look for target blocks
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The maximum distance the Mob will look for target blocks
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Multiplier for movement speed while moving towards the target block. 1.0 means no change
        /// in speed. 2.0 means twice as fast.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// Specifies a time that themob should stay at the target block. Fires 'on_stay_completed'
        /// after this duration.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("stay_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? StayDuration { get; set; }

        /// <summary>
        /// List or string of block descriptions
        /// </summary>
        [JsonProperty("target_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public string[] TargetBlocks { get; set; }

        /// <summary>
        /// The offset is added to the target blocks position where [0.0, 0.0, 0.0] means the center
        /// of the block.
        /// Default: [0.0, 0.0, 0.0]
        /// </summary>
        [JsonProperty("target_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double[] TargetOffset { get; set; }

        /// <summary>
        /// Specifies what method of target selection should be used when there are multiple
        /// candidates within range. The available methods are 'nearest' and 'random'.
        /// </summary>
        [JsonProperty("target_selection_method", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetSelectionMethod { get; set; }

        /// <summary>
        /// Limits how often the mob searches for target blocks. 0 means every tick. Higher number
        /// means less often. Many mobs searching for blocks every tick could make the game run
        /// slower.
        /// Default: 20
        /// </summary>
        [JsonProperty("tick_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? TickInterval { get; set; }
    }

    /// <summary>
    /// Allows the mob to move back onto land when in water.
    /// </summary>
    public partial class MinecraftBehaviorMoveToLand
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The number of blocks each tick that the mob will check within it's search range and
        /// height for a valid block to move to. A value of 0 will have the mob check every block
        /// within range in one tick
        /// Default: 10
        /// </summary>
        [JsonProperty("search_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchCount { get; set; }

        /// <summary>
        /// Height in blocks the mob will look for land to move towards
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The distance in blocks it will look for land to move towards
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to move to a POI if able to
    /// </summary>
    public partial class MinecraftBehaviorMoveToPoi
    {
        /// <summary>
        /// Tells the goal what POI type it should be looking for
        /// </summary>
        [JsonProperty("poi_type", NullValueHandling = NullValueHandling.Ignore)]
        public string PoiType { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows mob to move towards a random block.
    /// </summary>
    public partial class MinecraftBehaviorMoveToRandomBlock
    {
        /// <summary>
        /// Defines the distance from the mob, in blocks, that the block to move to will be chosen.
        /// Default: 16.0
        /// </summary>
        [JsonProperty("block_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockDistance { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Defines the distance in blocks the mob has to be from the block for the movement to be
        /// finished.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the mob to move into a random location within a village.
    /// </summary>
    public partial class MinecraftBehaviorMoveToVillage
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The distance in blocks to search for villages. If <= 0, find the closest village
        /// regardless of distance.
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to move back into water when on land.
    /// </summary>
    public partial class MinecraftBehaviorMoveToWater
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The number of blocks each tick that the mob will check within it's search range and
        /// height for a valid block to move to. A value of 0 will have the mob check every block
        /// within range in one tick
        /// Default: 10
        /// </summary>
        [JsonProperty("search_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchCount { get; set; }

        /// <summary>
        /// Height in blocks the mob will look for water to move towards
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The distance in blocks it will look for water to move towards
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows Guardians, Iron Golems and Villagers to move within their pre-defined area that
    /// the mob should be restricted to. Other mobs don't have a restriction defined.
    /// </summary>
    public partial class MinecraftBehaviorMoveTowardsRestriction
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows mob to move towards its current target.
    /// </summary>
    public partial class MinecraftBehaviorMoveTowardsTarget
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Defines the radius in blocks that the mob tries to be from the target. A value of 0 means
        /// it tries to occupy the same block as the target
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows mobs to occassionally stop and take a nap under certain conditions.
    /// </summary>
    public partial class MinecraftBehaviorNap
    {
        /// <summary>
        /// Maximum time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_max", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownMax { get; set; }

        /// <summary>
        /// Minimum time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownMin { get; set; }

        /// <summary>
        /// The block distance in x and z that will be checked for mobs that this mob detects
        /// Default: 6.0
        /// </summary>
        [JsonProperty("mob_detect_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MobDetectDist { get; set; }

        /// <summary>
        /// The block distance in y that will be checked for mobs that this mob detects
        /// Default: 6.0
        /// </summary>
        [JsonProperty("mob_detect_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? MobDetectHeight { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to check for and pursue the nearest valid target.
    /// </summary>
    public partial class MinecraftBehaviorNearestAttackableTarget
    {
        /// <summary>
        /// Time in seconds between attacks
        /// Default: 0
        /// </summary>
        [JsonProperty("attack_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackInterval { get; set; }

        /// <summary>
        /// List of entity types that this mob considers valid targets
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// If true, only entities that this mob can path to can be selected as targets
        /// Default: false
        /// </summary>
        [JsonProperty("must_reach", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustReach { get; set; }

        /// <summary>
        /// If true, only entities in this mob's viewing range can be selected as targets
        /// Default: false
        /// </summary>
        [JsonProperty("must_see", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustSee { get; set; }

        /// <summary>
        /// Determines the amount of time in seconds that this mob will look for a target before
        /// forgetting about it and looking for a new one when the target isn't visible any more
        /// Default: 3.0
        /// </summary>
        [JsonProperty("must_see_forget_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? MustSeeForgetDuration { get; set; }

        /// <summary>
        /// Time in seconds for a valid target to stay targeted when it becomes and invalid target.
        /// Default: 0.0f
        /// </summary>
        [JsonProperty("persist_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? PersistTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// If true, the target will change to the current closest entity whenever a different entity
        /// is closer
        /// Default: false
        /// </summary>
        [JsonProperty("reselect_targets", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReselectTargets { get; set; }

        /// <summary>
        /// How many ticks to wait between scanning for a target.
        /// Default: 10
        /// </summary>
        [JsonProperty("scan_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? ScanInterval { get; set; }

        /// <summary>
        /// Height in blocks to search for a target mob. -1.0f means the height does not matter.
        /// Default: -1.0f
        /// </summary>
        [JsonProperty("target_search_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? TargetSearchHeight { get; set; }

        /// <summary>
        /// Distance in blocks that the target can be within to launch an attack
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the mob to check for and pursue the nearest valid target.
    /// </summary>
    public partial class MinecraftBehaviorNearestPrioritizedAttackableTarget
    {
        /// <summary>
        /// Time in seconds between attacks
        /// Default: 0
        /// </summary>
        [JsonProperty("attack_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackInterval { get; set; }

        /// <summary>
        /// List of entity types that this mob considers valid targets
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// If true, only entities that this mob can path to can be selected as targets
        /// Default: false
        /// </summary>
        [JsonProperty("must_reach", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustReach { get; set; }

        /// <summary>
        /// If true, only entities in this mob's viewing range can be selected as targets
        /// Default: false
        /// </summary>
        [JsonProperty("must_see", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustSee { get; set; }

        /// <summary>
        /// Determines the amount of time in seconds that this mob will look for a target before
        /// forgetting about it and looking for a new one when the target isn't visible any more
        /// Default: 3.0
        /// </summary>
        [JsonProperty("must_see_forget_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? MustSeeForgetDuration { get; set; }

        /// <summary>
        /// Time in seconds for a valid target to stay targeted when it becomes and invalid target.
        /// Default: 0.0f
        /// </summary>
        [JsonProperty("persist_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? PersistTime { get; set; }

        /// <summary>
        /// Specifies the priority in which filtered enemy types should be attacked. Lower number
        /// means higher priority.
        /// Default: 0
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public long? Priority { get; set; }

        /// <summary>
        /// If true, the target will change to the current closest entity whenever a different entity
        /// is closer
        /// Default: false
        /// </summary>
        [JsonProperty("reselect_targets", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReselectTargets { get; set; }

        /// <summary>
        /// How many ticks to wait between scanning for a target.
        /// Default: 10
        /// </summary>
        [JsonProperty("scan_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? ScanInterval { get; set; }

        /// <summary>
        /// Height in blocks to search for a target mob. -1.0f means the height does not matter.
        /// Default: -1.0f
        /// </summary>
        [JsonProperty("target_search_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? TargetSearchHeight { get; set; }

        /// <summary>
        /// Distance in blocks that the target can be within to launch an attack
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows to mob to be able to sit in place like the ocelot.
    /// </summary>
    public partial class MinecraftBehaviorOcelotSitOnBlock
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Can only be used by the Ocelot. Allows it to perform the sneak and pounce attack.
    /// </summary>
    public partial class MinecraftBehaviorOcelotattack
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Multiplier for the sneaking speed. 1.0 means the ocelot will move at the speed it
        /// normally sneaks
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sneak_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SneakSpeedMultiplier { get; set; }

        /// <summary>
        /// Multiplier for the running speed of this mob while using this attack
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sprint_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SprintSpeedMultiplier { get; set; }

        /// <summary>
        /// Multiplier for the walking speed while using this attack
        /// Default: 1.0
        /// </summary>
        [JsonProperty("walk_speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? WalkSpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to offer the player a flower like the Iron Golem does.
    /// </summary>
    public partial class MinecraftBehaviorOfferFlower
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to open doors. Requires the mob to be able to path through doors,
    /// otherwise the mob won't even want to try opening them.
    /// </summary>
    public partial class MinecraftBehaviorOpenDoor
    {
        /// <summary>
        /// If true, the mob will close the door after opening it and going through it
        /// Default: true
        /// </summary>
        [JsonProperty("close_door_after", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CloseDoorAfter { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to target another mob that hurts their owner.
    /// </summary>
    public partial class MinecraftBehaviorOwnerHurtByTarget
    {
        /// <summary>
        /// List of entity types that this mob can target if they hurt their owner
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to target a mob that is hurt by their owner.
    /// </summary>
    public partial class MinecraftBehaviorOwnerHurtTarget
    {
        /// <summary>
        /// List of entity types that this entity can target if the potential target is hurt by this
        /// mob's owner
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to enter the panic state, which makes it run around and away from the
    /// damage source that made it enter this state.
    /// </summary>
    public partial class MinecraftBehaviorPanic
    {
        /// <summary>
        /// If true, this mob will not stop panicking until it can't move anymore or the goal is
        /// removed from it
        /// Default: false
        /// </summary>
        [JsonProperty("force", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Force { get; set; }

        /// <summary>
        /// If true, the mob will not panic in response to damage from other mobs (only fire/lava
        /// etc)
        /// Default: false
        /// </summary>
        [JsonProperty("ignore_mob_damage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IgnoreMobDamage { get; set; }

        /// <summary>
        /// If true, the mob will prefer water over land
        /// Default: false
        /// </summary>
        [JsonProperty("prefer_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PreferWater { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to peek out. This is what the shulker uses to look out of its shell.
    /// </summary>
    public partial class MinecraftBehaviorPeek
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the pet mob to move onto a bed with it's owner while sleeping.
    /// </summary>
    public partial class MinecraftBehaviorPetSleepWithOwner
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Height in blocks from the owner the pet can be to sleep with owner.
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The distance in blocks from the owner the pet can be to sleep with owner.
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to pick up items on the ground.
    /// </summary>
    public partial class MinecraftBehaviorPickupItems
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Maximum distance this mob will look for items to pick up
        /// Default: 0.0
        /// </summary>
        [JsonProperty("max_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDist { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// If true, this mob will chase after the target as long as it's a valid target
        /// Default: false
        /// </summary>
        [JsonProperty("track_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TrackTarget { get; set; }
    }

    /// <summary>
    /// Allows the mob to play with other baby villagers. This can only be used by Villagers.
    /// </summary>
    public partial class MinecraftBehaviorPlay
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to be ridden by the player after being tamed.
    /// </summary>
    public partial class MinecraftBehaviorPlayerRideTamed
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to eat/raid crops out of farms until they are full.
    /// </summary>
    public partial class MinecraftBehaviorRaidGarden
    {
        /// <summary>
        /// Blocks that the mob is looking for to eat/raid
        /// </summary>
        [JsonProperty("blocks", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Blocks { get; set; }

        /// <summary>
        /// Time in seconds between each time it eats/raids
        /// Default: 2
        /// </summary>
        [JsonProperty("eat_delay", NullValueHandling = NullValueHandling.Ignore)]
        public long? EatDelay { get; set; }

        /// <summary>
        /// Amount of time in seconds before this mob wants to eat/raid again after eating its
        /// maximum
        /// Default: 100
        /// </summary>
        [JsonProperty("full_delay", NullValueHandling = NullValueHandling.Ignore)]
        public long? FullDelay { get; set; }

        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Time in seconds before starting to eat/raid once it arrives at it
        /// Default: 0
        /// </summary>
        [JsonProperty("initial_eat_delay", NullValueHandling = NullValueHandling.Ignore)]
        public long? InitialEatDelay { get; set; }

        /// <summary>
        /// Maximum number of crops this entity wants to eat/raid. If set to zero or less then it
        /// doesn't have a maximum
        /// Default: 6
        /// </summary>
        [JsonProperty("max_to_eat", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxToEat { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Distance in blocks the mob will look for crops to eat
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to randomly break surface of the water.
    /// </summary>
    public partial class MinecraftBehaviorRandomBreach
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// A random value to determine when to randomly move somewhere. This has a 1/interval chance
        /// to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// Distance in blocks on ground that the mob will look for a new spot to move to. Must be at
        /// least 1
        /// Default: 10
        /// </summary>
        [JsonProperty("xz_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? XzDist { get; set; }

        /// <summary>
        /// Distance in blocks that the mob will look up or down for a new spot to move to. Must be
        /// at least 1
        /// Default: 7
        /// </summary>
        [JsonProperty("y_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? YDist { get; set; }
    }

    /// <summary>
    /// Allows a mob to randomly fly around.
    /// </summary>
    public partial class MinecraftBehaviorRandomFly
    {
        /// <summary>
        /// If true, the mob can stop flying and land on a tree instead of the ground
        /// Default: true
        /// </summary>
        [JsonProperty("can_land_on_trees", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanLandOnTrees { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Distance in blocks on ground that the mob will look for a new spot to move to. Must be at
        /// least 1
        /// Default: 10
        /// </summary>
        [JsonProperty("xz_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? XzDist { get; set; }

        /// <summary>
        /// Distance in blocks that the mob will look up or down for a new spot to move to. Must be
        /// at least 1
        /// Default: 7
        /// </summary>
        [JsonProperty("y_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? YDist { get; set; }
    }

    /// <summary>
    /// Allows the mob to hover around randomly, close to the surface
    /// </summary>
    public partial class MinecraftBehaviorRandomHover
    {
        /// <summary>
        /// hover_height
        /// </summary>
        [JsonProperty("")]
        public object Empty { get; set; }

        /// <summary>
        /// A random value to determine when to randomly move somewhere. This has a 1/interval chance
        /// to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// Distance in blocks on ground that the mob will look for a new spot to move to. Must be at
        /// least 1
        /// Default: 10
        /// </summary>
        [JsonProperty("xz_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? XzDist { get; set; }

        /// <summary>
        /// Distance in blocks that the mob will look up or down for a new spot to move to. Must be
        /// at least 1
        /// Default: 7
        /// </summary>
        [JsonProperty("y_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? YDist { get; set; }

        /// <summary>
        /// Height in blocks to add to the selected target position
        /// Default: 0.0
        /// </summary>
        [JsonProperty("y_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double? YOffset { get; set; }
    }

    /// <summary>
    /// Allows the mob to randomly look around.
    /// </summary>
    public partial class MinecraftBehaviorRandomLookAround
    {
        /// <summary>
        /// The range of time in seconds the mob will stay looking in a random direction before
        /// looking elsewhere
        /// Default: [2, 4]
        /// </summary>
        [JsonProperty("look_time", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? LookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to randomly sit and look around for a duration. Note: Must have a sitting
    /// animation set up to use this.
    /// </summary>
    public partial class MinecraftBehaviorRandomLookAroundAndSit
    {
        /// <summary>
        /// The max amount of unique looks a mob will have while looking around.
        /// Default: 2
        /// </summary>
        [JsonProperty("max_look_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxLookCount { get; set; }

        /// <summary>
        /// The max amount of time (in ticks) a mob will stay looking at a direction while looking
        /// around.
        /// Default: 40
        /// </summary>
        [JsonProperty("max_look_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxLookTime { get; set; }

        /// <summary>
        /// The min amount of unique looks a mob will have while looking around.
        /// Default: 1
        /// </summary>
        [JsonProperty("min_look_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinLookCount { get; set; }

        /// <summary>
        /// The min amount of time (in ticks) a mob will stay looking at a direction while looking
        /// around.
        /// Default: 20
        /// </summary>
        [JsonProperty("min_look_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinLookTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability of randomly looking around/sitting.
        /// Default: 0.02
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }
    }

    /// <summary>
    /// Allows the mob to randomly sit for a duration.
    /// </summary>
    public partial class MinecraftBehaviorRandomSitting
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// The minimum amount of time in seconds before the mob can stand back up
        /// Default: 10
        /// </summary>
        [JsonProperty("min_sit_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinSitTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// This is the chance that the mob will start this goal, from 0 to 1
        /// Default: 0.1
        /// </summary>
        [JsonProperty("start_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartChance { get; set; }

        /// <summary>
        /// This is the chance that the mob will stop this goal, from 0 to 1
        /// Default: 0.3
        /// </summary>
        [JsonProperty("stop_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StopChance { get; set; }
    }

    /// <summary>
    /// Allows a mob to randomly stroll around.
    /// </summary>
    public partial class MinecraftBehaviorRandomStroll
    {
        /// <summary>
        /// A random value to determine when to randomly move somewhere. This has a 1/interval chance
        /// to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// Distance in blocks on ground that the mob will look for a new spot to move to. Must be at
        /// least 1
        /// Default: 10
        /// </summary>
        [JsonProperty("xz_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? XzDist { get; set; }

        /// <summary>
        /// Distance in blocks that the mob will look up or down for a new spot to move to. Must be
        /// at least 1
        /// Default: 7
        /// </summary>
        [JsonProperty("y_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? YDist { get; set; }
    }

    /// <summary>
    /// Allows an entity to randomly move through water
    /// </summary>
    public partial class MinecraftBehaviorRandomSwim
    {
        /// <summary>
        /// A random value to determine when to randomly move somewhere. This has a 1/interval chance
        /// to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// Distance in blocks on ground that the mob will look for a new spot to move to. Must be at
        /// least 1
        /// Default: 10
        /// </summary>
        [JsonProperty("xz_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? XzDist { get; set; }

        /// <summary>
        /// Distance in blocks that the mob will look up or down for a new spot to move to. Must be
        /// at least 1
        /// Default: 7
        /// </summary>
        [JsonProperty("y_dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? YDist { get; set; }
    }

    /// <summary>
    /// Allows the mob to use ranged attacks like shooting arrows.
    /// </summary>
    public partial class MinecraftBehaviorRangedAttack
    {
        /// <summary>
        /// Maximum amount of time in seconds the entity will wait after an attack before launching
        /// another
        /// Default: 0
        /// </summary>
        [JsonProperty("attack_interval_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackIntervalMax { get; set; }

        /// <summary>
        /// Minimum amount of time in seconds the entity will wait after an attack before launching
        /// another
        /// Default: 0
        /// </summary>
        [JsonProperty("attack_interval_min", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackIntervalMin { get; set; }

        /// <summary>
        /// Maximum distance the target can be for this mob to fire. If the target is further away,
        /// this mob will move first before firing
        /// Default: 0.0
        /// </summary>
        [JsonProperty("attack_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? AttackRadius { get; set; }

        /// <summary>
        /// Amount of time in seconds between each individual shot when firing multiple shots per
        /// attack
        /// Default: 0.0
        /// </summary>
        [JsonProperty("burst_interval", NullValueHandling = NullValueHandling.Ignore)]
        public double? BurstInterval { get; set; }

        /// <summary>
        /// Number of shots fired every time the mob uses a charged attack
        /// Default: 1
        /// </summary>
        [JsonProperty("burst_shots", NullValueHandling = NullValueHandling.Ignore)]
        public long? BurstShots { get; set; }

        /// <summary>
        /// The minimum amount of time in ticks the mob has to charge before firing a charged attack
        /// Default: 0.0
        /// </summary>
        [JsonProperty("charge_charged_trigger", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChargeChargedTrigger { get; set; }

        /// <summary>
        /// The minimum amount of time in ticks for the mob to start charging a charged shot. Must be
        /// greater than 0 to enable burst shots
        /// Default: 0.0
        /// </summary>
        [JsonProperty("charge_shoot_trigger", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChargeShootTrigger { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The allowable FOV the actor will use to determine if it can make a valid ranged attack
        /// Default: 90.0
        /// </summary>
        [JsonProperty("ranged_fov", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangedFov { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the villager to stop so another villager can breed with it. Can only be used by a
    /// Villager.
    /// </summary>
    public partial class MinecraftBehaviorReceiveLove
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to stay indoors during night time.
    /// </summary>
    public partial class MinecraftBehaviorRestrictOpenDoor
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to automatically start avoiding the sun when its a clear day out.
    /// </summary>
    public partial class MinecraftBehaviorRestrictSun
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// This allows the mob to roll forward.
    /// </summary>
    public partial class MinecraftBehaviorRoll
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability that the mob will use the goal.
        /// Default: [1.0]
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }
    }

    /// <summary>
    /// Allows the mob to run around aimlessly.
    /// </summary>
    public partial class MinecraftBehaviorRunAroundLikeCrazy
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the a mob to become scared when the weather outside is thundering
    /// </summary>
    public partial class MinecraftBehaviorScared
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The interval in which a sound will play when active in a 1/delay chance to kick off
        /// Default: 0
        /// </summary>
        [JsonProperty("sound_interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? SoundInterval { get; set; }
    }

    /// <summary>
    /// Allows the mob to send an event to another mob.
    /// </summary>
    public partial class MinecraftBehaviorSendEvent
    {
        /// <summary>
        /// Time in seconds for the entire event sending process
        /// Default: Total delay of the steps
        /// </summary>
        [JsonProperty("cast_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? CastDuration { get; set; }

        [JsonProperty("event_choices", NullValueHandling = NullValueHandling.Ignore)]
        public EventChoice[] EventChoices { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    public partial class EventChoice
    {
        [JsonProperty("cast_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? CastDuration { get; set; }

        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        [JsonProperty("max_activation_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxActivationRange { get; set; }

        [JsonProperty("min_activation_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinActivationRange { get; set; }

        /// <summary>
        /// HEX color code
        /// </summary>
        [JsonProperty("particle_color", NullValueHandling = NullValueHandling.Ignore)]
        public string ParticleColor { get; set; }

        /// <summary>
        /// List of events to send
        /// </summary>
        [JsonProperty("sequence", NullValueHandling = NullValueHandling.Ignore)]
        public EventChoiceSequence[] Sequence { get; set; }

        [JsonProperty("start_sound_event", NullValueHandling = NullValueHandling.Ignore)]
        public string StartSoundEvent { get; set; }

        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    }

    public partial class EventChoiceSequence
    {
        /// <summary>
        /// Amount of time in seconds before starting this step
        /// Default: 0.0
        /// </summary>
        [JsonProperty("base_delay", NullValueHandling = NullValueHandling.Ignore)]
        public double? BaseDelay { get; set; }

        /// <summary>
        /// The event to send to the entity
        /// </summary>
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        /// <summary>
        /// The sound event to play when this step happens
        /// </summary>
        [JsonProperty("sound_event", NullValueHandling = NullValueHandling.Ignore)]
        public string SoundEvent { get; set; }
    }

    /// <summary>
    /// Allows the mob to give items it has to others.
    /// </summary>
    public partial class MinecraftBehaviorShareItems
    {
        /// <summary>
        /// List of entities this mob will share items with
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Maximum distance in blocks this mob will look for entities to share items with
        /// Default: 0.0
        /// </summary>
        [JsonProperty("max_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDist { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to go into stone blocks like Silverfish do. Currently it can only be used
    /// by Silverfish.
    /// </summary>
    public partial class MinecraftBehaviorSilverfishMergeWithStone
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to alert mobs in nearby blocks to come out. Currently it can only be used
    /// by Silverfish.
    /// </summary>
    public partial class MinecraftBehaviorSilverfishWakeUpFriends
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows Equine mobs to be Horse Traps and be triggered like them, spawning a lightning
    /// bolt and a bunch of horses when a player is nearby. Can only be used by Horses, Mules,
    /// Donkeys and Skeleton Horses.
    /// </summary>
    public partial class MinecraftBehaviorSkeletonHorseTrap
    {
        /// <summary>
        /// Amount of time in seconds the trap exists. After this amount of time is elapsed, the trap
        /// is removed from the world if it hasn't been activated
        /// Default: 1.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Distance in blocks that the player has to be within to trigger the horse trap
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows mobs that own a bed to in a village to move to and sleep in it.
    /// </summary>
    public partial class MinecraftBehaviorSleep
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The height of the mob's collider while sleeping
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sleep_collider_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? SleepColliderHeight { get; set; }

        /// <summary>
        /// The width of the mob's collider while sleeping
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sleep_collider_width", NullValueHandling = NullValueHandling.Ignore)]
        public double? SleepColliderWidth { get; set; }

        /// <summary>
        /// The y offset of the mob's collider while sleeping
        /// Default: 1.0
        /// </summary>
        [JsonProperty("sleep_y_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double? SleepYOffset { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// The cooldown time in seconds before the goal can be reused after a internal failure or
        /// timeout condition
        /// Default: 8.0
        /// </summary>
        [JsonProperty("timeout_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? TimeoutCooldown { get; set; }
    }

    /// <summary>
    /// Can only be used by Slimes and Magma Cubes. Allows the mob to use a melee attack like the
    /// slime's.
    /// </summary>
    public partial class MinecraftBehaviorSlimeAttack
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Can only be used by Slimes and Magma Cubes. Controls their ability to float in water /
    /// lava.
    /// </summary>
    public partial class MinecraftBehaviorSlimeFloat
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Can only be used by Slimes and Magma Cubes. Allows the mob to continuously jump around
    /// like a slime.
    /// </summary>
    public partial class MinecraftBehaviorSlimeKeepOnJumping
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Can only be used by Slimes and Magma Cubes. Allows the mob to move in random directions
    /// like a slime.
    /// </summary>
    public partial class MinecraftBehaviorSlimeRandomDirection
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to take a load off and snack on food that it found nearby.
    /// </summary>
    public partial class MinecraftBehaviorSnacking
    {
        /// <summary>
        /// Items that we are interested in snacking on
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Items { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The cooldown time in seconds before the mob is able to snack again
        /// Default: 7.5
        /// </summary>
        [JsonProperty("snacking_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? SnackingCooldown { get; set; }

        /// <summary>
        /// The minimum time in seconds before the mob is able to snack again
        /// Default: 0.5f
        /// </summary>
        [JsonProperty("snacking_cooldown_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? SnackingCooldownMin { get; set; }

        /// <summary>
        /// This is the chance that the mob will stop snacking, from 0 to 1
        /// Default: 0.0017
        /// </summary>
        [JsonProperty("snacking_stop_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? SnackingStopChance { get; set; }
    }

    /// <summary>
    /// Allows the mob to stop and sneeze possibly startling nearby mobs and dropping an item.
    /// </summary>
    public partial class MinecraftBehaviorSneeze
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// The probability that the mob will drop an item when it sneezes.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("drop_item_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? DropItemChance { get; set; }

        /// <summary>
        /// List of entity types this mob will startle (cause to jump) when it sneezes.
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Loot table to select dropped items from.
        /// </summary>
        [JsonProperty("loot_table", NullValueHandling = NullValueHandling.Ignore)]
        public string LootTable { get; set; }

        /// <summary>
        /// Sound to play when the sneeze is about to happen.
        /// </summary>
        [JsonProperty("prepare_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string PrepareSound { get; set; }

        /// <summary>
        /// The time in seconds that the mob takes to prepare to sneeze (while the prepare_sound is
        /// playing).
        /// Default: 1.0
        /// </summary>
        [JsonProperty("prepare_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? PrepareTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The probability of sneezing. A value of 1.00 is 100%
        /// Default: 0.02
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }

        /// <summary>
        /// Sound to play when the sneeze occurs.
        /// </summary>
        [JsonProperty("sound", NullValueHandling = NullValueHandling.Ignore)]
        public string Sound { get; set; }

        /// <summary>
        /// Distance in blocks that mobs will be startled.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the squid to dive down in water. Can only be used by the Squid.
    /// </summary>
    public partial class MinecraftBehaviorSquidDive
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the squid to swim away. Can only be used by the Squid.
    /// </summary>
    public partial class MinecraftBehaviorSquidFlee
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the squid to swim in place idly. Can only be used by the Squid.
    /// </summary>
    public partial class MinecraftBehaviorSquidIdle
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the squid to move away from ground blocks and back to water. Can only be used by
    /// the Squid.
    /// </summary>
    public partial class MinecraftBehaviorSquidMoveAwayFromGround
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the squid to stick to the ground when outside water. Can only be used by the Squid.
    /// </summary>
    public partial class MinecraftBehaviorSquidOutOfWater
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows a mob to stalk a target, then once within range pounce onto a target, on success
    /// the target will be attacked dealing damage defined by the attack component. On failure,
    /// the mob will risk getting stuck
    /// </summary>
    public partial class MinecraftBehaviorStalkAndPounceOnTarget
    {
        /// <summary>
        /// The amount of time the mob will be interested before pouncing. This happens when the mob
        /// is within range of pouncing
        /// Default: 2.0
        /// </summary>
        [JsonProperty("interest_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? InterestTime { get; set; }

        /// <summary>
        /// The distance in blocks the mob jumps in the direction of its target
        /// Default: 0.8
        /// </summary>
        [JsonProperty("leap_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LeapDistance { get; set; }

        /// <summary>
        /// The height in blocks the mob jumps when leaping at its target
        /// Default: 0.9
        /// </summary>
        [JsonProperty("leap_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? LeapHeight { get; set; }

        /// <summary>
        /// The maximum distance away a target can be before the mob gives up on stalking
        /// Default: 10.0
        /// </summary>
        [JsonProperty("max_stalk_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxStalkDist { get; set; }

        /// <summary>
        /// The maximum distance away from the target in blocks to begin pouncing at the target
        /// Default: 5.0
        /// </summary>
        [JsonProperty("pounce_max_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? PounceMaxDist { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The movement speed in which you stalk your target
        /// Default: 1.2
        /// </summary>
        [JsonProperty("stalk_speed", NullValueHandling = NullValueHandling.Ignore)]
        public double? StalkSpeed { get; set; }

        /// <summary>
        /// The max distance away from the target when landing from the pounce that will still result
        /// in damaging the target
        /// Default: 2.0
        /// </summary>
        [JsonProperty("strike_dist", NullValueHandling = NullValueHandling.Ignore)]
        public double? StrikeDist { get; set; }

        /// <summary>
        /// The amount of time the mob will be stuck if they fail and land on a block they can be
        /// stuck on
        /// Default: 2.0
        /// </summary>
        [JsonProperty("stuck_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? StuckTime { get; set; }
    }

    /// <summary>
    /// Allows the mob to stay put while it is in a sitting state instead of doing something else.
    /// </summary>
    public partial class MinecraftBehaviorStayWhileSitting
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to use the polar bear's melee attack.
    /// </summary>
    public partial class MinecraftBehaviorStompAttack
    {
        /// <summary>
        /// If true, this mob will attack only one time.
        /// Default: false
        /// </summary>
        [JsonProperty("attack_once", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AttackOnce { get; set; }

        /// <summary>
        /// Defines the entity types this mob will attack
        /// </summary>
        [JsonProperty("attack_types", NullValueHandling = NullValueHandling.Ignore)]
        public string AttackTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Defines the probability the mob will stop fighting. A value of 0 disables randomly
        /// stopping, while a value of 1 defines a 50% chance
        /// Default: 0
        /// </summary>
        [JsonProperty("random_stop_interval", NullValueHandling = NullValueHandling.Ignore)]
        public double? RandomStopInterval { get; set; }

        /// <summary>
        /// Multiplier for how far outside its box the mob can reach its target (this can be used to
        /// simulate a mob with longer arms by making this bigger)
        /// Default: 2.0
        /// </summary>
        [JsonProperty("reach_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? ReachMultiplier { get; set; }

        /// <summary>
        /// If true, this goal will only trigger if the mob can reach its target.
        /// Default: false
        /// </summary>
        [JsonProperty("require_complete_path", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequireCompletePath { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// If true, this mob will chase after the target as long as it's a valid target
        /// Default: false
        /// </summary>
        [JsonProperty("track_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TrackTarget { get; set; }
    }

    /// <summary>
    /// Allows this mob to stomp turtle eggs
    /// </summary>
    public partial class MinecraftBehaviorStompTurtleEgg
    {
        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// A random value to determine when to randomly move somewhere. This has a 1/interval chance
        /// to choose this goal
        /// Default: 120
        /// </summary>
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public long? Interval { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The number of blocks each tick that the mob will check within it's search range and
        /// height for a valid block to move to. A value of 0 will have the mob check every block
        /// within range in one tick
        /// Default: 10
        /// </summary>
        [JsonProperty("search_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchCount { get; set; }

        /// <summary>
        /// Height in blocks the mob will look for turtle eggs to move towards
        /// Default: 1
        /// </summary>
        [JsonProperty("search_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchHeight { get; set; }

        /// <summary>
        /// The distance in blocks it will look for turtle eggs to move towards
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to move into a random location within a village within the search range.
    /// </summary>
    public partial class MinecraftBehaviorStrollTowardsVillage
    {
        /// <summary>
        /// Time in seconds the mob has to wait before using the goal again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// Distance in blocks within the mob considers it has reached the goal. This is the "wiggle
        /// room" to stop the AI from bouncing back and forth trying to reach a specific spot
        /// Default: 0.5
        /// </summary>
        [JsonProperty("goal_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalRadius { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The distance in blocks to search for points inside villages. If <= 0, find the closest
        /// village regardless of distance.
        /// Default: 0
        /// </summary>
        [JsonProperty("search_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? SearchRange { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// This is the chance that the mob will start this goal, from 0 to 1
        /// Default: 0.1
        /// </summary>
        [JsonProperty("start_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartChance { get; set; }
    }

    /// <summary>
    /// Allows the mob to attack the player by summoning other entities.
    /// </summary>
    public partial class MinecraftBehaviorSummonEntity
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// List of spells for the mob to use to summon entities. Each spell has the following
        /// parameters:
        /// </summary>
        [JsonProperty("summon_choices", NullValueHandling = NullValueHandling.Ignore)]
        public SummonChoice[] SummonChoices { get; set; }
    }

    public partial class SummonChoice
    {
        /// <summary>
        /// Time in seconds the spell casting will take
        /// Default: Total delay of the steps
        /// </summary>
        [JsonProperty("cast_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? CastDuration { get; set; }

        /// <summary>
        /// Time in seconds the mob has to wait before using the spell again
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CooldownTime { get; set; }

        /// <summary>
        /// If true, the mob will do the casting animations and render spell particles
        /// Default: true
        /// </summary>
        [JsonProperty("do_casting", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DoCasting { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// Upper bound of the activation distance in blocks for this spell
        /// Default: -1.0
        /// </summary>
        [JsonProperty("max_activation_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxActivationRange { get; set; }

        /// <summary>
        /// Lower bound of the activation distance in blocks for this spell
        /// Default: 1.0
        /// </summary>
        [JsonProperty("min_activation_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinActivationRange { get; set; }

        /// <summary>
        /// The color of the particles for this spell
        /// </summary>
        [JsonProperty("particle_color", NullValueHandling = NullValueHandling.Ignore)]
        public string ParticleColor { get; set; }

        /// <summary>
        /// List of steps for the spell. Each step has the following parameters:
        /// </summary>
        [JsonProperty("sequence", NullValueHandling = NullValueHandling.Ignore)]
        public SummonChoiceSequence[] Sequence { get; set; }

        /// <summary>
        /// The sound event to play when using this spell
        /// </summary>
        [JsonProperty("start_sound_event", NullValueHandling = NullValueHandling.Ignore)]
        public string StartSoundEvent { get; set; }

        /// <summary>
        /// The weight of this spell. Controls how likely the mob is to choose this spell when
        /// casting one
        /// Default: 0.0
        /// </summary>
        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    }

    public partial class SummonChoiceSequence
    {
        /// <summary>
        /// Amount of time in seconds to wait before this step starts
        /// Default: 0.0
        /// </summary>
        [JsonProperty("base_delay", NullValueHandling = NullValueHandling.Ignore)]
        public double? BaseDelay { get; set; }

        /// <summary>
        /// Amount of time in seconds before each entity is summoned in this step
        /// Default: 0.0
        /// </summary>
        [JsonProperty("delay_per_summon", NullValueHandling = NullValueHandling.Ignore)]
        public double? DelayPerSummon { get; set; }

        /// <summary>
        /// Amount of time in seconds that the spawned entity will be alive for. A value of -1.0
        /// means it will remain alive for as long as it can
        /// Default: -1.0
        /// </summary>
        [JsonProperty("entity_lifespan", NullValueHandling = NullValueHandling.Ignore)]
        public double? EntityLifespan { get; set; }

        /// <summary>
        /// The entity type of the entities we will spawn in this step
        /// </summary>
        [JsonProperty("entity_type", NullValueHandling = NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// Number of entities that will be spawned in this step
        /// Default: 1
        /// </summary>
        [JsonProperty("num_entities_spawned", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumEntitiesSpawned { get; set; }

        /// <summary>
        /// The base shape of this step. Valid values are circle and line
        /// Default: line
        /// </summary>
        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public Shape? Shape { get; set; }

        /// <summary>
        /// The base size of the entity
        /// Default: 1.0
        /// </summary>
        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public double? Size { get; set; }

        /// <summary>
        /// The sound event to play for this step
        /// </summary>
        [JsonProperty("sound_event", NullValueHandling = NullValueHandling.Ignore)]
        public string SoundEvent { get; set; }

        /// <summary>
        /// Maximum number of summoned entities at any given time
        /// Default: 0
        /// </summary>
        [JsonProperty("summon_cap", NullValueHandling = NullValueHandling.Ignore)]
        public long? SummonCap { get; set; }

        [JsonProperty("summon_cap_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? SummonCapRadius { get; set; }

        /// <summary>
        /// The target of the spell. This is where the spell will start (line will start here, circle
        /// will be centered here)
        /// Default: self
        /// </summary>
        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public string Target { get; set; }
    }

    /// <summary>
    /// Allows the creeper to swell up when a player is nearby. It can only be used by Creepers.
    /// </summary>
    public partial class MinecraftBehaviorSwell
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// This mob starts swelling when a target is at least this many blocks away
        /// Default: 10.0
        /// </summary>
        [JsonProperty("start_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartDistance { get; set; }

        /// <summary>
        /// This mob stops swelling when a target has moved away at least this many blocks
        /// Default: 2.0
        /// </summary>
        [JsonProperty("stop_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? StopDistance { get; set; }
    }

    /// <summary>
    /// Has the fish swim around when they can't pathfind
    /// </summary>
    public partial class MinecraftBehaviorSwimWander
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// speed of the entity
        /// Default: 10
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Allows the mob to move to attack a target. The goal ends if it has a horizontal collision
    /// or gets hit. Built to be used with flying mobs.
    /// </summary>
    public partial class MinecraftBehaviorSwoopAttack
    {
        /// <summary>
        /// Range of time in seconds between uses of this goal.
        /// Default: [10.0, 20.0]
        /// </summary>
        [JsonProperty("delay_range", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? DelayRange { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    /// <summary>
    /// Can only be used by Villagers. Allows the mob to accept flowers from Iron Golems.
    /// </summary>
    public partial class MinecraftBehaviorTakeFlower
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to be tempted by food they like.
    /// </summary>
    public partial class MinecraftBehaviorTempt
    {
        /// <summary>
        /// If true, the mob can stop being tempted if the player moves too fast while close to this
        /// mob
        /// Default: false
        /// </summary>
        [JsonProperty("can_get_scared", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanGetScared { get; set; }

        /// <summary>
        /// If true, the mob will try to follow the player when being tempted, even if the mob is
        /// right above or below the player
        /// Default: false
        /// </summary>
        [JsonProperty("can_tempt_vertically", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanTemptVertically { get; set; }

        /// <summary>
        /// List of items this mob is tempted by
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Items { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// Distance in blocks this mob can get tempted by a player holding an item they like
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the mob to look at a player that is holding a tradable item.
    /// </summary>
    public partial class MinecraftBehaviorTradeInterest
    {
        /// <summary>
        /// The max time in seconds that the trader will hold an item before attempting to switch for
        /// a different item that takes the same trade
        /// Default: 2.0
        /// </summary>
        [JsonProperty("carried_item_switch_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CarriedItemSwitchTime { get; set; }

        /// <summary>
        /// The time in seconds before the trader can use this goal again
        /// Default: 2.0
        /// </summary>
        [JsonProperty("cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cooldown { get; set; }

        /// <summary>
        /// The max time in seconds that the trader will be interested with showing it's trade items
        /// Default: 45.0
        /// </summary>
        [JsonProperty("interest_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? InterestTime { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The max time in seconds that the trader will wait when you no longer have items to trade
        /// Default: 1.0
        /// </summary>
        [JsonProperty("remove_item_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? RemoveItemTime { get; set; }

        /// <summary>
        /// Distance in blocks this mob can be interested by a player holding an item they like
        /// Default: 0.0
        /// </summary>
        [JsonProperty("within_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? WithinRadius { get; set; }
    }

    /// <summary>
    /// Allows the player to trade with this mob.
    /// </summary>
    public partial class MinecraftBehaviorTradeWithPlayer
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to target the same entity its owner is targeting.
    /// </summary>
    public partial class MinecraftBehaviorVexCopyOwnerTarget
    {
        /// <summary>
        /// List of entities this mob can copy the owner from
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the mob to move around randomly like the Vex.
    /// </summary>
    public partial class MinecraftBehaviorVexRandomMove
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the wither to launch random attacks. Can only be used by the Wither Boss.
    /// </summary>
    public partial class MinecraftBehaviorWitherRandomAttackPosGoal
    {
        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// Allows the wither to focus its attacks on whichever mob has dealt the most damage to it.
    /// </summary>
    public partial class MinecraftBehaviorWitherTargetHighestDamage
    {
        /// <summary>
        /// List of entity types the wither takes into account to find who dealt the most damage to it
        /// </summary>
        [JsonProperty("entity_types", NullValueHandling = NullValueHandling.Ignore)]
        public EntityTypesUnion? EntityTypes { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }
    }

    /// <summary>
    /// allows the NPC to use their jobsite POI
    /// </summary>
    public partial class MinecraftBehaviorWork
    {
        /// <summary>
        /// The amount of ticks the NPC will stay in their the work location
        /// Default: 0
        /// </summary>
        [JsonProperty("active_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? ActiveTime { get; set; }

        /// <summary>
        /// If true, this entity can work when their jobsite POI is being rained on.
        /// Default: false
        /// </summary>
        [JsonProperty("can_work_in_rain", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanWorkInRain { get; set; }

        /// <summary>
        /// The amount of ticks the goal will be on cooldown before it can be used again
        /// Default: 0
        /// </summary>
        [JsonProperty("goal_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public long? GoalCooldown { get; set; }

        /// <summary>
        /// Event to run when the mob reaches their jobsite and finishes working.
        /// </summary>
        [JsonProperty("on_arrival", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnArrival { get; set; }

        /// <summary>
        /// Priority of behavior. 0 being the highest priority level
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// The max interval in which a sound will play
        /// Default: 0
        /// </summary>
        [JsonProperty("sound_delay_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? SoundDelayMax { get; set; }

        /// <summary>
        /// The min interval in which a sound will play
        /// Default: 0
        /// </summary>
        [JsonProperty("sound_delay_min", NullValueHandling = NullValueHandling.Ignore)]
        public long? SoundDelayMin { get; set; }

        /// <summary>
        /// Movement speed multiplier of the mob when using this AI Goal
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }

        /// <summary>
        /// If "can_work_in_rain" is false, this is the maximum number of ticks left in the goal
        /// where rain will not interrupt the goal
        /// Default: -1
        /// </summary>
        [JsonProperty("work_in_rain_tolerance", NullValueHandling = NullValueHandling.Ignore)]
        public long? WorkInRainTolerance { get; set; }
    }

    /// <summary>
    /// Fires off a specified event when a block in the block list is broken within the sensor
    /// range.
    /// </summary>
    public partial class MinecraftBlockSensor
    {
        /// <summary>
        /// sensor_radius
        /// </summary>
        [JsonProperty("Decimal")]
        public object Decimal { get; set; }

        /// <summary>
        /// on_break
        /// </summary>
        [JsonProperty("List")]
        public object List { get; set; }
    }

    /// <summary>
    /// Defines the conditions and behavior of a rideable entity's boost.
    /// </summary>
    public partial class MinecraftBoostable
    {
        /// <summary>
        /// List of items that can be used to boost while riding this entity. Each item has the
        /// following properties:
        /// </summary>
        [JsonProperty("boost_items", NullValueHandling = NullValueHandling.Ignore)]
        public BoostItem[] BoostItems { get; set; }

        /// <summary>
        /// Time in seconds for the boost.
        /// Default: 3.0
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// Factor by which the entity's normal speed increases. E.g. 2.0 means go twice as fast.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("speed_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedMultiplier { get; set; }
    }

    public partial class BoostItem
    {
        /// <summary>
        /// This is the damage that the item will take each time it is used.
        /// Default: 1
        /// </summary>
        [JsonProperty("damage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Damage { get; set; }

        /// <summary>
        /// Name of the item that can be used to boost.
        /// </summary>
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// The item used to boost will become this item once it is used up.
        /// </summary>
        [JsonProperty("replace_item", NullValueHandling = NullValueHandling.Ignore)]
        public string ReplaceItem { get; set; }
    }

    /// <summary>
    /// The current state of the boss for updating the boss HUD.
    /// </summary>
    public partial class MinecraftBoss
    {
        /// <summary>
        /// The max distance from the boss at which the boss's health bar is present on the players
        /// screen.
        /// Default: 55
        /// </summary>
        [JsonProperty("hud_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? HudRange { get; set; }

        /// <summary>
        /// The name that will be displayed above the boss's health bar.
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the sky should darken in the presence of the boss.
        /// Default: false
        /// </summary>
        [JsonProperty("should_darken_sky", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShouldDarkenSky { get; set; }
    }

    /// <summary>
    /// Specifies the blocks that this entity can break as it moves around.
    /// </summary>
    public partial class MinecraftBreakBlocks
    {
        /// <summary>
        /// A list of the blocks that can be broken as this entity moves around
        /// </summary>
        [JsonProperty("breakable_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public object[] BreakableBlocks { get; set; }
    }

    /// <summary>
    /// Defines what blocks this entity can breathe in and gives them the ability to suffocate.
    /// </summary>
    public partial class MinecraftBreathable
    {
        /// <summary>
        /// List of blocks this entity can breathe in, in addition to the above.
        /// </summary>
        [JsonProperty("breathe_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public object[] BreatheBlocks { get; set; }

        /// <summary>
        /// If true, this entity can breathe in air.
        /// Default: true
        /// </summary>
        [JsonProperty("breathes_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BreathesAir { get; set; }

        /// <summary>
        /// If true, this entity can breathe in lava.
        /// Default: false
        /// </summary>
        [JsonProperty("breathes_lava", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BreathesLava { get; set; }

        /// <summary>
        /// If true, this entity can breathe in solid blocks.
        /// Default: false
        /// </summary>
        [JsonProperty("breathes_solids", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BreathesSolids { get; set; }

        /// <summary>
        /// If true, this entity can breathe in water.
        /// Default: false
        /// </summary>
        [JsonProperty("breathes_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BreathesWater { get; set; }

        /// <summary>
        /// If true, this entity will have visible bubbles while in water.
        /// Default: true
        /// </summary>
        [JsonProperty("generates_bubbles", NullValueHandling = NullValueHandling.Ignore)]
        public bool? GeneratesBubbles { get; set; }

        /// <summary>
        /// Time in seconds to recover breath to maximum.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("inhale_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? InhaleTime { get; set; }

        /// <summary>
        /// List of blocks this entity can't breathe in, in addition to the above.
        /// </summary>
        [JsonProperty("non_breathe_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public object[] NonBreatheBlocks { get; set; }

        /// <summary>
        /// Time in seconds between suffocation damage.
        /// Default: -20
        /// </summary>
        [JsonProperty("suffocate_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? SuffocateTime { get; set; }

        /// <summary>
        /// Time in seconds the entity can hold its breath.
        /// Default: 15
        /// </summary>
        [JsonProperty("total_supply", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalSupply { get; set; }
    }

    /// <summary>
    /// Defines the way an entity can get into the 'love' state.
    /// </summary>
    public partial class MinecraftBreedable
    {
        /// <summary>
        /// If true, entities can breed while sitting
        /// Default: false
        /// </summary>
        [JsonProperty("allow_sitting", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowSitting { get; set; }

        /// <summary>
        /// If true, the entities will blend their attributes in the offspring after they breed. For
        /// example, horses blend their health, movement, and jump_strength in their offspring.
        /// Default: true
        /// </summary>
        [JsonProperty("blend_attributes", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BlendAttributes { get; set; }

        /// <summary>
        /// Time in seconds before the Entity can breed again.
        /// Default: 60.0
        /// </summary>
        [JsonProperty("breed_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? BreedCooldown { get; set; }

        /// <summary>
        /// The list of items that can be used to get the entity into the 'love' state
        /// </summary>
        [JsonProperty("breed_items", NullValueHandling = NullValueHandling.Ignore)]
        public MinglePartnerType? BreedItems { get; set; }

        /// <summary>
        /// The list of entity definitions that this entity can breed with.
        /// </summary>
        [JsonProperty("breeds_with", NullValueHandling = NullValueHandling.Ignore)]
        public BreedsWithUnion? BreedsWith { get; set; }

        /// <summary>
        /// If true, the entity will become pregnant instead of spawning a baby.
        /// Default: false
        /// </summary>
        [JsonProperty("causes_pregnancy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CausesPregnancy { get; set; }

        /// <summary>
        /// Determines how likely the baby of parents with the same variant will deny that variant
        /// and take a random variant within the given range instead.
        /// </summary>
        [JsonProperty("deny_parents_variant", NullValueHandling = NullValueHandling.Ignore)]
        public DenyParentsVariant DenyParentsVariant { get; set; }

        /// <summary>
        /// The list of nearby block requirements to get the entity into the 'love' state.
        /// BlueFrog's Notes: Docs state 'list', but only example shows object
        /// </summary>
        [JsonProperty("environment_requirements", NullValueHandling = NullValueHandling.Ignore)]
        public EnvironmentRequirementsUnion? EnvironmentRequirements { get; set; }

        /// <summary>
        /// Chance that up to 16 babies will spawn between 0.0 and 1.0, where 1.0 is 100%.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("extra_baby_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? ExtraBabyChance { get; set; }

        /// <summary>
        /// If true, the babies will be automatically tamed if its parents are
        /// Default: true
        /// </summary>
        [JsonProperty("inherit_tamed", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InheritTamed { get; set; }

        /// <summary>
        /// The filters to run when attempting to fall in love.
        /// </summary>
        [JsonProperty("love_filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? LoveFilters { get; set; }

        /// <summary>
        /// Determines how likely the babies are to NOT inherit one of their parent's variances.
        /// Values are between 0.0 and 1.0, with a higher number meaning more likely to mutate.
        /// </summary>
        [JsonProperty("mutation_factor", NullValueHandling = NullValueHandling.Ignore)]
        public MutationFactor MutationFactor { get; set; }

        /// <summary>
        /// If true, the entities need to be tamed first before they can breed.
        /// Default: true
        /// </summary>
        [JsonProperty("require_tame", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequireTame { get; set; }
    }

    public partial class BreedsWith
    {
        /// <summary>
        /// The entity definition of this entity's babies.
        /// </summary>
        [JsonProperty("baby_type", NullValueHandling = NullValueHandling.Ignore)]
        public string BabyType { get; set; }

        /// <summary>
        /// Event to run when this entity breeds.
        /// </summary>
        [JsonProperty("breed_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent BreedEvent { get; set; }

        /// <summary>
        /// The entity definition of this entity's mate.
        /// </summary>
        [JsonProperty("mate_type", NullValueHandling = NullValueHandling.Ignore)]
        public string MateType { get; set; }
    }

    /// <summary>
    /// Determines how likely the baby of parents with the same variant will deny that variant
    /// and take a random variant within the given range instead.
    /// </summary>
    public partial class DenyParentsVariant
    {
        /// <summary>
        /// The percentage chance of denying the parents' variant.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? Chance { get; set; }

        /// <summary>
        /// The inclusive maximum of the variant range.
        /// Default: 0
        /// </summary>
        [JsonProperty("max_variant", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxVariant { get; set; }

        /// <summary>
        /// The inclusive minimum of the variant range.
        /// Default: 0
        /// </summary>
        [JsonProperty("min_variant", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinVariant { get; set; }
    }

    public partial class EnvironmentRequirements
    {
        /// <summary>
        /// The block types required nearby for the entity to breed.
        /// </summary>
        [JsonProperty("blocks", NullValueHandling = NullValueHandling.Ignore)]
        public MinglePartnerType? Blocks { get; set; }

        /// <summary>
        /// The number of the required block types nearby for the entity to breed.
        /// </summary>
        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// How many blocks radius from the mob's center to search in for the required blocks.
        /// Bounded between 0 and 16.
        /// </summary>
        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double? Radius { get; set; }
    }

    /// <summary>
    /// Determines how likely the babies are to NOT inherit one of their parent's variances.
    /// Values are between 0.0 and 1.0, with a higher number meaning more likely to mutate.
    /// </summary>
    public partial class MutationFactor
    {
        /// <summary>
        /// The percentage chance of a mutation on the entity's color.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public double? Color { get; set; }

        /// <summary>
        /// The percentage chance of a mutation on the entity's extra variant type.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("extra_variant", NullValueHandling = NullValueHandling.Ignore)]
        public double? ExtraVariant { get; set; }

        /// <summary>
        /// The percentage chance of a mutation on the entity's variant type.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("variant", NullValueHandling = NullValueHandling.Ignore)]
        public double? Variant { get; set; }
    }

    /// <summary>
    /// Defines the way an entity can get into the 'bribed' state.
    /// </summary>
    public partial class MinecraftBribeable
    {
        /// <summary>
        /// Time in seconds before the Entity can be bribed again.
        /// Default: 2.0
        /// </summary>
        [JsonProperty("bribe_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? BribeCooldown { get; set; }

        /// <summary>
        /// The list of items that can be used to bribe the entity.
        /// </summary>
        [JsonProperty("bribe_items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] BribeItems { get; set; }
    }

    /// <summary>
    /// Sets the width and height of the Entity's collision box.
    /// </summary>
    public partial class MinecraftCollisionBox
    {
        /// <summary>
        /// Height of the collision box in blocks. A negative value will be assumed to be 0
        /// Default: 1.0
        /// </summary>
        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        /// <summary>
        /// Width and Depth of the collision box in blocks. A negative value will be assumed to be 0
        /// Default: 1.0
        /// </summary>
        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public double? Width { get; set; }
    }

    /// <summary>
    /// Defines the entity's color. Only works on vanilla entities that have predefined color
    /// values (sheep, llama, shulker).
    /// </summary>
    public partial class MinecraftColor
    {
        /// <summary>
        /// The Palette Color value of the entity
        /// Default: 0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    /// <summary>
    /// Defines the entity's second texture color. Only works on vanilla entities that have a
    /// second predefined color values (tropical fish).
    /// </summary>
    public partial class MinecraftColor2
    {
        /// <summary>
        /// The second Palette Color value of the entity
        /// Default: 0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    /// <summary>
    /// Applies defined amount of damage to the entity at specified intervals.
    /// </summary>
    public partial class MinecraftDamageOverTime
    {
        /// <summary>
        /// Amount of damage caused each hurt.
        /// Default: 1
        /// </summary>
        [JsonProperty("damage_per_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public long? DamagePerHurt { get; set; }

        /// <summary>
        /// Time in seconds between damage.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("time_between_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public double? TimeBetweenHurt { get; set; }
    }

    /// <summary>
    /// Defines what events to call when this entity is damaged by specific entities or items.
    /// </summary>
    public partial class MinecraftDamageSensor
    {
        /// <summary>
        /// List of triggers with the events to call when taking specific kinds of damage.
        /// </summary>
        [JsonProperty("triggers", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftDamageSensorTriggers? Triggers { get; set; }
    }

    public partial class DamageSensor
    {
        /// <summary>
        /// Type of damage that triggers the events.
        /// Default: none
        /// </summary>
        [JsonProperty("cause", NullValueHandling = NullValueHandling.Ignore)]
        public string Cause { get; set; }

        /// <summary>
        /// A multiplier that modifies the base damage from the damage cause. If deals_damage is true
        /// the multiplier can only reduce the damage the entity will take to a minimum of 1.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("damage_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? DamageMultiplier { get; set; }

        /// <summary>
        /// If true, the damage dealt to the entity will take away health from it, set to false to
        /// make the entity ignore that damage.
        /// Default: true
        /// </summary>
        [JsonProperty("deals_damage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DealsDamage { get; set; }

        /// <summary>
        /// Specifies filters for entity definitions and events.
        /// </summary>
        [JsonProperty("on_damage", NullValueHandling = NullValueHandling.Ignore)]
        public OnDamage OnDamage { get; set; }

        /// <summary>
        /// Defines what sound to play, if any, when the on_damage filters are met.
        /// </summary>
        [JsonProperty("on_damage_sound_event", NullValueHandling = NullValueHandling.Ignore)]
        public string OnDamageSoundEvent { get; set; }
    }

    /// <summary>
    /// Specifies filters for entity definitions and events.
    /// </summary>
    public partial class OnDamage
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }
    }

    /// <summary>
    /// Sets this entity's default head rotation angle.
    /// </summary>
    public partial class MinecraftDefaultLookAngle
    {
        /// <summary>
        /// Angle in degrees
        /// Default: 0.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Despawns the associated Actor immediately or when the optional filter evaluates to true.
    /// </summary>
    public partial class MinecraftDespawn
    {
        /// <summary>
        /// The list of conditions that must be satisfied before the Actor is despawned
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// If true, all entities linked to this entity in a child relationship (eg. leashed) will
        /// also be despawned
        /// Default: false
        /// </summary>
        [JsonProperty("remove_child_entities", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RemoveChildEntities { get; set; }
    }

    /// <summary>
    /// Defines this entity's ability to trade with players.
    /// </summary>
    public partial class MinecraftEconomyTradeTable
    {
        /// <summary>
        /// Determines when the mob transforms, if the trades should be converted when the new mob
        /// has a economy_trade_table. When the trades are converted, the mob will generate a new
        /// trade list with their new trade table, but then it will try to convert any of the same
        /// trades over to have the same enchantments and user data. For example, if the original has
        /// a Emerald to Enchanted Iron Sword (Sharpness 1), and the new trade also has an Emerald
        /// for Enchanted Iron Sword, then the enchantment will be Sharpness 1.
        /// Default: false
        /// </summary>
        [JsonProperty("convert_trades_economy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ConvertTradesEconomy { get; set; }

        /// <summary>
        /// Name to be displayed while trading with this entity
        /// </summary>
        [JsonProperty("display_name", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// How much should Demand be modified by when the player has the Hero of the Village mob
        /// effect
        /// Default: -4
        /// </summary>
        [JsonProperty("hero_demand_discount", NullValueHandling = NullValueHandling.Ignore)]
        public long? HeroDemandDiscount { get; set; }

        /// <summary>
        /// Used to determine if trading with entity opens the new trade screen
        /// Default: false
        /// </summary>
        [JsonProperty("new_screen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NewScreen { get; set; }

        /// <summary>
        /// Determines if the trades should persist when the mob transforms. This makes it so that
        /// the next time the mob is transformed to something with a trade_table or
        /// economy_trade_table, then it keeps their trades.
        /// Default: false
        /// </summary>
        [JsonProperty("persist_trades", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PersistTrades { get; set; }

        /// <summary>
        /// File path relative to the resource pack root for this entity's trades
        /// </summary>
        [JsonProperty("table", NullValueHandling = NullValueHandling.Ignore)]
        public string Table { get; set; }
    }

    /// <summary>
    /// A component that fires an event when a set of conditions are met by other entities within
    /// the defined range.
    /// </summary>
    public partial class MinecraftEntitySensor
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        [JsonProperty("event_filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? EventFilters { get; set; }

        /// <summary>
        /// The maximum number of entities that must pass the filter conditions for the event to
        /// send.
        /// Default: -1
        /// </summary>
        [JsonProperty("maximum_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaximumCount { get; set; }

        /// <summary>
        /// The minimum number of entities that must pass the filter conditions for the event to
        /// send.
        /// Default: 1
        /// </summary>
        [JsonProperty("minimum_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinimumCount { get; set; }

        /// <summary>
        /// If true requires all nearby entities to pass the filter conditions for the event to send.
        /// Default: false
        /// </summary>
        [JsonProperty("require_all", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequireAll { get; set; }

        [JsonProperty("sensor_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? SensorRange { get; set; }
    }

    /// <summary>
    /// Creates a trigger based on environment conditions.
    /// </summary>
    public partial class MinecraftEnvironmentSensor
    {
        /// <summary>
        /// The list of triggers that fire when the environment conditions match the given filter
        /// criteria.
        /// </summary>
        [JsonProperty("triggers", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftEnvironmentSensorTriggers? Triggers { get; set; }
    }

    public partial class EnvironmentSensor
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }
    }

    /// <summary>
    /// Sets the Equipment table to use for this Entity.
    /// </summary>
    public partial class MinecraftEquipment
    {
        /// <summary>
        /// A list of slots with the chance to drop an equipped item from that slot
        /// </summary>
        [JsonProperty("slot_drop_chance", NullValueHandling = NullValueHandling.Ignore)]
        public SlotDropChance[] SlotDropChance { get; set; }

        /// <summary>
        /// The file path to the equipment table, relative to the behavior pack's root
        /// </summary>
        [JsonProperty("table", NullValueHandling = NullValueHandling.Ignore)]
        public string Table { get; set; }
    }

    public partial class SlotDropChance
    {
        [JsonProperty("drop_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? DropChance { get; set; }

        [JsonProperty("slot", NullValueHandling = NullValueHandling.Ignore)]
        public SlotEnum? Slot { get; set; }
    }

    /// <summary>
    /// Defines an entity's behavior for having items equipped to it.
    /// </summary>
    public partial class MinecraftEquippable
    {
        /// <summary>
        /// List of slots and the item that can be equipped.
        /// </summary>
        [JsonProperty("slots", NullValueHandling = NullValueHandling.Ignore)]
        public SlotElement[] Slots { get; set; }
    }

    public partial class SlotElement
    {
        /// <summary>
        /// The list of items that can go in this slot.
        /// </summary>
        [JsonProperty("accepted_items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] AcceptedItems { get; set; }

        /// <summary>
        /// Text to be displayed when the entity can be equipped with this item when playing with
        /// Touch-screen controls.
        /// </summary>
        [JsonProperty("interact_text", NullValueHandling = NullValueHandling.Ignore)]
        public string InteractText { get; set; }

        /// <summary>
        /// Identifier of the item that can be equipped for this slot.
        /// </summary>
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Event to trigger when this entity is equipped with this item.
        /// </summary>
        [JsonProperty("on_equip", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnEquip { get; set; }

        /// <summary>
        /// Event to trigger when this item is removed from this entity.
        /// </summary>
        [JsonProperty("on_unequip", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnUnequip { get; set; }

        /// <summary>
        /// The slot number of this slot.
        /// Default: 0
        /// </summary>
        [JsonProperty("slot", NullValueHandling = NullValueHandling.Ignore)]
        public long? Slot { get; set; }
    }

    /// <summary>
    /// .
    /// </summary>
    public partial class MinecraftExperienceReward
    {
        /// <summary>
        /// A molang expression defining the amount of experience rewarded when this entity is
        /// successfully bred. An array of expressions adds each expression's result together for a
        /// final total.
        /// Default: 0
        /// </summary>
        [JsonProperty("on_bred", NullValueHandling = NullValueHandling.Ignore)]
        public string OnBred { get; set; }

        /// <summary>
        /// A molang expression defining the amount of experience rewarded when this entity dies. An
        /// array of expressions adds each expression's result together for a final total.
        /// Default: 0
        /// </summary>
        [JsonProperty("on_death", NullValueHandling = NullValueHandling.Ignore)]
        public string OnDeath { get; set; }
    }

    /// <summary>
    /// Defines how the entity explodes.
    /// </summary>
    public partial class MinecraftExplode
    {
        /// <summary>
        /// If true, the explosion will destroy blocks in the explosion radius.
        /// Default: true
        /// </summary>
        [JsonProperty("breaks_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BreaksBlocks { get; set; }

        /// <summary>
        /// If true, blocks in the explosion radius will be set on fire.
        /// Default: false
        /// </summary>
        [JsonProperty("causes_fire", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CausesFire { get; set; }

        /// <summary>
        /// If true, whether the explosion breaks blocks is affected by the mob griefing game rule.
        /// Default: false
        /// </summary>
        [JsonProperty("destroy_affected_by_griefing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DestroyAffectedByGriefing { get; set; }

        /// <summary>
        /// If true, whether the explosion causes fire is affected by the mob griefing game rule.
        /// Default: false
        /// </summary>
        [JsonProperty("fire_affected_by_griefing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FireAffectedByGriefing { get; set; }

        /// <summary>
        /// The range for the random amount of time the fuse will be lit before exploding, a negative
        /// value means the explosion will be immediate.
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("fuse_length", NullValueHandling = NullValueHandling.Ignore)]
        public FuseLengthUnion? FuseLength { get; set; }

        /// <summary>
        /// If true, the fuse is already lit when this component is added to the entity.
        /// Default: false
        /// </summary>
        [JsonProperty("fuse_lit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FuseLit { get; set; }

        /// <summary>
        /// A blocks explosion resistance will be capped at this value when an explosion occurs.
        /// Default: Infinite
        /// </summary>
        [JsonProperty("max_resistance", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxResistance { get; set; }

        /// <summary>
        /// The radius of the explosion in blocks and the amount of damage the explosion deals.
        /// Default: 3.0
        /// </summary>
        [JsonProperty("power", NullValueHandling = NullValueHandling.Ignore)]
        public double? Power { get; set; }
    }

    public partial class FuseLengthClass
    {
        /// <summary>
        /// Maximum time
        /// </summary>
        [JsonProperty("range_max", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMax { get; set; }

        /// <summary>
        /// Minimum time
        /// </summary>
        [JsonProperty("range_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMin { get; set; }
    }

    public partial class MinecraftFireImmuneClass
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Value { get; set; }
    }

    /// <summary>
    /// Allows entities to flock in groups in water or not.
    /// </summary>
    public partial class MinecraftFlocking
    {
        /// <summary>
        /// The amount of blocks away the entity will look at to push away from.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("block_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockDistance { get; set; }

        /// <summary>
        /// The weight of the push back away from blocks.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("block_weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockWeight { get; set; }

        /// <summary>
        /// The amount of push back given to a flocker that breaches out of the water.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("breach_influence", NullValueHandling = NullValueHandling.Ignore)]
        public double? BreachInfluence { get; set; }

        /// <summary>
        /// The threshold in which to start applying cohesion.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("cohesion_threshold", NullValueHandling = NullValueHandling.Ignore)]
        public double? CohesionThreshold { get; set; }

        /// <summary>
        /// The weight applied for the cohesion steering of the flock.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("cohesion_weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? CohesionWeight { get; set; }

        /// <summary>
        /// The weight on which to apply on the goal output.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("goal_weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? GoalWeight { get; set; }

        /// <summary>
        /// Determines the high bound amount of entities that can be allowed in the flock.
        /// Default: 0
        /// </summary>
        [JsonProperty("high_flock_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? HighFlockLimit { get; set; }

        /// <summary>
        /// Tells the Flocking Component if the entity exists in water.
        /// Default: false
        /// </summary>
        [JsonProperty("in_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InWater { get; set; }

        /// <summary>
        /// The area around the entity that allows others to be added to the flock.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("influence_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? InfluenceRadius { get; set; }

        /// <summary>
        /// The distance in which the flocker will stop applying cohesion.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("innner_cohesion_threshold", NullValueHandling = NullValueHandling.Ignore)]
        public double? InnnerCohesionThreshold { get; set; }

        /// <summary>
        /// The percentage chance between 0-1 that a fish will spawn and not want to join flocks.
        /// Invalid values will be capped at the end points.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("loner_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LonerChance { get; set; }

        /// <summary>
        /// Determines the low bound amount of entities that can be allowed in the flock.
        /// Default: 0
        /// </summary>
        [JsonProperty("low_flock_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? LowFlockLimit { get; set; }

        /// <summary>
        /// Tells the flockers that they can only match similar entities that also match the variant,
        /// mark variants, and color data of the other potential flockers.
        /// Default: false
        /// </summary>
        [JsonProperty("match_variants", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MatchVariants { get; set; }

        /// <summary>
        /// The max height allowable in the air or water.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("max_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxHeight { get; set; }

        /// <summary>
        /// The min height allowable in the air or water.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("min_height", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinHeight { get; set; }

        /// <summary>
        /// The distance that is determined to be to close to another flocking and to start applying
        /// separation.
        /// Default: 2.0
        /// </summary>
        [JsonProperty("separation_threshold", NullValueHandling = NullValueHandling.Ignore)]
        public double? SeparationThreshold { get; set; }

        /// <summary>
        /// The weight applied to the separation of the flock.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("separation_weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? SeparationWeight { get; set; }

        /// <summary>
        /// Tells the flockers that they will follow flocks based on the center of mass.
        /// Default: false
        /// </summary>
        [JsonProperty("use_center_of_mass", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseCenterOfMass { get; set; }
    }

    /// <summary>
    /// Speed in Blocks that this entity flies at.
    /// </summary>
    public partial class MinecraftFlyingSpeed
    {
        /// <summary>
        /// Flying speed in blocks per tick
        /// Default: 0.02
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Sets follow range
    /// </summary>
    public partial class MinecraftFollowRange
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Sets the number of blocks the entity can step without jumping.
    /// </summary>
    public partial class MinecraftFootSize
    {
        /// <summary>
        /// The value of the size of the entity's step
        /// Default: 0.5
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines how much does friction affect this entity.
    /// </summary>
    public partial class MinecraftFrictionModifier
    {
        /// <summary>
        /// The higher the number, the more the friction affects this entity. A value of 1.0 means
        /// regular friction, while 2.0 means twice as much
        /// Default: 1.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines the way a mob's genes and alleles are passed on to it's offspring, and how those
    /// traits manifest in the child. Compatible parent genes are crossed together, the alleles
    /// are handed down from the parents to the child, and any matching genetic variants fire off
    /// JSON events to modify the child and express the traits.
    /// </summary>
    public partial class MinecraftGenetics
    {
        /// <summary>
        /// The list of genes that this entity has and will cross with a partner during breeding.
        /// </summary>
        [JsonProperty("genes", NullValueHandling = NullValueHandling.Ignore)]
        public Gene[] Genes { get; set; }

        /// <summary>
        /// Chance that an allele will be replaced with a random one instead of the parent's allele
        /// during birth.
        /// Default: 0.03125
        /// </summary>
        [JsonProperty("mutation_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? MutationRate { get; set; }
    }

    public partial class Gene
    {
        /// <summary>
        /// The range of positive integer allele values for this gene. Spawned mobs will have a
        /// random number in this range assigned to them.
        /// </summary>
        [JsonProperty("allele_range", NullValueHandling = NullValueHandling.Ignore)]
        public AlleleRange AlleleRange { get; set; }

        /// <summary>
        /// The list of genetic variants for this gene. These check for particular allele
        /// combinations and fire events when all of them are satisfied.
        /// </summary>
        [JsonProperty("genetic_variants", NullValueHandling = NullValueHandling.Ignore)]
        public GeneticVariant[] GeneticVariants { get; set; }

        /// <summary>
        /// The name of the gene.
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    /// <summary>
    /// The range of positive integer allele values for this gene. Spawned mobs will have a
    /// random number in this range assigned to them.
    /// </summary>
    public partial class AlleleRange
    {
        /// <summary>
        /// Upper bound of the allele values for this gene.
        /// </summary>
        [JsonProperty("range_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? RangeMax { get; set; }

        /// <summary>
        /// Lower bound of the allele values for this gene.
        /// </summary>
        [JsonProperty("range_min", NullValueHandling = NullValueHandling.Ignore)]
        public long? RangeMin { get; set; }
    }

    public partial class GeneticVariant
    {
        /// <summary>
        /// Event to run when this mob is created and matches the above allele conditions.
        /// </summary>
        [JsonProperty("birth_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent BirthEvent { get; set; }

        /// <summary>
        /// If this value is non-negative, compare both the mob's main and hidden alleles with this
        /// value for a match with both. Can also be a range of integers.
        /// Default: -1
        /// </summary>
        [JsonProperty("both_allele", NullValueHandling = NullValueHandling.Ignore)]
        public BothAllele BothAllele { get; set; }

        /// <summary>
        /// If this value is non-negative, compare both the mob's main and hidden alleles with this
        /// value for a match with either. Can also be a range of integers.
        /// Default: -1
        /// </summary>
        [JsonProperty("either_allele", NullValueHandling = NullValueHandling.Ignore)]
        public long? EitherAllele { get; set; }

        /// <summary>
        /// If this value is non-negative, compare the mob's hidden allele with this value for a
        /// match. Can also be a range of integers.
        /// Default: -1
        /// </summary>
        [JsonProperty("hidden_allele", NullValueHandling = NullValueHandling.Ignore)]
        public long? HiddenAllele { get; set; }

        /// <summary>
        /// If this value is non-negative, compare the mob's main allele with this value for a match.
        /// Can also be a range of integers.
        /// Default: -1
        /// </summary>
        [JsonProperty("main_allele", NullValueHandling = NullValueHandling.Ignore)]
        public long? MainAllele { get; set; }
    }

    /// <summary>
    /// If this value is non-negative, compare both the mob's main and hidden alleles with this
    /// value for a match with both. Can also be a range of integers.
    /// Default: -1
    /// </summary>
    public partial class BothAllele
    {
        [JsonProperty("range_max", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMax { get; set; }

        [JsonProperty("range_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? RangeMin { get; set; }
    }

    /// <summary>
    /// Defines sets of items that can be used to trigger events when used on this entity. The
    /// item will also be taken and placed in the entity's inventory.
    /// </summary>
    public partial class MinecraftGiveable
    {
        /// <summary>
        /// An optional cool down in seconds to prevent spamming interactions.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cooldown { get; set; }

        /// <summary>
        /// The list of items that can be given to the entity to place in their inventory.
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Items { get; set; }

        /// <summary>
        /// Event to fire when the correct item is given.
        /// </summary>
        [JsonProperty("on_give", NullValueHandling = NullValueHandling.Ignore)]
        public string OnGive { get; set; }
    }

    /// <summary>
    /// Sets the offset from the ground that the entity is actually at.
    /// </summary>
    public partial class MinecraftGroundOffset
    {
        /// <summary>
        /// The value of the entity's offset from the terrain, in blocks
        /// Default: 0.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Could increase crop growth when entity walks over crop
    /// </summary>
    public partial class MinecraftGrowsCrop
    {
        /// <summary>
        /// Value between 0-1. Chance of success per tick.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? Chance { get; set; }

        /// <summary>
        /// Number of charges
        /// Default: 10
        /// </summary>
        [JsonProperty("charges", NullValueHandling = NullValueHandling.Ignore)]
        public long? Charges { get; set; }
    }

    /// <summary>
    /// Defines the interactions with this entity for healing it.
    /// </summary>
    public partial class MinecraftHealable
    {
        /// <summary>
        /// The filter group that defines the conditions for using this item to heal the entity.
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// Determines if item can be used regardless of entity being at full health.
        /// Default: false
        /// </summary>
        [JsonProperty("force_use", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ForceUse { get; set; }

        /// <summary>
        /// The array of items that can be used to heal this entity.
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftHealableItem[] Items { get; set; }
    }

    public partial class MinecraftHealableItem
    {
        /// <summary>
        /// The amount of health this entity gains when fed this item.
        /// Default: 1
        /// </summary>
        [JsonProperty("heal_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? HealAmount { get; set; }

        /// <summary>
        /// Item identifier that can be used to heal this entity.
        /// </summary>
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }
    }

    /// <summary>
    /// Sets health value/range
    /// </summary>
    public partial class MinecraftHealth
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Damage? Value { get; set; }
    }

    public partial class MinecraftHurtOnCondition
    {
        /// <summary>
        /// Defines a set of conditions under which an entity should take damage.
        /// </summary>
        [JsonProperty("damage_conditions", NullValueHandling = NullValueHandling.Ignore)]
        public DamageCondition[] DamageConditions { get; set; }
    }

    public partial class DamageCondition
    {
        [JsonProperty("cause", NullValueHandling = NullValueHandling.Ignore)]
        public string Cause { get; set; }

        [JsonProperty("damage_per_tick", NullValueHandling = NullValueHandling.Ignore)]
        public double? DamagePerTick { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }
    }

    /// <summary>
    /// Adds a timer since last rested to see if phantoms should spawn.
    /// </summary>
    public partial class MinecraftInsomnia
    {
        /// <summary>
        /// Number of days the mob has to stay up until the insomnia effect begins.
        /// Default: 3.0
        /// </summary>
        [JsonProperty("days_until_insomnia", NullValueHandling = NullValueHandling.Ignore)]
        public double? DaysUntilInsomnia { get; set; }
    }

    /// <summary>
    /// Defines interactions with this entity.
    /// </summary>
    public partial class MinecraftInteract
    {
        [JsonProperty("interactions", NullValueHandling = NullValueHandling.Ignore)]
        public InteractionsUnion? Interactions { get; set; }
    }

    public partial class Interactions
    {
        /// <summary>
        /// Loot table with items to add to the player's inventory upon successful interaction.
        /// </summary>
        [JsonProperty("add_items", NullValueHandling = NullValueHandling.Ignore)]
        public AddItems AddItems { get; set; }

        /// <summary>
        /// Time in seconds before this entity can be interacted with again.
        /// Default: 0.0
        /// </summary>
        [JsonProperty("cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cooldown { get; set; }

        /// <summary>
        /// The amount of damage the item will take when used to interact with this entity. A value
        /// of 0 means the item won't lose durability.
        /// Default: 0
        /// </summary>
        [JsonProperty("hurt_item", NullValueHandling = NullValueHandling.Ignore)]
        public long? HurtItem { get; set; }

        /// <summary>
        /// Text to show when the player is able to interact in this way with this entity when
        /// playing with Touch-screen controls.
        /// </summary>
        [JsonProperty("interact_text", NullValueHandling = NullValueHandling.Ignore)]
        public string InteractText { get; set; }

        /// <summary>
        /// Event to fire when the interaction occurs.
        /// </summary>
        [JsonProperty("on_interact", NullValueHandling = NullValueHandling.Ignore)]
        public OnInteractUnion? OnInteract { get; set; }

        /// <summary>
        /// Particle effect that will be triggered at the start of the interaction.
        /// </summary>
        [JsonProperty("particle_on_start", NullValueHandling = NullValueHandling.Ignore)]
        public ParticleOnStart ParticleOnStart { get; set; }

        /// <summary>
        /// List of sounds to play when the interaction occurs.
        /// BlueFrog's Note: Documentation states 'list', but all examples use single string
        /// </summary>
        [JsonProperty("play_sounds", NullValueHandling = NullValueHandling.Ignore)]
        public MinglePartnerType? PlaySounds { get; set; }

        /// <summary>
        /// List of entities to spawn when the interaction occurs.
        /// </summary>
        [JsonProperty("spawn_entities", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnEntities { get; set; }

        /// <summary>
        /// Loot table with items to drop on the ground upon successful interaction.
        /// </summary>
        [JsonProperty("spawn_items", NullValueHandling = NullValueHandling.Ignore)]
        public SpawnItems SpawnItems { get; set; }

        /// <summary>
        /// If true, the player will do the 'swing' animation when interacting with this entity.
        /// Default: false
        /// </summary>
        [JsonProperty("swing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Swing { get; set; }

        /// <summary>
        /// The item used will transform to this item upon successful interaction. Format:
        /// itemName:auxValue
        /// </summary>
        [JsonProperty("transform_to_item", NullValueHandling = NullValueHandling.Ignore)]
        public string TransformToItem { get; set; }

        /// <summary>
        /// If true, the interaction will use an item.
        /// Default: false
        /// </summary>
        [JsonProperty("use_item", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseItem { get; set; }
    }

    /// <summary>
    /// Loot table with items to add to the player's inventory upon successful interaction.
    /// </summary>
    public partial class AddItems
    {
        /// <summary>
        /// File path, relative to the Behavior Pack's path, to the loot table file.
        /// </summary>
        [JsonProperty("table", NullValueHandling = NullValueHandling.Ignore)]
        public string Table { get; set; }
    }

    public partial class OnInteract
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public FiltersClass Filters { get; set; }

        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public Target? Target { get; set; }
    }

    /// <summary>
    /// Conditions that make this entry in the list valid
    /// </summary>
    public partial class FiltersClass
    {
    }

    /// <summary>
    /// Particle effect that will be triggered at the start of the interaction.
    /// </summary>
    public partial class ParticleOnStart
    {
        [JsonProperty("particle_offset_towards_interactor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ParticleOffsetTowardsInteractor { get; set; }

        [JsonProperty("particle_type", NullValueHandling = NullValueHandling.Ignore)]
        public string ParticleType { get; set; }

        [JsonProperty("particle_y_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double? ParticleYOffset { get; set; }
    }

    /// <summary>
    /// Loot table with items to drop on the ground upon successful interaction.
    /// </summary>
    public partial class SpawnItems
    {
        /// <summary>
        /// File path, relative to the Behavior Pack's path, to the loot table file.
        /// </summary>
        [JsonProperty("table", NullValueHandling = NullValueHandling.Ignore)]
        public string Table { get; set; }
    }

    /// <summary>
    /// Defines this entity's inventory properties.
    /// </summary>
    public partial class MinecraftInventory
    {
        /// <summary>
        /// Number of slots that this entity can gain per extra strength
        /// Default: 0
        /// </summary>
        [JsonProperty("additional_slots_per_strength", NullValueHandling = NullValueHandling.Ignore)]
        public long? AdditionalSlotsPerStrength { get; set; }

        /// <summary>
        /// If true, the contents of this inventory can be removed by a hopper
        /// Default: false
        /// </summary>
        [JsonProperty("can_be_siphoned_from", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBeSiphonedFrom { get; set; }

        /// <summary>
        /// Type of container this entity has. Can be horse, minecart_chest, minecart_hopper,
        /// inventory, container or hopper
        /// Default: none
        /// </summary>
        [JsonProperty("container_type", NullValueHandling = NullValueHandling.Ignore)]
        public string ContainerType { get; set; }

        /// <summary>
        /// Number of slots the container has
        /// Default: 5
        /// </summary>
        [JsonProperty("inventory_size", NullValueHandling = NullValueHandling.Ignore)]
        public long? InventorySize { get; set; }

        /// <summary>
        /// If true, only the entity can access the inventory
        /// Default: false
        /// </summary>
        [JsonProperty("private", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Private { get; set; }

        /// <summary>
        /// If true, the entity's inventory can only be accessed by its owner or itself
        /// Default: false
        /// </summary>
        [JsonProperty("restrict_to_owner", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RestrictToOwner { get; set; }
    }

    /// <summary>
    /// Allows dyes to be used on this entity to change its color.
    /// </summary>
    public partial class MinecraftIsDyeable
    {
        /// <summary>
        /// The text that will display when interacting with this entity with a dye when playing with
        /// Touch-screen controls
        /// </summary>
        [JsonProperty("interact_text", NullValueHandling = NullValueHandling.Ignore)]
        public string InteractText { get; set; }
    }

    /// <summary>
    /// Defines what items can be used to control this entity while ridden
    /// </summary>
    public partial class MinecraftItemControllable
    {
        /// <summary>
        /// List of items that can be used to control this entity
        /// </summary>
        [JsonProperty("control_items", NullValueHandling = NullValueHandling.Ignore)]
        public MinglePartnerType? ControlItems { get; set; }
    }

    /// <summary>
    /// Gives the entity the ability to jump.
    /// </summary>
    public partial class MinecraftJumpStatic
    {
        /// <summary>
        /// The initial vertical velocity for the jump
        /// Default: 0.42
        /// </summary>
        [JsonProperty("jump_power", NullValueHandling = NullValueHandling.Ignore)]
        public double? JumpPower { get; set; }
    }

    /// <summary>
    /// Sets resistance for knockback (100 for no knockback)
    /// </summary>
    public partial class MinecraftKnockbackResistance
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Allows this entity to be leashed and defines the conditions and events for this entity
    /// when is leashed.
    /// </summary>
    public partial class MinecraftLeashable
    {
        /// <summary>
        /// If true, players can leash this entity even if it is already leashed to another mob.
        /// Default: false
        /// </summary>
        [JsonProperty("can_be_stolen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBeStolen { get; set; }

        /// <summary>
        /// Distance in blocks at which the leash stiffens, restricting movement.
        /// Default: 6.0
        /// </summary>
        [JsonProperty("hard_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? HardDistance { get; set; }

        /// <summary>
        /// Distance in blocks at which the leash breaks.
        /// Default: 10.0
        /// </summary>
        [JsonProperty("max_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDistance { get; set; }

        /// <summary>
        /// Event to call when this entity is leashed.
        /// </summary>
        [JsonProperty("on_leash", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnLeash { get; set; }

        /// <summary>
        /// Event to call when this entity is unleashed.
        /// </summary>
        [JsonProperty("on_unleash", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnUnleash { get; set; }

        /// <summary>
        /// Distance in blocks at which the 'spring' effect starts acting to keep this entity close
        /// to the entity that leashed it.
        /// Default: 4.0
        /// </summary>
        [JsonProperty("soft_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? SoftDistance { get; set; }
    }

    /// <summary>
    /// Defines the behavior when another entity looks at this entity.
    /// </summary>
    public partial class MinecraftLookat
    {
        /// <summary>
        /// If true, invulnerable entities (e.g. Players in creative mode) are considered valid
        /// targets.
        /// Default: false
        /// </summary>
        [JsonProperty("allow_invulnerable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowInvulnerable { get; set; }

        /// <summary>
        /// Defines the entities that can trigger this component.
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// The range for the random amount of time during which the entity is 'cooling down' and
        /// won't get angered or look for a target.
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("look_cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public Damage? LookCooldown { get; set; }

        /// <summary>
        /// The event identifier to run when the entities specified in filters look at this entity.
        /// </summary>
        [JsonProperty("look_event", NullValueHandling = NullValueHandling.Ignore)]
        public LookEvent? LookEvent { get; set; }

        /// <summary>
        /// Maximum distance this entity will look for another entity looking at it.
        /// Default: 10.0
        /// </summary>
        [JsonProperty("search_radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? SearchRadius { get; set; }

        /// <summary>
        /// If true, this entity will set the attack target as the entity that looked at it.
        /// Default: true
        /// </summary>
        [JsonProperty("set_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SetTarget { get; set; }
    }

    /// <summary>
    /// Sets the loot table for what items this entity drops upon death.
    /// </summary>
    public partial class MinecraftLoot
    {
        /// <summary>
        /// The path to the loot table, relative to the Behavior Pack's root
        /// </summary>
        [JsonProperty("table", NullValueHandling = NullValueHandling.Ignore)]
        public string Table { get; set; }
    }

    /// <summary>
    /// Additional variant value. Can be used to further differentiate variants.
    /// </summary>
    public partial class MinecraftMarkVariant
    {
        /// <summary>
        /// The ID of the variant. By convention, 0 is the ID of the base entity
        /// Default: 0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    /// <summary>
    /// A component that applies a mob effect to entities that get within range.
    /// </summary>
    public partial class MinecraftMobEffect
    {
        /// <summary>
        /// How close a hostile entity must be to have the mob effect applied.
        /// Default: 0.2
        /// </summary>
        [JsonProperty("effect_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? EffectRange { get; set; }

        /// <summary>
        /// How long the applied mob effect lasts in seconds.
        /// Default: 10
        /// </summary>
        [JsonProperty("effect_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? EffectTime { get; set; }

        [JsonProperty("entity_filter", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? EntityFilter { get; set; }

        /// <summary>
        /// The mob effect that is applied to entities that enter this entities effect range.
        /// </summary>
        [JsonProperty("mob_effect", NullValueHandling = NullValueHandling.Ignore)]
        public string MobEffect { get; set; }
    }

    /// <summary>
    /// This move control allows the mob to swim in water and walk on land.
    /// </summary>
    public partial class MinecraftMovementAmphibious
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// This component accents the movement of an entity.
    /// </summary>
    public partial class MinecraftMovementBasic
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// This move control causes the mob to fly.
    /// </summary>
    public partial class MinecraftMovementFly
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// This move control allows a mob to fly, swim, climb, etc.
    /// </summary>
    public partial class MinecraftMovementGeneric
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// This move control causes the mob to hover.
    /// </summary>
    public partial class MinecraftMovementHover
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// Move control that causes the mob to jump as it moves with a specified delay between jumps.
    /// </summary>
    public partial class MinecraftMovementJump
    {
        /// <summary>
        /// Delay after landing when using the slime move control.
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("jump_delay", NullValueHandling = NullValueHandling.Ignore)]
        public LookTime? JumpDelay { get; set; }

        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// This move control causes the mob to hop as it moves.
    /// </summary>
    public partial class MinecraftMovementSkip
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// This move control causes the mob to sway side to side giving the impression it is
    /// swimming.
    /// </summary>
    public partial class MinecraftMovementSway
    {
        /// <summary>
        /// The maximum number in degrees the mob can turn per tick.
        /// Default: 30.0
        /// </summary>
        [JsonProperty("max_turn", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTurn { get; set; }
    }

    /// <summary>
    /// Allows this entity to be named (e.g. using a name tag)
    /// </summary>
    public partial class MinecraftNameable
    {
        /// <summary>
        /// If true, this entity can be renamed with name tags
        /// Default: true
        /// </summary>
        [JsonProperty("allow_name_tag_renaming", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowNameTagRenaming { get; set; }

        /// <summary>
        /// If true, the name will always be shown
        /// Default: false
        /// </summary>
        [JsonProperty("always_show", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AlwaysShow { get; set; }

        /// <summary>
        /// Trigger to run when the entity gets named
        /// </summary>
        [JsonProperty("default_trigger", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent DefaultTrigger { get; set; }

        /// <summary>
        /// Describes the special names for this entity and the events to call when the entity
        /// acquires those names
        /// </summary>
        [JsonProperty("name_actions", NullValueHandling = NullValueHandling.Ignore)]
        public NameActionsUnion? NameActions { get; set; }
    }

    public partial class NameActions
    {
        /// <summary>
        /// List of special names that will cause the events defined in 'on_named' to fire
        /// </summary>
        [JsonProperty("name_filter", NullValueHandling = NullValueHandling.Ignore)]
        public string NameFilter { get; set; }

        /// <summary>
        /// Event to be called when this entity acquires the name specified in 'name_filter'
        /// </summary>
        [JsonProperty("on_named", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnNamed { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths that include vertical walls like the vanilla Spiders
    /// do.
    /// </summary>
    public partial class MinecraftNavigationClimb
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths by flying around the air like the regular Ghast.
    /// </summary>
    public partial class MinecraftNavigationFloat
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths in the air like the vanilla Parrots do.
    /// </summary>
    public partial class MinecraftNavigationFly
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths by walking, swimming, flying and/or climbing around
    /// and jumping up and down a block.
    /// </summary>
    public partial class MinecraftNavigationGeneric
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths in the air like the vanilla Bees do. Keeps them from
    /// falling out of the skies and doing predictive movement.
    /// </summary>
    public partial class MinecraftNavigationHover
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths that include water.
    /// </summary>
    public partial class MinecraftNavigationSwim
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Allows this entity to generate paths by walking around and jumping up and down a block
    /// like regular mobs.
    /// </summary>
    public partial class MinecraftNavigationWalk
    {
        /// <summary>
        /// Tells the pathfinder to avoid portals (like nether portals) when finding a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_portals", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidPortals { get; set; }

        /// <summary>
        /// Whether or not the pathfinder should avoid tiles that are exposed to the sun when
        /// creating paths
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_sun", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidSun { get; set; }

        /// <summary>
        /// Tells the pathfinder to avoid water when creating a path
        /// Default: false
        /// </summary>
        [JsonProperty("avoid_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AvoidWater { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door and break it
        /// Default: false
        /// </summary>
        [JsonProperty("can_break_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanBreakDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can path through a closed door assuming the AI will open the
        /// door
        /// Default: false
        /// </summary>
        [JsonProperty("can_open_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanOpenDoors { get; set; }

        /// <summary>
        /// Whether a path can be created through a door
        /// Default: true
        /// </summary>
        [JsonProperty("can_pass_doors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPassDoors { get; set; }

        /// <summary>
        /// Tells the pathfinder that it can start pathing when in the air
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_from_air", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathFromAir { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it can travel on the surface of the water
        /// Default: false
        /// </summary>
        [JsonProperty("can_path_over_water", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanPathOverWater { get; set; }

        /// <summary>
        /// Tells the pathfinder whether or not it will be pulled down by gravity while in water
        /// Default: true
        /// </summary>
        [JsonProperty("can_sink", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanSink { get; set; }
    }

    /// <summary>
    /// Defines the entity's 'peek' behavior, defining the events that should be called during it.
    /// </summary>
    public partial class MinecraftPeek
    {
        /// <summary>
        /// Event to call when the entity is done peeking.
        /// </summary>
        [JsonProperty("on_close", NullValueHandling = NullValueHandling.Ignore)]
        public OnClose OnClose { get; set; }

        /// <summary>
        /// Event to call when the entity starts peeking.
        /// </summary>
        [JsonProperty("on_open", NullValueHandling = NullValueHandling.Ignore)]
        public OnOpen OnOpen { get; set; }

        /// <summary>
        /// Event to call when the entity's target entity starts peeking.
        /// </summary>
        [JsonProperty("on_target_open", NullValueHandling = NullValueHandling.Ignore)]
        public OnTargetOpen OnTargetOpen { get; set; }
    }

    /// <summary>
    /// Event to call when the entity is done peeking.
    /// </summary>
    public partial class OnClose
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }
    }

    /// <summary>
    /// Event to call when the entity starts peeking.
    /// </summary>
    public partial class OnOpen
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }
    }

    /// <summary>
    /// Event to call when the entity's target entity starts peeking.
    /// </summary>
    public partial class OnTargetOpen
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }
    }

    /// <summary>
    /// Defines a dynamic type jump control that will change jump properties based on the speed
    /// modifier of the mob.
    /// </summary>
    public partial class MinecraftPhysics
    {
        /// <summary>
        /// Whether or not the object collides with things.
        /// Default: true
        /// </summary>
        [JsonProperty("has_collision", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasCollision { get; set; }

        /// <summary>
        /// Whether or not the entity is affected by gravity.
        /// Default: true
        /// </summary>
        [JsonProperty("has_gravity", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasGravity { get; set; }
    }

    /// <summary>
    /// Specifies costing information for mobs that prefer to walk on preferred paths.
    /// </summary>
    public partial class MinecraftPreferredPath
    {
        /// <summary>
        /// Cost for non-preferred blocks
        /// Default: 0
        /// </summary>
        [JsonProperty("default_block_cost", NullValueHandling = NullValueHandling.Ignore)]
        public double? DefaultBlockCost { get; set; }

        /// <summary>
        /// Added cost for jumping up a node
        /// Default: 0
        /// </summary>
        [JsonProperty("jump_cost", NullValueHandling = NullValueHandling.Ignore)]
        public long? JumpCost { get; set; }

        /// <summary>
        /// Distance mob can fall without taking damage
        /// Default: 3
        /// </summary>
        [JsonProperty("max_fall_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxFallBlocks { get; set; }

        /// <summary>
        /// A list of blocks with their associated cost
        /// </summary>
        [JsonProperty("preferred_path_blocks", NullValueHandling = NullValueHandling.Ignore)]
        public PreferredPathBlock[] PreferredPathBlocks { get; set; }
    }

    public partial class PreferredPathBlock
    {
        [JsonProperty("blocks", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Blocks { get; set; }

        [JsonProperty("cost", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cost { get; set; }
    }

    /// <summary>
    /// Allows the entity to be a thrown entity.
    /// </summary>
    public partial class MinecraftProjectile
    {
        [JsonProperty("anchor", NullValueHandling = NullValueHandling.Ignore)]
        public double? Anchor { get; set; }

        /// <summary>
        /// Determines the angle at which the projectile is thrown
        /// Default: 0.0
        /// </summary>
        [JsonProperty("angle_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double? AngleOffset { get; set; }

        /// <summary>
        /// If true, the entity hit will be set on fire
        /// Default: false
        /// </summary>
        [JsonProperty("catch_fire", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CatchFire { get; set; }

        /// <summary>
        /// If true, the projectile will produce additional particles when a critical hit happens
        /// Default: false
        /// </summary>
        [JsonProperty("crit_particle_on_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CritParticleOnHurt { get; set; }

        /// <summary>
        /// If true, this entity will be destroyed when hit
        /// Default: false
        /// </summary>
        [JsonProperty("destroy_on_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DestroyOnHurt { get; set; }

        /// <summary>
        /// Entity Definitions defined here can't be hurt by the projectile
        /// BlueFrog's Note: Cannot find example of usage
        /// </summary>
        [JsonProperty("filter", NullValueHandling = NullValueHandling.Ignore)]
        public string Filter { get; set; }

        /// <summary>
        /// If true, whether the projectile causes fire is affected by the mob griefing game rule
        /// Default: false
        /// </summary>
        [JsonProperty("fire_affected_by_griefing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FireAffectedByGriefing { get; set; }

        /// <summary>
        /// The gravity applied to this entity when thrown. The higher the value, the faster the
        /// entity falls
        /// Default: 0.05
        /// </summary>
        [JsonProperty("gravity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Gravity { get; set; }

        /// <summary>
        /// The sound that plays when the projectile hits the ground
        /// </summary>
        [JsonProperty("hit_ground_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string HitGroundSound { get; set; }

        /// <summary>
        /// The sound that plays when the projectile hits something
        /// </summary>
        [JsonProperty("hit_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string HitSound { get; set; }

        /// <summary>
        /// If true, the projectile homes in to the nearest entity
        /// Default: false
        /// </summary>
        [JsonProperty("homing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Homing { get; set; }

        /// <summary>
        /// The fraction of the projectile's speed maintained every frame while traveling in air
        /// Default: 0.99
        /// </summary>
        [JsonProperty("inertia", NullValueHandling = NullValueHandling.Ignore)]
        public double? Inertia { get; set; }

        /// <summary>
        /// If true, the projectile will be treated as dangerous to the players
        /// Default: false
        /// </summary>
        [JsonProperty("is_dangerous", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDangerous { get; set; }

        /// <summary>
        /// If true, the projectile will knock back the entity it hits
        /// Default: true
        /// </summary>
        [JsonProperty("knockback", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Knockback { get; set; }

        /// <summary>
        /// If true, the entity hit will be struck by lightning
        /// Default: false
        /// </summary>
        [JsonProperty("lightning", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Lightning { get; set; }

        /// <summary>
        /// The fraction of the projectile's speed maintained every frame while traveling in water
        /// Default: 0.6
        /// </summary>
        [JsonProperty("liquid_inertia", NullValueHandling = NullValueHandling.Ignore)]
        public double? LiquidInertia { get; set; }

        /// <summary>
        /// If true, the projectile can hit multiple entities per flight
        /// Default: true
        /// </summary>
        [JsonProperty("multiple_targets", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultipleTargets { get; set; }

        /// <summary>
        /// The offset from the entity's anchor where the projectile will spawn
        /// Default: [0.0, 0.5, 0.0]
        /// </summary>
        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public double[] Offset { get; set; }

        /// <summary>
        /// Time in seconds that the entity hit will be on fire for
        /// Default: 5.0
        /// </summary>
        [JsonProperty("on_fire_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? OnFireTime { get; set; }

        /// <summary>
        /// BlueFrog's note: Undocumented property, not 100% sure of implementation, schema based on
        /// observed values
        /// </summary>
        [JsonProperty("on_hit", NullValueHandling = NullValueHandling.Ignore)]
        public OnHit OnHit { get; set; }

        /// <summary>
        /// Particle to use upon collision
        /// Default: iconcrack
        /// </summary>
        [JsonProperty("particle", NullValueHandling = NullValueHandling.Ignore)]
        public string Particle { get; set; }

        /// <summary>
        /// Defines the effect the arrow will apply to the entity it hits
        /// Default: -1
        /// </summary>
        [JsonProperty("potion_effect", NullValueHandling = NullValueHandling.Ignore)]
        public long? PotionEffect { get; set; }

        /// <summary>
        /// Determines the velocity of the projectile
        /// Default: 1.3
        /// </summary>
        [JsonProperty("power", NullValueHandling = NullValueHandling.Ignore)]
        public double? Power { get; set; }

        /// <summary>
        /// If true, this entity will be reflected back when hit
        /// Default: false
        /// </summary>
        [JsonProperty("reflect_on_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReflectOnHurt { get; set; }

        /// <summary>
        /// If true, damage will be randomized based on damage and speed
        /// Default: false
        /// </summary>
        [JsonProperty("semi_random_diff_damage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SemiRandomDiffDamage { get; set; }

        /// <summary>
        /// The sound that plays when the projectile is shot
        /// </summary>
        [JsonProperty("shoot_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string ShootSound { get; set; }

        /// <summary>
        /// If true, the projectile will be shot towards the target of the entity firing it
        /// Default: true
        /// </summary>
        [JsonProperty("shoot_target", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShootTarget { get; set; }

        /// <summary>
        /// If true, the projectile will bounce upon hit
        /// Default: false
        /// </summary>
        [JsonProperty("should_bounce", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShouldBounce { get; set; }

        /// <summary>
        /// If true, the projectile will be treated like a splash potion
        /// Default: false
        /// </summary>
        [JsonProperty("splash_potion", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplashPotion { get; set; }

        /// <summary>
        /// Radius in blocks of the 'splash' effect
        /// Default: 4.0
        /// </summary>
        [JsonProperty("splash_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? SplashRange { get; set; }

        [JsonProperty("stop_on_hurt", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StopOnHurt { get; set; }

        /// <summary>
        /// The base accuracy. Accuracy is determined by the formula uncertaintyBase -
        /// difficultyLevel * uncertaintyMultiplier
        /// Default: 0.0
        /// </summary>
        [JsonProperty("uncertainty_base", NullValueHandling = NullValueHandling.Ignore)]
        public double? UncertaintyBase { get; set; }

        /// <summary>
        /// Determines how much difficulty affects accuracy. Accuracy is determined by the formula
        /// uncertaintyBase - difficultyLevel * uncertaintyMultiplier
        /// Default: 0.0
        /// </summary>
        [JsonProperty("uncertainty_multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public double? UncertaintyMultiplier { get; set; }
    }

    /// <summary>
    /// BlueFrog's note: Undocumented property, not 100% sure of implementation, schema based on
    /// observed values
    /// </summary>
    public partial class OnHit
    {
        [JsonProperty("arrow_effect", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> ArrowEffect { get; set; }

        [JsonProperty("catch_fire", NullValueHandling = NullValueHandling.Ignore)]
        public CatchFire CatchFire { get; set; }

        [JsonProperty("definition_event", NullValueHandling = NullValueHandling.Ignore)]
        public DefinitionEvent DefinitionEvent { get; set; }

        [JsonProperty("douse_fire", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> DouseFire { get; set; }

        [JsonProperty("grant_xp", NullValueHandling = NullValueHandling.Ignore)]
        public GrantXp GrantXp { get; set; }

        [JsonProperty("impact_damage", NullValueHandling = NullValueHandling.Ignore)]
        public ImpactDamage ImpactDamage { get; set; }

        [JsonProperty("mob_effect", NullValueHandling = NullValueHandling.Ignore)]
        public MobEffect MobEffect { get; set; }

        [JsonProperty("particle_on_hit", NullValueHandling = NullValueHandling.Ignore)]
        public ParticleOnHit ParticleOnHit { get; set; }

        [JsonProperty("remove_on_hit", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> RemoveOnHit { get; set; }

        [JsonProperty("spawn_aoe_cloud", NullValueHandling = NullValueHandling.Ignore)]
        public SpawnAoeCloud SpawnAoeCloud { get; set; }

        [JsonProperty("spawn_chance", NullValueHandling = NullValueHandling.Ignore)]
        public SpawnChance SpawnChance { get; set; }

        [JsonProperty("stick_in_ground", NullValueHandling = NullValueHandling.Ignore)]
        public StickInGround StickInGround { get; set; }

        [JsonProperty("teleport_owner", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> TeleportOwner { get; set; }

        [JsonProperty("thrown_potion_effect", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> ThrownPotionEffect { get; set; }
    }

    public partial class CatchFire
    {
        [JsonProperty("fire_affected_by_griefing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FireAffectedByGriefing { get; set; }
    }

    public partial class DefinitionEvent
    {
        [JsonProperty("affect_projectile", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AffectProjectile { get; set; }

        [JsonProperty("event_trigger", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent EventTrigger { get; set; }
    }

    public partial class GrantXp
    {
        [JsonProperty("maxXP", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxXp { get; set; }

        [JsonProperty("minXP", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinXp { get; set; }
    }

    public partial class ImpactDamage
    {
        [JsonProperty("damage", NullValueHandling = NullValueHandling.Ignore)]
        public Damage? Damage { get; set; }

        [JsonProperty("destroy_on_hit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DestroyOnHit { get; set; }

        [JsonProperty("knockback", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Knockback { get; set; }

        [JsonProperty("semi_random_diff_damage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SemiRandomDiffDamage { get; set; }
    }

    public partial class MobEffect
    {
        [JsonProperty("amplifier", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amplifier { get; set; }

        [JsonProperty("durationeasy", NullValueHandling = NullValueHandling.Ignore)]
        public double? Durationeasy { get; set; }

        [JsonProperty("durationhard", NullValueHandling = NullValueHandling.Ignore)]
        public double? Durationhard { get; set; }

        [JsonProperty("durationnormal", NullValueHandling = NullValueHandling.Ignore)]
        public double? Durationnormal { get; set; }

        [JsonProperty("effect", NullValueHandling = NullValueHandling.Ignore)]
        public Effect? Effect { get; set; }
    }

    public partial class ParticleOnHit
    {
        [JsonProperty("num_particles", NullValueHandling = NullValueHandling.Ignore)]
        public double? NumParticles { get; set; }

        [JsonProperty("on_entity_hit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OnEntityHit { get; set; }

        [JsonProperty("on_other_hit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OnOtherHit { get; set; }

        [JsonProperty("particle_type", NullValueHandling = NullValueHandling.Ignore)]
        public string ParticleType { get; set; }
    }

    public partial class SpawnAoeCloud
    {
        [JsonProperty("affect_owner", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AffectOwner { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public double[] Color { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        [JsonProperty("particle", NullValueHandling = NullValueHandling.Ignore)]
        public string Particle { get; set; }

        /// <summary>
        /// Numerical potion ID
        /// </summary>
        [JsonProperty("potion", NullValueHandling = NullValueHandling.Ignore)]
        public long? Potion { get; set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public double? Radius { get; set; }

        [JsonProperty("radius_on_use", NullValueHandling = NullValueHandling.Ignore)]
        public double? RadiusOnUse { get; set; }

        [JsonProperty("reapplication_delay", NullValueHandling = NullValueHandling.Ignore)]
        public double? ReapplicationDelay { get; set; }
    }

    public partial class SpawnChance
    {
        [JsonProperty("first_percent_spawn_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? FirstPercentSpawnChance { get; set; }

        [JsonProperty("first_spawn_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? FirstSpawnChance { get; set; }

        [JsonProperty("first_spawn_count", NullValueHandling = NullValueHandling.Ignore)]
        public double? FirstSpawnCount { get; set; }

        [JsonProperty("second_spawn_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? SecondSpawnChance { get; set; }

        [JsonProperty("second_spawn_count", NullValueHandling = NullValueHandling.Ignore)]
        public double? SecondSpawnCount { get; set; }

        [JsonProperty("spawn_baby", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SpawnBaby { get; set; }

        [JsonProperty("spawn_definition", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnDefinition { get; set; }
    }

    public partial class StickInGround
    {
        [JsonProperty("shake_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? ShakeTime { get; set; }
    }

    /// <summary>
    /// Sets the distance through which the entity can push through.
    /// </summary>
    public partial class MinecraftPushThrough
    {
        /// <summary>
        /// The value of the entity's push-through, in blocks
        /// Default: 0.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines what can push an entity between other entities and pistons.
    /// </summary>
    public partial class MinecraftPushable
    {
        /// <summary>
        /// Whether the entity can be pushed by other entities.
        /// Default: true
        /// </summary>
        [JsonProperty("is_pushable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPushable { get; set; }

        /// <summary>
        /// Whether the entity can be pushed by pistons safely.
        /// Default: true
        /// </summary>
        [JsonProperty("is_pushable_by_piston", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPushableByPiston { get; set; }
    }

    /// <summary>
    /// Attempts to trigger a raid at the entity's location.
    /// </summary>
    public partial class MinecraftRaidTrigger
    {
        /// <summary>
        /// Event to run we attempt to trigger a raid on the village.
        /// </summary>
        [JsonProperty("triggered_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent TriggeredEvent { get; set; }
    }

    /// <summary>
    /// Defines the entity's movement on the rails. An entity with this component is only allowed
    /// to move on the rail.
    /// </summary>
    public partial class MinecraftRailMovement
    {
        /// <summary>
        /// Maximum speed that this entity will move at when on the rail.
        /// Default: 0.4
        /// </summary>
        [JsonProperty("max_speed", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxSpeed { get; set; }
    }

    /// <summary>
    /// Defines the behavior of the entity when the rail gets activated or deactivated.
    /// </summary>
    public partial class MinecraftRailSensor
    {
        /// <summary>
        /// If true, on tick this entity will trigger its on_deactivate behavior
        /// Default: false
        /// </summary>
        [JsonProperty("check_block_types", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CheckBlockTypes { get; set; }

        /// <summary>
        /// If true, this entity will eject all of its riders when it passes over an activated rail
        /// Default: true
        /// </summary>
        [JsonProperty("eject_on_activate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EjectOnActivate { get; set; }

        /// <summary>
        /// If true, this entity will eject all of its riders when it passes over a deactivated rail
        /// Default: false
        /// </summary>
        [JsonProperty("eject_on_deactivate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EjectOnDeactivate { get; set; }

        /// <summary>
        /// Event to call when the rail is activated
        /// </summary>
        [JsonProperty("on_activate", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnActivate { get; set; }

        /// <summary>
        /// Event to call when the rail is deactivated
        /// </summary>
        [JsonProperty("on_deactivate", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnDeactivate { get; set; }

        /// <summary>
        /// If true, command blocks will start ticking when passing over an activated rail
        /// Default: true
        /// </summary>
        [JsonProperty("tick_command_block_on_activate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TickCommandBlockOnActivate { get; set; }

        /// <summary>
        /// If false, command blocks will stop ticking when passing over a deactivated rail
        /// Default: false
        /// </summary>
        [JsonProperty("tick_command_block_on_deactivate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TickCommandBlockOnDeactivate { get; set; }
    }

    /// <summary>
    /// Defines the ravager's response to their melee attack being blocked.
    /// </summary>
    public partial class MinecraftRavagerBlocked
    {
        /// <summary>
        /// The strength with which blocking entities should be knocked back
        /// Default: 3.0
        /// </summary>
        [JsonProperty("knockback_strength", NullValueHandling = NullValueHandling.Ignore)]
        public double? KnockbackStrength { get; set; }

        /// <summary>
        /// A list of weighted responses to the melee attack being blocked
        /// Default: [ ]
        /// </summary>
        [JsonProperty("reaction_choices", NullValueHandling = NullValueHandling.Ignore)]
        public ReactionChoice[] ReactionChoices { get; set; }
    }

    public partial class ReactionChoice
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent Value { get; set; }

        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    }

    /// <summary>
    /// Determines whether this entity can be ridden. Allows specifying the different seat
    /// positions and quantity.
    /// </summary>
    public partial class MinecraftRideable
    {
        /// <summary>
        /// The seat that designates the driver of the entity
        /// Default: 0
        /// </summary>
        [JsonProperty("controlling_seat", NullValueHandling = NullValueHandling.Ignore)]
        public long? ControllingSeat { get; set; }

        /// <summary>
        /// If true, this entity can't be interacted with if the entity interacting with it is
        /// crouching
        /// Default: true
        /// </summary>
        [JsonProperty("crouching_skip_interact", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CrouchingSkipInteract { get; set; }

        /// <summary>
        /// List of entities that can ride this entity
        /// </summary>
        [JsonProperty("family_types", NullValueHandling = NullValueHandling.Ignore)]
        public string[] FamilyTypes { get; set; }

        /// <summary>
        /// The text to display when the player can interact with the entity when playing with
        /// Touch-screen controls
        /// </summary>
        [JsonProperty("interact_text", NullValueHandling = NullValueHandling.Ignore)]
        public string InteractText { get; set; }

        /// <summary>
        /// If true, this entity will pull in entities that are in the correct family_types into any
        /// available seats
        /// Default: false
        /// </summary>
        [JsonProperty("pull_in_entities", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PullInEntities { get; set; }

        /// <summary>
        /// If true, this entity will be picked when looked at by the rider
        /// Default: false
        /// </summary>
        [JsonProperty("rider_can_interact", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RiderCanInteract { get; set; }

        /// <summary>
        /// The number of entities that can ride this entity at the same time
        /// Default: 1
        /// </summary>
        [JsonProperty("seat_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? SeatCount { get; set; }

        /// <summary>
        /// The list of positions and number of riders for each position for entities riding this
        /// entity
        /// </summary>
        [JsonProperty("seats", NullValueHandling = NullValueHandling.Ignore)]
        public SeatsUnion? Seats { get; set; }
    }

    public partial class Seats
    {
        /// <summary>
        /// Angle in degrees that a rider is allowed to rotate while riding this entity. Omit this
        /// property for no limit
        /// Default: 181.0
        /// </summary>
        [JsonProperty("lock_rider_rotation", NullValueHandling = NullValueHandling.Ignore)]
        public double? LockRiderRotation { get; set; }

        /// <summary>
        /// Defines the maximum number of riders that can be riding this entity for this seat to be
        /// valid
        /// Default: 0
        /// </summary>
        [JsonProperty("max_rider_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxRiderCount { get; set; }

        /// <summary>
        /// Defines the minimum number of riders that need to be riding this entity before this seat
        /// can be used
        /// Default: 0
        /// </summary>
        [JsonProperty("min_rider_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinRiderCount { get; set; }

        /// <summary>
        /// Position of this seat relative to this entity's position
        /// Default: [0.0, 0.0, 0.0]
        /// </summary>
        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public double[] Position { get; set; }

        /// <summary>
        /// Offset to rotate riders by
        /// Default: 0.0
        /// </summary>
        [JsonProperty("rotate_rider_by", NullValueHandling = NullValueHandling.Ignore)]
        public double? RotateRiderBy { get; set; }
    }

    /// <summary>
    /// Sets the entity's visual size.
    /// </summary>
    public partial class MinecraftScale
    {
        /// <summary>
        /// The value of the scale. 1.0 means the entity will appear at the scale they are defined in
        /// their model. Higher numbers make the entity bigger
        /// Default: 1.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines the entity's size interpolation based on the entity's age.
    /// </summary>
    public partial class MinecraftScaleByAge
    {
        /// <summary>
        /// Ending scale of the entity when it's fully grown.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("end_scale", NullValueHandling = NullValueHandling.Ignore)]
        public double? EndScale { get; set; }

        /// <summary>
        /// Initial scale of the newborn entity.
        /// Default: 1.0
        /// </summary>
        [JsonProperty("start_scale", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartScale { get; set; }
    }

    /// <summary>
    /// Fires off scheduled mob events at time of day events.
    /// </summary>
    public partial class MinecraftScheduler
    {
        [JsonProperty("max_delay_secs", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxDelaySecs { get; set; }

        [JsonProperty("min_delay_secs", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinDelaySecs { get; set; }

        /// <summary>
        /// The list of triggers that fire when the conditions match the given filter criteria. If
        /// any filter criteria overlap the first defined event will be picked.
        /// </summary>
        [JsonProperty("scheduled_events", NullValueHandling = NullValueHandling.Ignore)]
        public ScheduledEvent[] ScheduledEvents { get; set; }
    }

    public partial class ScheduledEvent
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }
    }

    /// <summary>
    /// Defines a list of items the mob wants to share or pick up. Each item must have the
    /// following parameters:
    /// </summary>
    public partial class MinecraftShareables
    {
        /// <summary>
        /// A bucket for all other items in the game. Note this category is always least priority
        /// items.
        /// Default: false
        /// </summary>
        [JsonProperty("all_items", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllItems { get; set; }

        /// <summary>
        /// Maximum number of this item the mob will hold.
        /// Default: -1
        /// </summary>
        [JsonProperty("all_items_max_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? AllItemsMaxAmount { get; set; }

        /// <summary>
        /// Number of this item considered extra that the entity wants to share.
        /// Default: -1
        /// </summary>
        [JsonProperty("all_items_surplus_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? AllItemsSurplusAmount { get; set; }

        /// <summary>
        /// Number of this item this entity wants to share.
        /// Default: -1
        /// </summary>
        [JsonProperty("all_items_want_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? AllItemsWantAmount { get; set; }

        /// <summary>
        /// List of items that the entity wants to share.
        /// </summary>
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftShareablesItem[] Items { get; set; }
    }

    public partial class MinecraftShareablesItem
    {
        /// <summary>
        /// Defines the item this entity wants to craft with the item defined above. Should be an
        /// item name.
        /// </summary>
        [JsonProperty("craft_into", NullValueHandling = NullValueHandling.Ignore)]
        public string CraftInto { get; set; }

        /// <summary>
        /// The name of the item.
        /// </summary>
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Maximum number of this item the mob will hold.
        /// </summary>
        [JsonProperty("max_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxAmount { get; set; }

        /// <summary>
        /// Prioritizes which items the entity prefers. 0 is the highest priority.
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public double? Priority { get; set; }

        /// <summary>
        /// Number of this item considered extra that the entity wants to share.
        /// </summary>
        [JsonProperty("surplus_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? SurplusAmount { get; set; }

        /// <summary>
        /// Number of this item this entity wants to share.
        /// </summary>
        [JsonProperty("want_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? WantAmount { get; set; }
    }

    /// <summary>
    /// Defines the entity's ranged attack behavior.
    /// </summary>
    public partial class MinecraftShooter
    {
        /// <summary>
        /// ID of the Potion effect to be applied on hit
        /// Default: -1
        /// </summary>
        [JsonProperty("aux_val", NullValueHandling = NullValueHandling.Ignore)]
        public long? AuxVal { get; set; }

        /// <summary>
        /// Actor definition to use as projectile for the ranged attack. The actor definition must
        /// have the projectile component to be able to be shot as a projectile
        /// </summary>
        [JsonProperty("def", NullValueHandling = NullValueHandling.Ignore)]
        public string Def { get; set; }
    }

    /// <summary>
    /// Defines the entity's 'sit' state.
    /// </summary>
    public partial class MinecraftSittable
    {
        /// <summary>
        /// Event to run when the entity enters the 'sit' state
        /// </summary>
        [JsonProperty("sit_event", NullValueHandling = NullValueHandling.Ignore)]
        public string SitEvent { get; set; }

        /// <summary>
        /// Event to run when the entity exits the 'sit' state
        /// </summary>
        [JsonProperty("stand_event", NullValueHandling = NullValueHandling.Ignore)]
        public string StandEvent { get; set; }
    }

    /// <summary>
    /// Skin ID value. Can be used to differentiate skins, such as base skins for villagers.
    /// </summary>
    public partial class MinecraftSkinId
    {
        /// <summary>
        /// The ID of the skin. By convention, 0 is the ID of the base skin
        /// Default: 0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    /// <summary>
    /// Sets the entity's base volume for sound effects.
    /// </summary>
    public partial class MinecraftSoundVolume
    {
        /// <summary>
        /// The value of the volume the entity uses for sound effects
        /// Default: 1.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    public partial class SpawnEntity
    {
        /// <summary>
        /// If present, the specified entity will only spawn if the filter evaluates to true
        /// </summary>
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// Maximum amount of time to randomly wait in seconds before another entity is spawned
        /// Default: 600
        /// </summary>
        [JsonProperty("max_wait_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxWaitTime { get; set; }

        /// <summary>
        /// Minimum amount of time to randomly wait in seconds before another entity is spawned
        /// Default: 300
        /// </summary>
        [JsonProperty("min_wait_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinWaitTime { get; set; }

        /// <summary>
        /// The number of entities of this type to spawn each time that this triggers
        /// Default: 1
        /// </summary>
        [JsonProperty("num_to_spawn", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumToSpawn { get; set; }

        /// <summary>
        /// If true, this the spawned entity will be leashed to the parent
        /// Default: false
        /// </summary>
        [JsonProperty("should_leash", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShouldLeash { get; set; }

        /// <summary>
        /// If true, this component will only ever spawn the specified entity once
        /// Default: false
        /// </summary>
        [JsonProperty("single_use", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SingleUse { get; set; }

        /// <summary>
        /// Identifier of the entity to spawn, leave empty to spawn the item defined above instead
        /// </summary>
        [JsonProperty("spawn_entity", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnEntitySpawnEntity { get; set; }

        /// <summary>
        /// Event to call when the entity is spawned
        /// Default: minecraft:entity_born
        /// </summary>
        [JsonProperty("spawn_event", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnEvent { get; set; }

        /// <summary>
        /// Item identifier of the item to spawn
        /// Default: egg
        /// </summary>
        [JsonProperty("spawn_item", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnItem { get; set; }

        /// <summary>
        /// Method to use to spawn the entity
        /// Default: born
        /// </summary>
        [JsonProperty("spawn_method", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnMethod { get; set; }

        /// <summary>
        /// Identifier of the sound effect to play when the entity is spawned
        /// Default: plop
        /// </summary>
        [JsonProperty("spawn_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string SpawnSound { get; set; }
    }

    /// <summary>
    /// Defines what mob effects to add and remove to the entity when adding this component.
    /// </summary>
    public partial class MinecraftSpellEffects
    {
        /// <summary>
        /// List of effects to add to this entity after adding this component
        /// </summary>
        [JsonProperty("add_effects", NullValueHandling = NullValueHandling.Ignore)]
        public EffectsSchema[] AddEffects { get; set; }

        /// <summary>
        /// List of identifiers of effects to be removed from this entity after adding this component
        /// </summary>
        [JsonProperty("remove_effects")]
        public object RemoveEffects { get; set; }
    }

    public partial class EffectsSchema
    {
        /// <summary>
        /// If it is to be considered an ambient effect
        /// BlueFrog's Note: Could not find example to verify type and purpose
        /// </summary>
        [JsonProperty("ambient", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Ambient { get; set; }

        /// <summary>
        /// Amplifier level
        /// </summary>
        [JsonProperty("amplifier", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amplifier { get; set; }

        /// <summary>
        /// duration in seconds
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        [JsonProperty("effect", NullValueHandling = NullValueHandling.Ignore)]
        public Effect? Effect { get; set; }

        /// <summary>
        /// Should the effect be considered visible
        /// </summary>
        [JsonProperty("visible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Visible { get; set; }
    }

    /// <summary>
    /// Defines the entity's strength to carry items.
    /// </summary>
    public partial class MinecraftStrength
    {
        /// <summary>
        /// The maximum strength of this entity
        /// Default: 5
        /// </summary>
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public long? Max { get; set; }

        /// <summary>
        /// The initial value of the strength
        /// Default: 1
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    /// <summary>
    /// Defines the rules for a mob to be tamed by the player.
    /// </summary>
    public partial class MinecraftTameable
    {
        /// <summary>
        /// The chance of taming the entity with each item use between 0.0 and 1.0, where 1.0 is 100%
        /// Default: 1.0
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }

        /// <summary>
        /// Event to run when this entity becomes tamed
        /// </summary>
        [JsonProperty("tame_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent TameEvent { get; set; }

        /// <summary>
        /// The list of items that can be used to tame this entity
        /// </summary>
        [JsonProperty("tame_items", NullValueHandling = NullValueHandling.Ignore)]
        public MinglePartnerType? TameItems { get; set; }
    }

    /// <summary>
    /// Allows the Entity to be tamed by mounting it.
    /// </summary>
    public partial class MinecraftTamemount
    {
        /// <summary>
        /// The amount the entity's temper will increase when mounted.
        /// Default: 5
        /// </summary>
        [JsonProperty("attempt_temper_mod", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttemptTemperMod { get; set; }

        /// <summary>
        /// The list of items that, if carried while interacting with the entity, will anger it.
        /// </summary>
        [JsonProperty("auto_reject_items", NullValueHandling = NullValueHandling.Ignore)]
        public AutoRejectItem[] AutoRejectItems { get; set; }

        /// <summary>
        /// The list of items that can be used to increase the entity's temper and speed up the
        /// taming process.
        /// </summary>
        [JsonProperty("feed_items", NullValueHandling = NullValueHandling.Ignore)]
        public MinecraftTamemountFeedItem[] FeedItems { get; set; }

        /// <summary>
        /// The text that shows in the feeding interact button.
        /// </summary>
        [JsonProperty("feed_text", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedText { get; set; }

        /// <summary>
        /// The maximum value for the entity's random starting temper.
        /// Default: 100
        /// </summary>
        [JsonProperty("max_temper", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxTemper { get; set; }

        /// <summary>
        /// The minimum value for the entity's random starting temper.
        /// Default: 0
        /// </summary>
        [JsonProperty("min_temper", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinTemper { get; set; }

        /// <summary>
        /// The text that shows in the riding interact button.
        /// </summary>
        [JsonProperty("ride_text", NullValueHandling = NullValueHandling.Ignore)]
        public string RideText { get; set; }

        /// <summary>
        /// Event that triggers when the entity becomes tamed.
        /// </summary>
        [JsonProperty("tame_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent TameEvent { get; set; }
    }

    public partial class AutoRejectItem
    {
        /// <summary>
        /// Name of the item this entity dislikes and will cause it to get angry if used while
        /// untamed.
        /// </summary>
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }
    }

    public partial class MinecraftTamemountFeedItem
    {
        /// <summary>
        /// Name of the item this entity likes and can be used to increase this entity's temper.
        /// </summary>
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// The amount of temper this entity gains when fed this item.
        /// Default: 0
        /// </summary>
        [JsonProperty("temper_mod", NullValueHandling = NullValueHandling.Ignore)]
        public long? TemperMod { get; set; }
    }

    /// <summary>
    /// Defines the entity's range within which it can see or sense other entities to target them.
    /// </summary>
    public partial class MinecraftTargetNearbySensor
    {
        /// <summary>
        /// Maximum distance in blocks that another entity will be considered in the 'inside' range
        /// Default: 1.0
        /// </summary>
        [JsonProperty("inside_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? InsideRange { get; set; }

        /// <summary>
        /// Whether the other entity needs to be visible to trigger 'inside' events
        /// Default: false
        /// </summary>
        [JsonProperty("must_see", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MustSee { get; set; }

        /// <summary>
        /// Event to call when an entity gets in the inside range. Can specify 'event' for the name
        /// of the event and 'target' for the target of the event
        /// </summary>
        [JsonProperty("on_inside_range", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnInsideRange { get; set; }

        /// <summary>
        /// Event to call when an entity gets in the outside range. Can specify 'event' for the name
        /// of the event and 'target' for the target of the event
        /// </summary>
        [JsonProperty("on_outside_range", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnOutsideRange { get; set; }

        /// <summary>
        /// Event to call when an entity exits visual range. Can specify 'event' for the name of the
        /// event and 'target' for the target of the event
        /// </summary>
        [JsonProperty("on_vision_lost_inside_range", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent OnVisionLostInsideRange { get; set; }

        /// <summary>
        /// Maximum distance in blocks that another entity will be considered in the 'outside' range
        /// Default: 5.0
        /// </summary>
        [JsonProperty("outside_range", NullValueHandling = NullValueHandling.Ignore)]
        public double? OutsideRange { get; set; }
    }

    /// <summary>
    /// Defines an entity's teleporting behavior.
    /// </summary>
    public partial class MinecraftTeleport
    {
        /// <summary>
        /// Modifies the chance that the entity will teleport if the entity is in darkness
        /// Default: 0.01
        /// </summary>
        [JsonProperty("dark_teleport_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? DarkTeleportChance { get; set; }

        /// <summary>
        /// Modifies the chance that the entity will teleport if the entity is in daylight
        /// Default: 0.01
        /// </summary>
        [JsonProperty("light_teleport_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LightTeleportChance { get; set; }

        /// <summary>
        /// Maximum amount of time in seconds between random teleports
        /// Default: 20.0
        /// </summary>
        [JsonProperty("max_random_teleport_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxRandomTeleportTime { get; set; }

        /// <summary>
        /// Minimum amount of time in seconds between random teleports
        /// Default: 0.0
        /// </summary>
        [JsonProperty("min_random_teleport_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinRandomTeleportTime { get; set; }

        /// <summary>
        /// Entity will teleport to a random position within the area defined by this cube
        /// Default: [32.0, 16.0, 32.0]
        /// </summary>
        [JsonProperty("random_teleport_cube", NullValueHandling = NullValueHandling.Ignore)]
        public double[] RandomTeleportCube { get; set; }

        /// <summary>
        /// If true, the entity will teleport randomly
        /// Default: true
        /// </summary>
        [JsonProperty("random_teleports", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RandomTeleports { get; set; }

        /// <summary>
        /// Maximum distance the entity will teleport when chasing a target
        /// Default: 16.0
        /// </summary>
        [JsonProperty("target_distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? TargetDistance { get; set; }

        /// <summary>
        /// The chance that the entity will teleport between 0.0 and 1.0. 1.0 means 100%
        /// Default: 1.0
        /// </summary>
        [JsonProperty("target_teleport_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? TargetTeleportChance { get; set; }
    }

    /// <summary>
    /// Defines if the entity ticks the world and the radius around it to tick.
    /// </summary>
    public partial class MinecraftTickWorld
    {
        /// <summary>
        /// The distance at which the closest player has to be before this entity despawns. This
        /// option will be ignored if never_despawn is true. Min: 128 blocks.
        /// Default: 128
        /// </summary>
        [JsonProperty("distance_to_players", NullValueHandling = NullValueHandling.Ignore)]
        public double? DistanceToPlayers { get; set; }

        /// <summary>
        /// If true, this entity will not despawn even if players are far away. If false,
        /// distance_to_players will be used to determine when to despawn.
        /// Default: true
        /// </summary>
        [JsonProperty("never_despawn", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NeverDespawn { get; set; }

        /// <summary>
        /// The area around the entity to tick. Default: 2. Allowed range: 2-6.
        /// Default: 2
        /// </summary>
        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public long? Radius { get; set; }
    }

    /// <summary>
    /// Adds a timer after which an event will fire.
    /// </summary>
    public partial class MinecraftTimer
    {
        /// <summary>
        /// If true, the timer will restart every time after it fires
        /// Default: true
        /// </summary>
        [JsonProperty("looping", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Looping { get; set; }

        /// <summary>
        /// This is a list of objects, representing one value in seconds that can be picked before
        /// firing the event and an optional weight. Incompatible with time.
        /// Default: [ ]
        /// </summary>
        [JsonProperty("random_time_choices", NullValueHandling = NullValueHandling.Ignore)]
        public RandomTimeChoice[] RandomTimeChoices { get; set; }

        /// <summary>
        /// If true, the amount of time on the timer will be random between the min and max values
        /// specified in time
        /// Default: true
        /// </summary>
        [JsonProperty("randomInterval", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RandomInterval { get; set; }

        /// <summary>
        /// Amount of time in seconds for the timer. Can be specified as a number or a pair of
        /// numbers (min and max). Incompatible with random_time_choices.
        /// Default: [0.0, 0.0]
        /// </summary>
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public Damage? Time { get; set; }

        /// <summary>
        /// Event to fire when the time on the timer runs out
        /// </summary>
        [JsonProperty("time_down_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent TimeDownEvent { get; set; }
    }

    public partial class RandomTimeChoice
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    }

    /// <summary>
    /// Defines this entity's ability to trade with players.
    /// </summary>
    public partial class MinecraftTradeTable
    {
        /// <summary>
        /// Determines when the mob transforms, if the trades should be converted when the new mob
        /// has a economy_trade_table. When the trades are converted, the mob will generate a new
        /// trade list with their new trade table, but then it will try to convert any of the same
        /// trades over to have the same enchantments and user data. For example, if the original has
        /// a Emerald to Enchanted Iron Sword (Sharpness 1), and the new trade also has an Emerald
        /// for Enchanted Iron Sword, then the enchantment will be Sharpness 1.
        /// Default: false
        /// </summary>
        [JsonProperty("convert_trades_economy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ConvertTradesEconomy { get; set; }

        /// <summary>
        /// Name to be displayed while trading with this entity.
        /// </summary>
        [JsonProperty("display_name", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Used to determine if trading with entity opens the new trade screen.
        /// Default: false
        /// </summary>
        [JsonProperty("new_screen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NewScreen { get; set; }

        /// <summary>
        /// Determines if the trades should persist when the mob transforms. This makes it so that
        /// the next time the mob is transformed to something with a trade_table or
        /// economy_trade_table, then it keeps their trades.
        /// Default: false
        /// </summary>
        [JsonProperty("persist_trades", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PersistTrades { get; set; }

        /// <summary>
        /// File path relative to the resource pack root for this entity's trades.
        /// </summary>
        [JsonProperty("table", NullValueHandling = NullValueHandling.Ignore)]
        public string Table { get; set; }
    }

    /// <summary>
    /// Causes an entity to leave a trail of blocks as it moves about the world.
    /// </summary>
    public partial class MinecraftTrail
    {
        [JsonProperty("block_type", NullValueHandling = NullValueHandling.Ignore)]
        public string BlockType { get; set; }

        [JsonProperty("spawn_filter", NullValueHandling = NullValueHandling.Ignore)]
        public Filters? SpawnFilter { get; set; }

        /// <summary>
        /// BlueFrog's Note: Property referenced in docs without type, vector type is assumed
        /// </summary>
        [JsonProperty("spawn_offset", NullValueHandling = NullValueHandling.Ignore)]
        public double[] SpawnOffset { get; set; }
    }

    /// <summary>
    /// Defines an entity's transformation from the current definition into another
    /// </summary>
    public partial class MinecraftTransformation
    {
        /// <summary>
        /// List of components to add to the entity after the transformation
        /// </summary>
        [JsonProperty("add", NullValueHandling = NullValueHandling.Ignore)]
        public Add[] Add { get; set; }

        /// <summary>
        /// Sound to play when the transformation starts
        /// </summary>
        [JsonProperty("begin_transform_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string BeginTransformSound { get; set; }

        /// <summary>
        /// Defines the properties of the delay for the transformation
        /// </summary>
        [JsonProperty("delay", NullValueHandling = NullValueHandling.Ignore)]
        public DelayUnion? Delay { get; set; }

        /// <summary>
        /// Cause the entity to drop all equipment upon transformation
        /// Default: false
        /// </summary>
        [JsonProperty("drop_equipment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DropEquipment { get; set; }

        /// <summary>
        /// Entity Definition that this entity will transform into
        /// </summary>
        [JsonProperty("into", NullValueHandling = NullValueHandling.Ignore)]
        public string Into { get; set; }

        /// <summary>
        /// If this entity has trades and has leveled up, it should maintain that level after
        /// transformation.
        /// Default: false
        /// </summary>
        [JsonProperty("keep_level", NullValueHandling = NullValueHandling.Ignore)]
        public bool? KeepLevel { get; set; }

        /// <summary>
        /// If this entity is owned by another entity, it should remain owned after transformation.
        /// Default: false
        /// </summary>
        [JsonProperty("keep_owner", NullValueHandling = NullValueHandling.Ignore)]
        public bool? KeepOwner { get; set; }

        /// <summary>
        /// Sound to play when the entity is done transforming
        /// </summary>
        [JsonProperty("transformation_sound", NullValueHandling = NullValueHandling.Ignore)]
        public string TransformationSound { get; set; }
    }

    public partial class Add
    {
        /// <summary>
        /// Names of component groups to add
        /// </summary>
        [JsonProperty("component_groups", NullValueHandling = NullValueHandling.Ignore)]
        public string[] ComponentGroups { get; set; }
    }

    public partial class DelayClass
    {
        /// <summary>
        /// Chance that the entity will look for nearby blocks that can speed up the transformation.
        /// Value must be between 0.0 and 1.0
        /// Default: 0.0
        /// </summary>
        [JsonProperty("block_assist_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockAssistChance { get; set; }

        /// <summary>
        /// Chance that, once a block is found, will help speed up the transformation
        /// Default: 0.0
        /// </summary>
        [JsonProperty("block_chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockChance { get; set; }

        /// <summary>
        /// Maximum number of blocks the entity will look for to aid in the transformation. If not
        /// defined or set to 0, it will be set to the block radius
        /// Default: 0
        /// </summary>
        [JsonProperty("block_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? BlockMax { get; set; }

        /// <summary>
        /// Distance in Blocks that the entity will search for blocks that can help the
        /// transformation
        /// Default: 0
        /// </summary>
        [JsonProperty("block_radius", NullValueHandling = NullValueHandling.Ignore)]
        public long? BlockRadius { get; set; }

        /// <summary>
        /// List of blocks that can help the transformation of this entity
        /// </summary>
        [JsonProperty("block_types", NullValueHandling = NullValueHandling.Ignore)]
        public string[] BlockTypes { get; set; }

        /// <summary>
        /// Time in seconds before the entity transforms
        /// Default: 0.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines the rules for a mob to trust players.
    /// </summary>
    public partial class MinecraftTrusting
    {
        /// <summary>
        /// The chance of the entity trusting with each item use between 0.0 and 1.0, where 1.0 is
        /// 100%
        /// Default: 1.0
        /// </summary>
        [JsonProperty("probability", NullValueHandling = NullValueHandling.Ignore)]
        public double? Probability { get; set; }

        /// <summary>
        /// Event to run when this entity becomes trusting
        /// </summary>
        [JsonProperty("trust_event", NullValueHandling = NullValueHandling.Ignore)]
        public OnCelebrationEndEvent TrustEvent { get; set; }

        /// <summary>
        /// The list of items that can be used to get the entity to trust players
        /// </summary>
        [JsonProperty("trust_items", NullValueHandling = NullValueHandling.Ignore)]
        public string[] TrustItems { get; set; }
    }

    /// <summary>
    /// Defines the families this entity belongs to.
    /// </summary>
    public partial class MinecraftTypeFamily
    {
        /// <summary>
        /// List of family names
        /// </summary>
        [JsonProperty("family", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Family { get; set; }
    }

    /// <summary>
    /// Used to differentiate the component group of a variant of an entity from others (e.g.
    /// ocelot, villager)
    /// </summary>
    public partial class MinecraftVariant
    {
        /// <summary>
        /// The ID of the variant. By convention, 0 is the ID of the base entity
        /// Default: 0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    /// <summary>
    /// Sets the speed multiplier for this entity's walk animation speed.
    /// </summary>
    public partial class MinecraftWalkAnimationSpeed
    {
        /// <summary>
        /// The higher the number, the faster the animation for walking plays. A value of 1.0 means
        /// normal speed, while 2.0 means twice as fast
        /// Default: 1.0
        /// </summary>
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    /// <summary>
    /// Defines the rules for a mob to trust players.
    /// </summary>
    public partial class MinecraftWaterMovement
    {
        /// <summary>
        /// Drag factor to determine movement speed when in water.
        /// Default: 0.8
        /// </summary>
        [JsonProperty("drag_factor", NullValueHandling = NullValueHandling.Ignore)]
        public double? DragFactor { get; set; }
    }

    public partial class Description
    {
        /// <summary>
        /// ID used to reference and summon entity
        /// </summary>
        [JsonProperty("identifier", NullValueHandling = NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [JsonProperty("is_experimental", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsExperimental { get; set; }

        [JsonProperty("is_spawnable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSpawnable { get; set; }

        [JsonProperty("is_summonable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSummonable { get; set; }
    }

    public partial class Events
    {
    }

    public enum Test { ClockTime, DistanceToNearestPlayer, HasAbility, HasBiomeTag, HasComponent, HasDamage, HasEquipment, HasMobEffect, HasTag, HasTarget, HasTradeSupply, HourlyClockTime, InCaravan, InClouds, InLava, InWater, InWaterOrRain, IsAltitude, IsAvoidingMobs, IsBiome, IsBlock, IsBrightness, IsClimbing, IsColor, IsDaytime, IsDifficulty, IsFamily, IsGameRule, IsHumid, IsImmobile, IsInVillage, IsLeashed, IsLeashedTo, IsMarkVariant, IsMoving, IsOwner, IsRiding, IsSkinId, IsSleeping, IsSneaking, IsSnowCovered, IsTarget, IsTemperatureType, IsTemperatureValue, IsUnderground, IsUnderwater, IsVariant, IsVisible, IsWeather, MoonIntensity, MoonPhase, OnGround, OnLadder, RiderCount, Trusts };

    /// <summary>
    /// The target of the event
    /// </summary>
    public enum Target { Baby, Block, Other, Self };

    /// <summary>
    /// The minimum difficulty that the world must be on for this entity to break doors.
    /// Default: hard
    /// </summary>
    public enum MinDifficulty { Easy, Hard, Normal, Peaceful };

    /// <summary>
    /// The base shape of this step. Valid values are circle and line
    /// Default: line
    /// </summary>
    public enum Shape { Circle, Line };

    public enum SlotEnum { SlotArmorChest, SlotArmorFeet, SlotArmorHead, SlotArmorLegs, SlotWeaponMainhand, SlotWeaponOffhand };

    /// <summary>
    /// The block types required nearby for the entity to breed.
    ///
    /// Name of the item that can be used to boost.
    ///
    /// Identifier of the item that can be equipped for this slot.
    ///
    /// Item identifier that can be used to heal this entity.
    ///
    /// Defines the item this entity wants to craft with the item defined above. Should be an
    /// item name.
    ///
    /// The name of the item.
    ///
    /// Item identifier of the item to spawn
    /// Default: egg
    ///
    /// Name of the item this entity dislikes and will cause it to get angry if used while
    /// untamed.
    ///
    /// Name of the item this entity likes and can be used to increase this entity's temper.
    ///
    /// The sound to occasionally play.
    ///
    /// The sound event to play when the attack starts
    ///
    /// The sound event to play when this step happens
    ///
    /// Sound to play when the sneeze is about to happen.
    ///
    /// Sound to play when the sneeze occurs.
    ///
    /// The sound event to play for this step
    ///
    /// The sound event to play when using this spell
    ///
    /// Defines what sound to play, if any, when the on_damage filters are met.
    ///
    /// The sound that plays when the projectile hits the ground
    ///
    /// The sound that plays when the projectile hits something
    ///
    /// The sound that plays when the projectile is shot
    ///
    /// Identifier of the sound effect to play when the entity is spawned
    /// Default: plop
    ///
    /// Sound to play when the transformation starts
    ///
    /// Sound to play when the entity is done transforming
    ///
    /// Level sound event to be played as the ambient sound.
    /// Default: ambient
    ///
    /// The event to run when the conditions for this trigger are met
    ///
    /// The event to send to the entity
    ///
    /// Event to run when the entity enters the 'sit' state
    ///
    /// Event to run when the entity exits the 'sit' state
    ///
    /// Event to call when the entity is spawned
    /// Default: minecraft:entity_born
    ///
    /// The entity type of the entities we will spawn in this step
    ///
    /// Actor definition to use as projectile for the ranged attack. The actor definition must
    /// have the projectile component to be able to be shot as a projectile
    ///
    /// Identifier of the entity to spawn, leave empty to spawn the item defined above instead
    ///
    /// Entity Definition that this entity will transform into
    /// </summary>
    public enum Effect { Absorption, BadOmen, Blindness, ConduitPower, FatalPoison, FireResistance, Haste, Heal, HealthBoost, Hunger, InstantDamage, InstantHealth, Invisibility, JumpBoost, Levitation, MiningFatigue, Nausea, NightVision, Poison, Regeneration, Resistance, Saturation, SlowFalling, Slowness, Speed, Strength, VillageHero, WaterBreathing, Weakness, Wither };

    public partial struct FeedItemUnion
    {
        public FeedItemFeedItem FeedItemFeedItem;
        public string String;

        public static implicit operator FeedItemUnion(FeedItemFeedItem FeedItemFeedItem) => new FeedItemUnion { FeedItemFeedItem = FeedItemFeedItem };
        public static implicit operator FeedItemUnion(string String) => new FeedItemUnion { String = String };
    }

    /// <summary>
    /// List of items that can be fed to the entity. Includes 'item' for the item name and
    /// 'growth' to define how much time it grows up by
    /// </summary>
    public partial struct FeedItems
    {
        public FeedItemUnion[] AnythingArray;
        public string String;

        public static implicit operator FeedItems(FeedItemUnion[] AnythingArray) => new FeedItems { AnythingArray = AnythingArray };
        public static implicit operator FeedItems(string String) => new FeedItems { String = String };
    }

    /// <summary>
    /// Conditions that make this entry in the list valid
    ///
    /// The list of conditions for this trigger
    ///
    /// The filters to use when determining if this potion can be selected.
    ///
    /// Filter to determine the conditions for this mob to look at the entity
    ///
    ///
    ///
    /// The filters to run when attempting to fall in love.
    ///
    /// The list of conditions that must be satisfied before the Actor is despawned
    ///
    /// The filter group that defines the conditions for using this item to heal the entity.
    ///
    /// Defines the entities that can trigger this component.
    ///
    /// If present, the specified entity will only spawn if the filter evaluates to true
    /// </summary>
    public partial struct Filters
    {
        public BroadcastFilterElement[] BroadcastFilterElementArray;
        public Filter Filter;

        public static implicit operator Filters(BroadcastFilterElement[] BroadcastFilterElementArray) => new Filters { BroadcastFilterElementArray = BroadcastFilterElementArray };
        public static implicit operator Filters(Filter Filter) => new Filters { Filter = Filter };
    }

    public partial struct Damage
    {
        public double? Double;
        public double[] DoubleArray;
        public RangeSchema RangeSchema;

        public static implicit operator Damage(double Double) => new Damage { Double = Double };
        public static implicit operator Damage(double[] DoubleArray) => new Damage { DoubleArray = DoubleArray };
        public static implicit operator Damage(RangeSchema RangeSchema) => new Damage { RangeSchema = RangeSchema };
    }

    public partial struct EntityTypesUnion
    {
        public EntityTypes EntityTypes;
        public EntityTypes[] EntityTypesArray;

        public static implicit operator EntityTypesUnion(EntityTypes EntityTypes) => new EntityTypesUnion { EntityTypes = EntityTypes };
        public static implicit operator EntityTypesUnion(EntityTypes[] EntityTypesArray) => new EntityTypesUnion { EntityTypesArray = EntityTypesArray };
    }

    /// <summary>
    /// The range of time in seconds this mob will stare at the player holding a food they like,
    /// begging for it
    /// Default: [2, 4]
    ///
    /// When the mob finds a target, the range of height in blocks above the target to start the
    /// anchor point.
    /// Default: [0.0, 0.0]
    ///
    /// The range of height in blocks offset the mob can have from it's anchor point.
    /// Default: [0.0, 0.0]
    ///
    /// Range of radius in blocks of the circle to move around.
    /// Default: [5.0, 15.0]
    ///
    /// The valid times of day that this goal can be used.  For reference: noon is 0.0, sunset is
    /// 0.25, midnight is 0.5, and sunrise is 0.75, and back to noon for 1.0.
    /// Default: [0.0, 1.0]
    ///
    /// Range of time in seconds the mob will float around before landing and choosing to do
    /// something else
    /// Default: [0.0, 0.0]
    ///
    /// Time range to look at the entity
    /// Default: [2, 4]
    ///
    /// The range of time in seconds the mob will stay looking in a random direction before
    /// looking elsewhere
    /// Default: [2, 4]
    ///
    /// Range of time in seconds between uses of this goal.
    /// Default: [10.0, 20.0]
    ///
    /// Delay after landing when using the slime move control.
    /// Default: [0.0, 0.0]
    /// </summary>
    public partial struct LookTime
    {
        public double[] DoubleArray;
        public RangeSchema RangeSchema;

        public static implicit operator LookTime(double[] DoubleArray) => new LookTime { DoubleArray = DoubleArray };
        public static implicit operator LookTime(RangeSchema RangeSchema) => new LookTime { RangeSchema = RangeSchema };
    }

    public partial struct On
    {
        public OnCelebrationEndEvent OnCelebrationEndEvent;
        public OnCelebrationEndEvent[] OnCelebrationEndEventArray;

        public static implicit operator On(OnCelebrationEndEvent OnCelebrationEndEvent) => new On { OnCelebrationEndEvent = OnCelebrationEndEvent };
        public static implicit operator On(OnCelebrationEndEvent[] OnCelebrationEndEventArray) => new On { OnCelebrationEndEventArray = OnCelebrationEndEventArray };
    }

    /// <summary>
    /// The entity type that this entity is allowed to mingle with
    /// Default: empty
    ///
    /// The block types required nearby for the entity to breed.
    ///
    /// List of sounds to play when the interaction occurs.
    /// BlueFrog's Note: Documentation states 'list', but all examples use single string
    /// </summary>
    public partial struct MinglePartnerType
    {
        public string String;
        public string[] StringArray;

        public static implicit operator MinglePartnerType(string String) => new MinglePartnerType { String = String };
        public static implicit operator MinglePartnerType(string[] StringArray) => new MinglePartnerType { StringArray = StringArray };
    }

    /// <summary>
    /// The list of entity definitions that this entity can breed with.
    /// </summary>
    public partial struct BreedsWithUnion
    {
        public BreedsWith BreedsWith;
        public BreedsWith[] BreedsWithArray;

        public static implicit operator BreedsWithUnion(BreedsWith BreedsWith) => new BreedsWithUnion { BreedsWith = BreedsWith };
        public static implicit operator BreedsWithUnion(BreedsWith[] BreedsWithArray) => new BreedsWithUnion { BreedsWithArray = BreedsWithArray };
    }

    /// <summary>
    /// The list of nearby block requirements to get the entity into the 'love' state.
    /// BlueFrog's Notes: Docs state 'list', but only example shows object
    /// </summary>
    public partial struct EnvironmentRequirementsUnion
    {
        public EnvironmentRequirements EnvironmentRequirements;
        public EnvironmentRequirements[] EnvironmentRequirementsArray;

        public static implicit operator EnvironmentRequirementsUnion(EnvironmentRequirements EnvironmentRequirements) => new EnvironmentRequirementsUnion { EnvironmentRequirements = EnvironmentRequirements };
        public static implicit operator EnvironmentRequirementsUnion(EnvironmentRequirements[] EnvironmentRequirementsArray) => new EnvironmentRequirementsUnion { EnvironmentRequirementsArray = EnvironmentRequirementsArray };
    }

    /// <summary>
    /// Specifies if/how a mob burns in daylight.
    /// </summary>
    public partial struct MinecraftBurnsInDaylight
    {
        public Dictionary<string, object> AnythingMap;
        public bool? Bool;

        public static implicit operator MinecraftBurnsInDaylight(Dictionary<string, object> AnythingMap) => new MinecraftBurnsInDaylight { AnythingMap = AnythingMap };
        public static implicit operator MinecraftBurnsInDaylight(bool Bool) => new MinecraftBurnsInDaylight { Bool = Bool };
    }

    /// <summary>
    /// List of triggers with the events to call when taking specific kinds of damage.
    /// </summary>
    public partial struct MinecraftDamageSensorTriggers
    {
        public DamageSensor DamageSensor;
        public DamageSensor[] DamageSensorArray;

        public static implicit operator MinecraftDamageSensorTriggers(DamageSensor DamageSensor) => new MinecraftDamageSensorTriggers { DamageSensor = DamageSensor };
        public static implicit operator MinecraftDamageSensorTriggers(DamageSensor[] DamageSensorArray) => new MinecraftDamageSensorTriggers { DamageSensorArray = DamageSensorArray };
    }

    /// <summary>
    /// The list of triggers that fire when the environment conditions match the given filter
    /// criteria.
    /// </summary>
    public partial struct MinecraftEnvironmentSensorTriggers
    {
        public EnvironmentSensor EnvironmentSensor;
        public EnvironmentSensor[] EnvironmentSensorArray;

        public static implicit operator MinecraftEnvironmentSensorTriggers(EnvironmentSensor EnvironmentSensor) => new MinecraftEnvironmentSensorTriggers { EnvironmentSensor = EnvironmentSensor };
        public static implicit operator MinecraftEnvironmentSensorTriggers(EnvironmentSensor[] EnvironmentSensorArray) => new MinecraftEnvironmentSensorTriggers { EnvironmentSensorArray = EnvironmentSensorArray };
    }

    /// <summary>
    /// The range for the random amount of time the fuse will be lit before exploding, a negative
    /// value means the explosion will be immediate.
    /// Default: [0.0, 0.0]
    /// </summary>
    public partial struct FuseLengthUnion
    {
        public double? Double;
        public FuseLengthClass FuseLengthClass;

        public static implicit operator FuseLengthUnion(double Double) => new FuseLengthUnion { Double = Double };
        public static implicit operator FuseLengthUnion(FuseLengthClass FuseLengthClass) => new FuseLengthUnion { FuseLengthClass = FuseLengthClass };
    }

    /// <summary>
    /// Sets that this entity doesn't take damage from fire.
    /// </summary>
    public partial struct MinecraftFireImmuneUnion
    {
        public bool? Bool;
        public MinecraftFireImmuneClass MinecraftFireImmuneClass;

        public static implicit operator MinecraftFireImmuneUnion(bool Bool) => new MinecraftFireImmuneUnion { Bool = Bool };
        public static implicit operator MinecraftFireImmuneUnion(MinecraftFireImmuneClass MinecraftFireImmuneClass) => new MinecraftFireImmuneUnion { MinecraftFireImmuneClass = MinecraftFireImmuneClass };
    }

    /// <summary>
    /// Event to fire when the interaction occurs.
    /// </summary>
    public partial struct OnInteractUnion
    {
        public OnInteract OnInteract;
        public OnInteract[] OnInteractArray;

        public static implicit operator OnInteractUnion(OnInteract OnInteract) => new OnInteractUnion { OnInteract = OnInteract };
        public static implicit operator OnInteractUnion(OnInteract[] OnInteractArray) => new OnInteractUnion { OnInteractArray = OnInteractArray };
    }

    public partial struct InteractionsUnion
    {
        public Interactions Interactions;
        public Interactions[] InteractionsArray;

        public static implicit operator InteractionsUnion(Interactions Interactions) => new InteractionsUnion { Interactions = Interactions };
        public static implicit operator InteractionsUnion(Interactions[] InteractionsArray) => new InteractionsUnion { InteractionsArray = InteractionsArray };
    }

    /// <summary>
    /// The event identifier to run when the entities specified in filters look at this entity.
    /// </summary>
    public partial struct LookEvent
    {
        public OnCelebrationEndEvent OnCelebrationEndEvent;
        public string String;

        public static implicit operator LookEvent(OnCelebrationEndEvent OnCelebrationEndEvent) => new LookEvent { OnCelebrationEndEvent = OnCelebrationEndEvent };
        public static implicit operator LookEvent(string String) => new LookEvent { String = String };
    }

    /// <summary>
    /// Describes the special names for this entity and the events to call when the entity
    /// acquires those names
    /// </summary>
    public partial struct NameActionsUnion
    {
        public NameActions NameActions;
        public NameActions[] NameActionsArray;

        public static implicit operator NameActionsUnion(NameActions NameActions) => new NameActionsUnion { NameActions = NameActions };
        public static implicit operator NameActionsUnion(NameActions[] NameActionsArray) => new NameActionsUnion { NameActionsArray = NameActionsArray };
    }

    /// <summary>
    /// The list of positions and number of riders for each position for entities riding this
    /// entity
    /// </summary>
    public partial struct SeatsUnion
    {
        public Seats Seats;
        public Seats[] SeatsArray;

        public static implicit operator SeatsUnion(Seats Seats) => new SeatsUnion { Seats = Seats };
        public static implicit operator SeatsUnion(Seats[] SeatsArray) => new SeatsUnion { SeatsArray = SeatsArray };
    }

    /// <summary>
    /// Adds a timer after which this entity will spawn another entity or item (similar to
    /// vanilla's chicken's egg-laying behavior).
    /// </summary>
    public partial struct MinecraftSpawnEntity
    {
        public SpawnEntity SpawnEntity;
        public SpawnEntity[] SpawnEntityArray;

        public static implicit operator MinecraftSpawnEntity(SpawnEntity SpawnEntity) => new MinecraftSpawnEntity { SpawnEntity = SpawnEntity };
        public static implicit operator MinecraftSpawnEntity(SpawnEntity[] SpawnEntityArray) => new MinecraftSpawnEntity { SpawnEntityArray = SpawnEntityArray };
    }

    /// <summary>
    /// Defines the properties of the delay for the transformation
    /// </summary>
    public partial struct DelayUnion
    {
        public DelayClass DelayClass;
        public double? Double;

        public static implicit operator DelayUnion(DelayClass DelayClass) => new DelayUnion { DelayClass = DelayClass };
        public static implicit operator DelayUnion(double Double) => new DelayUnion { Double = Double };
    }

    public partial class EntityFile
    {
        public static EntityFile FromJson(string json) => JsonConvert.DeserializeObject<EntityFile>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this EntityFile self) => JsonConvert.SerializeObject(self, Formatting.Indented, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FeedItemsConverter.Singleton,
                FeedItemUnionConverter.Singleton,
                FiltersConverter.Singleton,
                TestConverter.Singleton,
                TargetConverter.Singleton,
                MinDifficultyConverter.Singleton,
                DamageConverter.Singleton,
                EntityTypesUnionConverter.Singleton,
                LookTimeConverter.Singleton,
                OnConverter.Singleton,
                MinglePartnerTypeConverter.Singleton,
                ShapeConverter.Singleton,
                BreedsWithUnionConverter.Singleton,
                EnvironmentRequirementsUnionConverter.Singleton,
                MinecraftBurnsInDaylightConverter.Singleton,
                MinecraftDamageSensorTriggersConverter.Singleton,
                MinecraftEnvironmentSensorTriggersConverter.Singleton,
                SlotEnumConverter.Singleton,
                FuseLengthUnionConverter.Singleton,
                MinecraftFireImmuneUnionConverter.Singleton,
                InteractionsUnionConverter.Singleton,
                OnInteractUnionConverter.Singleton,
                LookEventConverter.Singleton,
                NameActionsUnionConverter.Singleton,
                EffectConverter.Singleton,
                SeatsUnionConverter.Singleton,
                MinecraftSpawnEntityConverter.Singleton,
                DelayUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FeedItemsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FeedItems) || t == typeof(FeedItems?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new FeedItems { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<FeedItemUnion[]>(reader);
                    return new FeedItems { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type FeedItems");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FeedItems)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            throw new Exception("Cannot marshal type FeedItems");
        }

        public static readonly FeedItemsConverter Singleton = new FeedItemsConverter();
    }

    internal class FeedItemUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FeedItemUnion) || t == typeof(FeedItemUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new FeedItemUnion { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FeedItemFeedItem>(reader);
                    return new FeedItemUnion { FeedItemFeedItem = objectValue };
            }
            throw new Exception("Cannot unmarshal type FeedItemUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FeedItemUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.FeedItemFeedItem != null)
            {
                serializer.Serialize(writer, value.FeedItemFeedItem);
                return;
            }
            throw new Exception("Cannot marshal type FeedItemUnion");
        }

        public static readonly FeedItemUnionConverter Singleton = new FeedItemUnionConverter();
    }

    internal class FiltersConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Filters) || t == typeof(Filters?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Filter>(reader);
                    return new Filters { Filter = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<BroadcastFilterElement[]>(reader);
                    return new Filters { BroadcastFilterElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Filters");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Filters)untypedValue;
            if (value.BroadcastFilterElementArray != null)
            {
                serializer.Serialize(writer, value.BroadcastFilterElementArray);
                return;
            }
            if (value.Filter != null)
            {
                serializer.Serialize(writer, value.Filter);
                return;
            }
            throw new Exception("Cannot marshal type Filters");
        }

        public static readonly FiltersConverter Singleton = new FiltersConverter();
    }

    internal class TestConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Test) || t == typeof(Test?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "clock_time":
                    return Test.ClockTime;
                case "distance_to_nearest_player":
                    return Test.DistanceToNearestPlayer;
                case "has_ability":
                    return Test.HasAbility;
                case "has_biome_tag":
                    return Test.HasBiomeTag;
                case "has_component":
                    return Test.HasComponent;
                case "has_damage":
                    return Test.HasDamage;
                case "has_equipment":
                    return Test.HasEquipment;
                case "has_mob_effect":
                    return Test.HasMobEffect;
                case "has_tag":
                    return Test.HasTag;
                case "has_target":
                    return Test.HasTarget;
                case "has_trade_supply":
                    return Test.HasTradeSupply;
                case "hourly_clock_time":
                    return Test.HourlyClockTime;
                case "in_caravan":
                    return Test.InCaravan;
                case "in_clouds":
                    return Test.InClouds;
                case "in_lava":
                    return Test.InLava;
                case "in_water":
                    return Test.InWater;
                case "in_water_or_rain":
                    return Test.InWaterOrRain;
                case "is_altitude":
                    return Test.IsAltitude;
                case "is_avoiding_mobs":
                    return Test.IsAvoidingMobs;
                case "is_biome":
                    return Test.IsBiome;
                case "is_block":
                    return Test.IsBlock;
                case "is_brightness":
                    return Test.IsBrightness;
                case "is_climbing":
                    return Test.IsClimbing;
                case "is_color":
                    return Test.IsColor;
                case "is_daytime":
                    return Test.IsDaytime;
                case "is_difficulty":
                    return Test.IsDifficulty;
                case "is_family":
                    return Test.IsFamily;
                case "is_game_rule":
                    return Test.IsGameRule;
                case "is_humid":
                    return Test.IsHumid;
                case "is_immobile":
                    return Test.IsImmobile;
                case "is_in_village":
                    return Test.IsInVillage;
                case "is_leashed":
                    return Test.IsLeashed;
                case "is_leashed_to":
                    return Test.IsLeashedTo;
                case "is_mark_variant":
                    return Test.IsMarkVariant;
                case "is_moving":
                    return Test.IsMoving;
                case "is_owner":
                    return Test.IsOwner;
                case "is_riding":
                    return Test.IsRiding;
                case "is_skin_id":
                    return Test.IsSkinId;
                case "is_sleeping":
                    return Test.IsSleeping;
                case "is_sneaking":
                    return Test.IsSneaking;
                case "is_snow_covered":
                    return Test.IsSnowCovered;
                case "is_target":
                    return Test.IsTarget;
                case "is_temperature_type":
                    return Test.IsTemperatureType;
                case "is_temperature_value":
                    return Test.IsTemperatureValue;
                case "is_underground":
                    return Test.IsUnderground;
                case "is_underwater":
                    return Test.IsUnderwater;
                case "is_variant":
                    return Test.IsVariant;
                case "is_visible":
                    return Test.IsVisible;
                case "is_weather":
                    return Test.IsWeather;
                case "moon_intensity":
                    return Test.MoonIntensity;
                case "moon_phase":
                    return Test.MoonPhase;
                case "on_ground":
                    return Test.OnGround;
                case "on_ladder":
                    return Test.OnLadder;
                case "rider_count":
                    return Test.RiderCount;
                case "trusts":
                    return Test.Trusts;
            }
            throw new Exception("Cannot unmarshal type Test");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Test)untypedValue;
            switch (value)
            {
                case Test.ClockTime:
                    serializer.Serialize(writer, "clock_time");
                    return;
                case Test.DistanceToNearestPlayer:
                    serializer.Serialize(writer, "distance_to_nearest_player");
                    return;
                case Test.HasAbility:
                    serializer.Serialize(writer, "has_ability");
                    return;
                case Test.HasBiomeTag:
                    serializer.Serialize(writer, "has_biome_tag");
                    return;
                case Test.HasComponent:
                    serializer.Serialize(writer, "has_component");
                    return;
                case Test.HasDamage:
                    serializer.Serialize(writer, "has_damage");
                    return;
                case Test.HasEquipment:
                    serializer.Serialize(writer, "has_equipment");
                    return;
                case Test.HasMobEffect:
                    serializer.Serialize(writer, "has_mob_effect");
                    return;
                case Test.HasTag:
                    serializer.Serialize(writer, "has_tag");
                    return;
                case Test.HasTarget:
                    serializer.Serialize(writer, "has_target");
                    return;
                case Test.HasTradeSupply:
                    serializer.Serialize(writer, "has_trade_supply");
                    return;
                case Test.HourlyClockTime:
                    serializer.Serialize(writer, "hourly_clock_time");
                    return;
                case Test.InCaravan:
                    serializer.Serialize(writer, "in_caravan");
                    return;
                case Test.InClouds:
                    serializer.Serialize(writer, "in_clouds");
                    return;
                case Test.InLava:
                    serializer.Serialize(writer, "in_lava");
                    return;
                case Test.InWater:
                    serializer.Serialize(writer, "in_water");
                    return;
                case Test.InWaterOrRain:
                    serializer.Serialize(writer, "in_water_or_rain");
                    return;
                case Test.IsAltitude:
                    serializer.Serialize(writer, "is_altitude");
                    return;
                case Test.IsAvoidingMobs:
                    serializer.Serialize(writer, "is_avoiding_mobs");
                    return;
                case Test.IsBiome:
                    serializer.Serialize(writer, "is_biome");
                    return;
                case Test.IsBlock:
                    serializer.Serialize(writer, "is_block");
                    return;
                case Test.IsBrightness:
                    serializer.Serialize(writer, "is_brightness");
                    return;
                case Test.IsClimbing:
                    serializer.Serialize(writer, "is_climbing");
                    return;
                case Test.IsColor:
                    serializer.Serialize(writer, "is_color");
                    return;
                case Test.IsDaytime:
                    serializer.Serialize(writer, "is_daytime");
                    return;
                case Test.IsDifficulty:
                    serializer.Serialize(writer, "is_difficulty");
                    return;
                case Test.IsFamily:
                    serializer.Serialize(writer, "is_family");
                    return;
                case Test.IsGameRule:
                    serializer.Serialize(writer, "is_game_rule");
                    return;
                case Test.IsHumid:
                    serializer.Serialize(writer, "is_humid");
                    return;
                case Test.IsImmobile:
                    serializer.Serialize(writer, "is_immobile");
                    return;
                case Test.IsInVillage:
                    serializer.Serialize(writer, "is_in_village");
                    return;
                case Test.IsLeashed:
                    serializer.Serialize(writer, "is_leashed");
                    return;
                case Test.IsLeashedTo:
                    serializer.Serialize(writer, "is_leashed_to");
                    return;
                case Test.IsMarkVariant:
                    serializer.Serialize(writer, "is_mark_variant");
                    return;
                case Test.IsMoving:
                    serializer.Serialize(writer, "is_moving");
                    return;
                case Test.IsOwner:
                    serializer.Serialize(writer, "is_owner");
                    return;
                case Test.IsRiding:
                    serializer.Serialize(writer, "is_riding");
                    return;
                case Test.IsSkinId:
                    serializer.Serialize(writer, "is_skin_id");
                    return;
                case Test.IsSleeping:
                    serializer.Serialize(writer, "is_sleeping");
                    return;
                case Test.IsSneaking:
                    serializer.Serialize(writer, "is_sneaking");
                    return;
                case Test.IsSnowCovered:
                    serializer.Serialize(writer, "is_snow_covered");
                    return;
                case Test.IsTarget:
                    serializer.Serialize(writer, "is_target");
                    return;
                case Test.IsTemperatureType:
                    serializer.Serialize(writer, "is_temperature_type");
                    return;
                case Test.IsTemperatureValue:
                    serializer.Serialize(writer, "is_temperature_value");
                    return;
                case Test.IsUnderground:
                    serializer.Serialize(writer, "is_underground");
                    return;
                case Test.IsUnderwater:
                    serializer.Serialize(writer, "is_underwater");
                    return;
                case Test.IsVariant:
                    serializer.Serialize(writer, "is_variant");
                    return;
                case Test.IsVisible:
                    serializer.Serialize(writer, "is_visible");
                    return;
                case Test.IsWeather:
                    serializer.Serialize(writer, "is_weather");
                    return;
                case Test.MoonIntensity:
                    serializer.Serialize(writer, "moon_intensity");
                    return;
                case Test.MoonPhase:
                    serializer.Serialize(writer, "moon_phase");
                    return;
                case Test.OnGround:
                    serializer.Serialize(writer, "on_ground");
                    return;
                case Test.OnLadder:
                    serializer.Serialize(writer, "on_ladder");
                    return;
                case Test.RiderCount:
                    serializer.Serialize(writer, "rider_count");
                    return;
                case Test.Trusts:
                    serializer.Serialize(writer, "trusts");
                    return;
            }
            throw new Exception("Cannot marshal type Test");
        }

        public static readonly TestConverter Singleton = new TestConverter();
    }

    internal class TargetConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Target) || t == typeof(Target?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "baby":
                    return Target.Baby;
                case "block":
                    return Target.Block;
                case "other":
                    return Target.Other;
                case "self":
                    return Target.Self;
            }
            throw new Exception("Cannot unmarshal type Target");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Target)untypedValue;
            switch (value)
            {
                case Target.Baby:
                    serializer.Serialize(writer, "baby");
                    return;
                case Target.Block:
                    serializer.Serialize(writer, "block");
                    return;
                case Target.Other:
                    serializer.Serialize(writer, "other");
                    return;
                case Target.Self:
                    serializer.Serialize(writer, "self");
                    return;
            }
            throw new Exception("Cannot marshal type Target");
        }

        public static readonly TargetConverter Singleton = new TargetConverter();
    }

    internal class MinDifficultyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinDifficulty) || t == typeof(MinDifficulty?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "easy":
                    return MinDifficulty.Easy;
                case "hard":
                    return MinDifficulty.Hard;
                case "normal":
                    return MinDifficulty.Normal;
                case "peaceful":
                    return MinDifficulty.Peaceful;
            }
            throw new Exception("Cannot unmarshal type MinDifficulty");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MinDifficulty)untypedValue;
            switch (value)
            {
                case MinDifficulty.Easy:
                    serializer.Serialize(writer, "easy");
                    return;
                case MinDifficulty.Hard:
                    serializer.Serialize(writer, "hard");
                    return;
                case MinDifficulty.Normal:
                    serializer.Serialize(writer, "normal");
                    return;
                case MinDifficulty.Peaceful:
                    serializer.Serialize(writer, "peaceful");
                    return;
            }
            throw new Exception("Cannot marshal type MinDifficulty");
        }

        public static readonly MinDifficultyConverter Singleton = new MinDifficultyConverter();
    }

    internal class DamageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Damage) || t == typeof(Damage?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Damage { Double = doubleValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<RangeSchema>(reader);
                    return new Damage { RangeSchema = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<double[]>(reader);
                    return new Damage { DoubleArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Damage");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Damage)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.DoubleArray != null)
            {
                serializer.Serialize(writer, value.DoubleArray);
                return;
            }
            if (value.RangeSchema != null)
            {
                serializer.Serialize(writer, value.RangeSchema);
                return;
            }
            throw new Exception("Cannot marshal type Damage");
        }

        public static readonly DamageConverter Singleton = new DamageConverter();
    }

    internal class EntityTypesUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EntityTypesUnion) || t == typeof(EntityTypesUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<EntityTypes>(reader);
                    return new EntityTypesUnion { EntityTypes = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<EntityTypes[]>(reader);
                    return new EntityTypesUnion { EntityTypesArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type EntityTypesUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (EntityTypesUnion)untypedValue;
            if (value.EntityTypesArray != null)
            {
                serializer.Serialize(writer, value.EntityTypesArray);
                return;
            }
            if (value.EntityTypes != null)
            {
                serializer.Serialize(writer, value.EntityTypes);
                return;
            }
            throw new Exception("Cannot marshal type EntityTypesUnion");
        }

        public static readonly EntityTypesUnionConverter Singleton = new EntityTypesUnionConverter();
    }

    internal class LookTimeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LookTime) || t == typeof(LookTime?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<RangeSchema>(reader);
                    return new LookTime { RangeSchema = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<double[]>(reader);
                    return new LookTime { DoubleArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type LookTime");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (LookTime)untypedValue;
            if (value.DoubleArray != null)
            {
                serializer.Serialize(writer, value.DoubleArray);
                return;
            }
            if (value.RangeSchema != null)
            {
                serializer.Serialize(writer, value.RangeSchema);
                return;
            }
            throw new Exception("Cannot marshal type LookTime");
        }

        public static readonly LookTimeConverter Singleton = new LookTimeConverter();
    }

    internal class OnConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(On) || t == typeof(On?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<OnCelebrationEndEvent>(reader);
                    return new On { OnCelebrationEndEvent = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<OnCelebrationEndEvent[]>(reader);
                    return new On { OnCelebrationEndEventArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type On");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (On)untypedValue;
            if (value.OnCelebrationEndEventArray != null)
            {
                serializer.Serialize(writer, value.OnCelebrationEndEventArray);
                return;
            }
            if (value.OnCelebrationEndEvent != null)
            {
                serializer.Serialize(writer, value.OnCelebrationEndEvent);
                return;
            }
            throw new Exception("Cannot marshal type On");
        }

        public static readonly OnConverter Singleton = new OnConverter();
    }

    internal class MinglePartnerTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinglePartnerType) || t == typeof(MinglePartnerType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new MinglePartnerType { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<string[]>(reader);
                    return new MinglePartnerType { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type MinglePartnerType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinglePartnerType)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type MinglePartnerType");
        }

        public static readonly MinglePartnerTypeConverter Singleton = new MinglePartnerTypeConverter();
    }

    internal class ShapeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Shape) || t == typeof(Shape?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "circle":
                    return Shape.Circle;
                case "line":
                    return Shape.Line;
            }
            throw new Exception("Cannot unmarshal type Shape");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Shape)untypedValue;
            switch (value)
            {
                case Shape.Circle:
                    serializer.Serialize(writer, "circle");
                    return;
                case Shape.Line:
                    serializer.Serialize(writer, "line");
                    return;
            }
            throw new Exception("Cannot marshal type Shape");
        }

        public static readonly ShapeConverter Singleton = new ShapeConverter();
    }

    internal class BreedsWithUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BreedsWithUnion) || t == typeof(BreedsWithUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<BreedsWith>(reader);
                    return new BreedsWithUnion { BreedsWith = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<BreedsWith[]>(reader);
                    return new BreedsWithUnion { BreedsWithArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type BreedsWithUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (BreedsWithUnion)untypedValue;
            if (value.BreedsWithArray != null)
            {
                serializer.Serialize(writer, value.BreedsWithArray);
                return;
            }
            if (value.BreedsWith != null)
            {
                serializer.Serialize(writer, value.BreedsWith);
                return;
            }
            throw new Exception("Cannot marshal type BreedsWithUnion");
        }

        public static readonly BreedsWithUnionConverter Singleton = new BreedsWithUnionConverter();
    }

    internal class EnvironmentRequirementsUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EnvironmentRequirementsUnion) || t == typeof(EnvironmentRequirementsUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<EnvironmentRequirements>(reader);
                    return new EnvironmentRequirementsUnion { EnvironmentRequirements = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<EnvironmentRequirements[]>(reader);
                    return new EnvironmentRequirementsUnion { EnvironmentRequirementsArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type EnvironmentRequirementsUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (EnvironmentRequirementsUnion)untypedValue;
            if (value.EnvironmentRequirementsArray != null)
            {
                serializer.Serialize(writer, value.EnvironmentRequirementsArray);
                return;
            }
            if (value.EnvironmentRequirements != null)
            {
                serializer.Serialize(writer, value.EnvironmentRequirements);
                return;
            }
            throw new Exception("Cannot marshal type EnvironmentRequirementsUnion");
        }

        public static readonly EnvironmentRequirementsUnionConverter Singleton = new EnvironmentRequirementsUnionConverter();
    }

    internal class PurpleMinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= 0 && value <= 16)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double)untypedValue;
            if (value >= 0 && value <= 16)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly PurpleMinMaxValueCheckConverter Singleton = new PurpleMinMaxValueCheckConverter();
    }

    internal class MinecraftBurnsInDaylightConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinecraftBurnsInDaylight) || t == typeof(MinecraftBurnsInDaylight?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new MinecraftBurnsInDaylight { Bool = boolValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, object>>(reader);
                    return new MinecraftBurnsInDaylight { AnythingMap = objectValue };
            }
            throw new Exception("Cannot unmarshal type MinecraftBurnsInDaylight");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinecraftBurnsInDaylight)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.AnythingMap != null)
            {
                serializer.Serialize(writer, value.AnythingMap);
                return;
            }
            throw new Exception("Cannot marshal type MinecraftBurnsInDaylight");
        }

        public static readonly MinecraftBurnsInDaylightConverter Singleton = new MinecraftBurnsInDaylightConverter();
    }

    internal class MinecraftDamageSensorTriggersConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinecraftDamageSensorTriggers) || t == typeof(MinecraftDamageSensorTriggers?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<DamageSensor>(reader);
                    return new MinecraftDamageSensorTriggers { DamageSensor = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<DamageSensor[]>(reader);
                    return new MinecraftDamageSensorTriggers { DamageSensorArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type MinecraftDamageSensorTriggers");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinecraftDamageSensorTriggers)untypedValue;
            if (value.DamageSensorArray != null)
            {
                serializer.Serialize(writer, value.DamageSensorArray);
                return;
            }
            if (value.DamageSensor != null)
            {
                serializer.Serialize(writer, value.DamageSensor);
                return;
            }
            throw new Exception("Cannot marshal type MinecraftDamageSensorTriggers");
        }

        public static readonly MinecraftDamageSensorTriggersConverter Singleton = new MinecraftDamageSensorTriggersConverter();
    }

    internal class MinecraftEnvironmentSensorTriggersConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinecraftEnvironmentSensorTriggers) || t == typeof(MinecraftEnvironmentSensorTriggers?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<EnvironmentSensor>(reader);
                    return new MinecraftEnvironmentSensorTriggers { EnvironmentSensor = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<EnvironmentSensor[]>(reader);
                    return new MinecraftEnvironmentSensorTriggers { EnvironmentSensorArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type MinecraftEnvironmentSensorTriggers");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinecraftEnvironmentSensorTriggers)untypedValue;
            if (value.EnvironmentSensorArray != null)
            {
                serializer.Serialize(writer, value.EnvironmentSensorArray);
                return;
            }
            if (value.EnvironmentSensor != null)
            {
                serializer.Serialize(writer, value.EnvironmentSensor);
                return;
            }
            throw new Exception("Cannot marshal type MinecraftEnvironmentSensorTriggers");
        }

        public static readonly MinecraftEnvironmentSensorTriggersConverter Singleton = new MinecraftEnvironmentSensorTriggersConverter();
    }

    internal class SlotEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SlotEnum) || t == typeof(SlotEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "slot.armor.chest":
                    return SlotEnum.SlotArmorChest;
                case "slot.armor.feet":
                    return SlotEnum.SlotArmorFeet;
                case "slot.armor.head":
                    return SlotEnum.SlotArmorHead;
                case "slot.armor.legs":
                    return SlotEnum.SlotArmorLegs;
                case "slot.weapon.mainhand":
                    return SlotEnum.SlotWeaponMainhand;
                case "slot.weapon.offhand":
                    return SlotEnum.SlotWeaponOffhand;
            }
            throw new Exception("Cannot unmarshal type SlotEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SlotEnum)untypedValue;
            switch (value)
            {
                case SlotEnum.SlotArmorChest:
                    serializer.Serialize(writer, "slot.armor.chest");
                    return;
                case SlotEnum.SlotArmorFeet:
                    serializer.Serialize(writer, "slot.armor.feet");
                    return;
                case SlotEnum.SlotArmorHead:
                    serializer.Serialize(writer, "slot.armor.head");
                    return;
                case SlotEnum.SlotArmorLegs:
                    serializer.Serialize(writer, "slot.armor.legs");
                    return;
                case SlotEnum.SlotWeaponMainhand:
                    serializer.Serialize(writer, "slot.weapon.mainhand");
                    return;
                case SlotEnum.SlotWeaponOffhand:
                    serializer.Serialize(writer, "slot.weapon.offhand");
                    return;
            }
            throw new Exception("Cannot marshal type SlotEnum");
        }

        public static readonly SlotEnumConverter Singleton = new SlotEnumConverter();
    }

    internal class FuseLengthUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FuseLengthUnion) || t == typeof(FuseLengthUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new FuseLengthUnion { Double = doubleValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FuseLengthClass>(reader);
                    return new FuseLengthUnion { FuseLengthClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type FuseLengthUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FuseLengthUnion)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.FuseLengthClass != null)
            {
                serializer.Serialize(writer, value.FuseLengthClass);
                return;
            }
            throw new Exception("Cannot marshal type FuseLengthUnion");
        }

        public static readonly FuseLengthUnionConverter Singleton = new FuseLengthUnionConverter();
    }

    internal class MinecraftFireImmuneUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinecraftFireImmuneUnion) || t == typeof(MinecraftFireImmuneUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new MinecraftFireImmuneUnion { Bool = boolValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<MinecraftFireImmuneClass>(reader);
                    return new MinecraftFireImmuneUnion { MinecraftFireImmuneClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type MinecraftFireImmuneUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinecraftFireImmuneUnion)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.MinecraftFireImmuneClass != null)
            {
                serializer.Serialize(writer, value.MinecraftFireImmuneClass);
                return;
            }
            throw new Exception("Cannot marshal type MinecraftFireImmuneUnion");
        }

        public static readonly MinecraftFireImmuneUnionConverter Singleton = new MinecraftFireImmuneUnionConverter();
    }

    internal class InteractionsUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InteractionsUnion) || t == typeof(InteractionsUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Interactions>(reader);
                    return new InteractionsUnion { Interactions = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<Interactions[]>(reader);
                    return new InteractionsUnion { InteractionsArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type InteractionsUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (InteractionsUnion)untypedValue;
            if (value.InteractionsArray != null)
            {
                serializer.Serialize(writer, value.InteractionsArray);
                return;
            }
            if (value.Interactions != null)
            {
                serializer.Serialize(writer, value.Interactions);
                return;
            }
            throw new Exception("Cannot marshal type InteractionsUnion");
        }

        public static readonly InteractionsUnionConverter Singleton = new InteractionsUnionConverter();
    }

    internal class OnInteractUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OnInteractUnion) || t == typeof(OnInteractUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<OnInteract>(reader);
                    return new OnInteractUnion { OnInteract = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<OnInteract[]>(reader);
                    return new OnInteractUnion { OnInteractArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type OnInteractUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (OnInteractUnion)untypedValue;
            if (value.OnInteractArray != null)
            {
                serializer.Serialize(writer, value.OnInteractArray);
                return;
            }
            if (value.OnInteract != null)
            {
                serializer.Serialize(writer, value.OnInteract);
                return;
            }
            throw new Exception("Cannot marshal type OnInteractUnion");
        }

        public static readonly OnInteractUnionConverter Singleton = new OnInteractUnionConverter();
    }

    internal class LookEventConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LookEvent) || t == typeof(LookEvent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new LookEvent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<OnCelebrationEndEvent>(reader);
                    return new LookEvent { OnCelebrationEndEvent = objectValue };
            }
            throw new Exception("Cannot unmarshal type LookEvent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (LookEvent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.OnCelebrationEndEvent != null)
            {
                serializer.Serialize(writer, value.OnCelebrationEndEvent);
                return;
            }
            throw new Exception("Cannot marshal type LookEvent");
        }

        public static readonly LookEventConverter Singleton = new LookEventConverter();
    }

    internal class NameActionsUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NameActionsUnion) || t == typeof(NameActionsUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<NameActions>(reader);
                    return new NameActionsUnion { NameActions = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<NameActions[]>(reader);
                    return new NameActionsUnion { NameActionsArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type NameActionsUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (NameActionsUnion)untypedValue;
            if (value.NameActionsArray != null)
            {
                serializer.Serialize(writer, value.NameActionsArray);
                return;
            }
            if (value.NameActions != null)
            {
                serializer.Serialize(writer, value.NameActions);
                return;
            }
            throw new Exception("Cannot marshal type NameActionsUnion");
        }

        public static readonly NameActionsUnionConverter Singleton = new NameActionsUnionConverter();
    }

    internal class EffectConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Effect) || t == typeof(Effect?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "absorption":
                    return Effect.Absorption;
                case "bad_omen":
                    return Effect.BadOmen;
                case "blindness":
                    return Effect.Blindness;
                case "conduit_power":
                    return Effect.ConduitPower;
                case "fatal_poison":
                    return Effect.FatalPoison;
                case "fire_resistance":
                    return Effect.FireResistance;
                case "haste":
                    return Effect.Haste;
                case "heal":
                    return Effect.Heal;
                case "health_boost":
                    return Effect.HealthBoost;
                case "hunger":
                    return Effect.Hunger;
                case "instant_damage":
                    return Effect.InstantDamage;
                case "instant_health":
                    return Effect.InstantHealth;
                case "invisibility":
                    return Effect.Invisibility;
                case "jump_boost":
                    return Effect.JumpBoost;
                case "levitation":
                    return Effect.Levitation;
                case "mining_fatigue":
                    return Effect.MiningFatigue;
                case "nausea":
                    return Effect.Nausea;
                case "night_vision":
                    return Effect.NightVision;
                case "poison":
                    return Effect.Poison;
                case "regeneration":
                    return Effect.Regeneration;
                case "resistance":
                    return Effect.Resistance;
                case "saturation":
                    return Effect.Saturation;
                case "slow_falling":
                    return Effect.SlowFalling;
                case "slowness":
                    return Effect.Slowness;
                case "speed":
                    return Effect.Speed;
                case "strength":
                    return Effect.Strength;
                case "village_hero":
                    return Effect.VillageHero;
                case "water_breathing":
                    return Effect.WaterBreathing;
                case "weakness":
                    return Effect.Weakness;
                case "wither":
                    return Effect.Wither;
            }
            throw new Exception("Cannot unmarshal type Effect");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Effect)untypedValue;
            switch (value)
            {
                case Effect.Absorption:
                    serializer.Serialize(writer, "absorption");
                    return;
                case Effect.BadOmen:
                    serializer.Serialize(writer, "bad_omen");
                    return;
                case Effect.Blindness:
                    serializer.Serialize(writer, "blindness");
                    return;
                case Effect.ConduitPower:
                    serializer.Serialize(writer, "conduit_power");
                    return;
                case Effect.FatalPoison:
                    serializer.Serialize(writer, "fatal_poison");
                    return;
                case Effect.FireResistance:
                    serializer.Serialize(writer, "fire_resistance");
                    return;
                case Effect.Haste:
                    serializer.Serialize(writer, "haste");
                    return;
                case Effect.Heal:
                    serializer.Serialize(writer, "heal");
                    return;
                case Effect.HealthBoost:
                    serializer.Serialize(writer, "health_boost");
                    return;
                case Effect.Hunger:
                    serializer.Serialize(writer, "hunger");
                    return;
                case Effect.InstantDamage:
                    serializer.Serialize(writer, "instant_damage");
                    return;
                case Effect.InstantHealth:
                    serializer.Serialize(writer, "instant_health");
                    return;
                case Effect.Invisibility:
                    serializer.Serialize(writer, "invisibility");
                    return;
                case Effect.JumpBoost:
                    serializer.Serialize(writer, "jump_boost");
                    return;
                case Effect.Levitation:
                    serializer.Serialize(writer, "levitation");
                    return;
                case Effect.MiningFatigue:
                    serializer.Serialize(writer, "mining_fatigue");
                    return;
                case Effect.Nausea:
                    serializer.Serialize(writer, "nausea");
                    return;
                case Effect.NightVision:
                    serializer.Serialize(writer, "night_vision");
                    return;
                case Effect.Poison:
                    serializer.Serialize(writer, "poison");
                    return;
                case Effect.Regeneration:
                    serializer.Serialize(writer, "regeneration");
                    return;
                case Effect.Resistance:
                    serializer.Serialize(writer, "resistance");
                    return;
                case Effect.Saturation:
                    serializer.Serialize(writer, "saturation");
                    return;
                case Effect.SlowFalling:
                    serializer.Serialize(writer, "slow_falling");
                    return;
                case Effect.Slowness:
                    serializer.Serialize(writer, "slowness");
                    return;
                case Effect.Speed:
                    serializer.Serialize(writer, "speed");
                    return;
                case Effect.Strength:
                    serializer.Serialize(writer, "strength");
                    return;
                case Effect.VillageHero:
                    serializer.Serialize(writer, "village_hero");
                    return;
                case Effect.WaterBreathing:
                    serializer.Serialize(writer, "water_breathing");
                    return;
                case Effect.Weakness:
                    serializer.Serialize(writer, "weakness");
                    return;
                case Effect.Wither:
                    serializer.Serialize(writer, "wither");
                    return;
            }
            throw new Exception("Cannot marshal type Effect");
        }

        public static readonly EffectConverter Singleton = new EffectConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double[]);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<double>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = FluffyMinMaxValueCheckConverter.Singleton;
                var arrayItem = (double)converter.ReadJson(reader, typeof(double), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value.ToArray();
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (double[])untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = FluffyMinMaxValueCheckConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class FluffyMinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= 0 && value <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double)untypedValue;
            if (value >= 0 && value <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly FluffyMinMaxValueCheckConverter Singleton = new FluffyMinMaxValueCheckConverter();
    }

    internal class SeatsUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SeatsUnion) || t == typeof(SeatsUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Seats>(reader);
                    return new SeatsUnion { Seats = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<Seats[]>(reader);
                    return new SeatsUnion { SeatsArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SeatsUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SeatsUnion)untypedValue;
            if (value.SeatsArray != null)
            {
                serializer.Serialize(writer, value.SeatsArray);
                return;
            }
            if (value.Seats != null)
            {
                serializer.Serialize(writer, value.Seats);
                return;
            }
            throw new Exception("Cannot marshal type SeatsUnion");
        }

        public static readonly SeatsUnionConverter Singleton = new SeatsUnionConverter();
    }

    internal class MinecraftSpawnEntityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinecraftSpawnEntity) || t == typeof(MinecraftSpawnEntity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<SpawnEntity>(reader);
                    return new MinecraftSpawnEntity { SpawnEntity = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<SpawnEntity[]>(reader);
                    return new MinecraftSpawnEntity { SpawnEntityArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type MinecraftSpawnEntity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinecraftSpawnEntity)untypedValue;
            if (value.SpawnEntityArray != null)
            {
                serializer.Serialize(writer, value.SpawnEntityArray);
                return;
            }
            if (value.SpawnEntity != null)
            {
                serializer.Serialize(writer, value.SpawnEntity);
                return;
            }
            throw new Exception("Cannot marshal type MinecraftSpawnEntity");
        }

        public static readonly MinecraftSpawnEntityConverter Singleton = new MinecraftSpawnEntityConverter();
    }

    internal class DelayUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DelayUnion) || t == typeof(DelayUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new DelayUnion { Double = doubleValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<DelayClass>(reader);
                    return new DelayUnion { DelayClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type DelayUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (DelayUnion)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.DelayClass != null)
            {
                serializer.Serialize(writer, value.DelayClass);
                return;
            }
            throw new Exception("Cannot marshal type DelayUnion");
        }

        public static readonly DelayUnionConverter Singleton = new DelayUnionConverter();
    }
}
